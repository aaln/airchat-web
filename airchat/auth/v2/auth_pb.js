// source: airchat/auth/v2/auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.airchat.auth.v2.AccessToken', null, global);
goog.exportSymbol('proto.airchat.auth.v2.AppleIdentity', null, global);
goog.exportSymbol('proto.airchat.auth.v2.AppleIdentityFactor', null, global);
goog.exportSymbol('proto.airchat.auth.v2.AuthError', null, global);
goog.exportSymbol('proto.airchat.auth.v2.AuthSessionToken', null, global);
goog.exportSymbol('proto.airchat.auth.v2.AuthenticationFactor', null, global);
goog.exportSymbol(
  'proto.airchat.auth.v2.AuthenticationFactor.FactorCase',
  null,
  global
);
goog.exportSymbol('proto.airchat.auth.v2.Credential', null, global);
goog.exportSymbol('proto.airchat.auth.v2.EmailFactor', null, global);
goog.exportSymbol('proto.airchat.auth.v2.EmailOTPFactor', null, global);
goog.exportSymbol('proto.airchat.auth.v2.EmailOTPStep', null, global);
goog.exportSymbol('proto.airchat.auth.v2.EmailStep', null, global);
goog.exportSymbol('proto.airchat.auth.v2.GoogleIdentity', null, global);
goog.exportSymbol('proto.airchat.auth.v2.GoogleIdentityFactor', null, global);
goog.exportSymbol('proto.airchat.auth.v2.InviteCodeFactor', null, global);
goog.exportSymbol('proto.airchat.auth.v2.InviteCodeStep', null, global);
goog.exportSymbol('proto.airchat.auth.v2.LinkAccountStep', null, global);
goog.exportSymbol('proto.airchat.auth.v2.PhoneNumberFactor', null, global);
goog.exportSymbol(
  'proto.airchat.auth.v2.PhoneNumberFactorTransport',
  null,
  global
);
goog.exportSymbol('proto.airchat.auth.v2.PhoneNumberOTPFactor', null, global);
goog.exportSymbol('proto.airchat.auth.v2.PhoneNumberOTPStep', null, global);
goog.exportSymbol('proto.airchat.auth.v2.PhoneNumberStep', null, global);
goog.exportSymbol('proto.airchat.auth.v2.RefreshToken', null, global);
goog.exportSymbol('proto.airchat.auth.v2.SignupRequest', null, global);
goog.exportSymbol('proto.airchat.auth.v2.SubjectAccountStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.AuthSessionToken = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.AuthSessionToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.AuthSessionToken.displayName =
    'proto.airchat.auth.v2.AuthSessionToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.AccessToken = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.AccessToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.AccessToken.displayName =
    'proto.airchat.auth.v2.AccessToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.RefreshToken = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.RefreshToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.RefreshToken.displayName =
    'proto.airchat.auth.v2.RefreshToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.Credential = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.Credential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.Credential.displayName =
    'proto.airchat.auth.v2.Credential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.PhoneNumberFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.PhoneNumberFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.PhoneNumberFactor.displayName =
    'proto.airchat.auth.v2.PhoneNumberFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.PhoneNumberOTPFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.PhoneNumberOTPFactor.displayName =
    'proto.airchat.auth.v2.PhoneNumberOTPFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.PhoneNumberStep = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.PhoneNumberStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.PhoneNumberStep.displayName =
    'proto.airchat.auth.v2.PhoneNumberStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.PhoneNumberOTPStep = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.PhoneNumberOTPStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.PhoneNumberOTPStep.displayName =
    'proto.airchat.auth.v2.PhoneNumberOTPStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.EmailFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.EmailFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.EmailFactor.displayName =
    'proto.airchat.auth.v2.EmailFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.EmailOTPFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.EmailOTPFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.EmailOTPFactor.displayName =
    'proto.airchat.auth.v2.EmailOTPFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.InviteCodeFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.InviteCodeFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.InviteCodeFactor.displayName =
    'proto.airchat.auth.v2.InviteCodeFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.AppleIdentityFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.AppleIdentityFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.AppleIdentityFactor.displayName =
    'proto.airchat.auth.v2.AppleIdentityFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.AppleIdentity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.AppleIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.AppleIdentity.displayName =
    'proto.airchat.auth.v2.AppleIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.GoogleIdentityFactor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.GoogleIdentityFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.GoogleIdentityFactor.displayName =
    'proto.airchat.auth.v2.GoogleIdentityFactor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.GoogleIdentity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.GoogleIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.GoogleIdentity.displayName =
    'proto.airchat.auth.v2.GoogleIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.SignupRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.SignupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.SignupRequest.displayName =
    'proto.airchat.auth.v2.SignupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.EmailStep = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.EmailStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.EmailStep.displayName =
    'proto.airchat.auth.v2.EmailStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.EmailOTPStep = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.EmailOTPStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.EmailOTPStep.displayName =
    'proto.airchat.auth.v2.EmailOTPStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.InviteCodeStep = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.InviteCodeStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.InviteCodeStep.displayName =
    'proto.airchat.auth.v2.InviteCodeStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.LinkAccountStep = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.auth.v2.LinkAccountStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.LinkAccountStep.displayName =
    'proto.airchat.auth.v2.LinkAccountStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.auth.v2.AuthenticationFactor = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_
  );
};
goog.inherits(proto.airchat.auth.v2.AuthenticationFactor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.auth.v2.AuthenticationFactor.displayName =
    'proto.airchat.auth.v2.AuthenticationFactor';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.AuthSessionToken.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.AuthSessionToken.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.AuthSessionToken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.AuthSessionToken.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.AuthSessionToken}
 */
proto.airchat.auth.v2.AuthSessionToken.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.AuthSessionToken();
  return proto.airchat.auth.v2.AuthSessionToken.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.AuthSessionToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.AuthSessionToken}
 */
proto.airchat.auth.v2.AuthSessionToken.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.AuthSessionToken.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.AuthSessionToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.AuthSessionToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.AuthSessionToken.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.airchat.auth.v2.AuthSessionToken.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.AuthSessionToken} returns this
 */
proto.airchat.auth.v2.AuthSessionToken.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.AccessToken.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.AccessToken.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.AccessToken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.AccessToken.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.AccessToken}
 */
proto.airchat.auth.v2.AccessToken.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.AccessToken();
  return proto.airchat.auth.v2.AccessToken.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.AccessToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.AccessToken}
 */
proto.airchat.auth.v2.AccessToken.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.AccessToken.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.AccessToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.AccessToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.AccessToken.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.airchat.auth.v2.AccessToken.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.AccessToken} returns this
 */
proto.airchat.auth.v2.AccessToken.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.RefreshToken.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.RefreshToken.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.RefreshToken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.RefreshToken.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.RefreshToken}
 */
proto.airchat.auth.v2.RefreshToken.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.RefreshToken();
  return proto.airchat.auth.v2.RefreshToken.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.RefreshToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.RefreshToken}
 */
proto.airchat.auth.v2.RefreshToken.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.RefreshToken.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.RefreshToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.RefreshToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.RefreshToken.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.airchat.auth.v2.RefreshToken.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.RefreshToken} returns this
 */
proto.airchat.auth.v2.RefreshToken.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.Credential.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.Credential.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.Credential} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.Credential.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accessToken:
          (f = msg.getAccessToken()) &&
          proto.airchat.auth.v2.AccessToken.toObject(includeInstance, f),
        refreshToken:
          (f = msg.getRefreshToken()) &&
          proto.airchat.auth.v2.RefreshToken.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.Credential}
 */
proto.airchat.auth.v2.Credential.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.Credential();
  return proto.airchat.auth.v2.Credential.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.Credential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.Credential}
 */
proto.airchat.auth.v2.Credential.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.airchat.auth.v2.AccessToken();
        reader.readMessage(
          value,
          proto.airchat.auth.v2.AccessToken.deserializeBinaryFromReader
        );
        msg.setAccessToken(value);
        break;
      case 2:
        var value = new proto.airchat.auth.v2.RefreshToken();
        reader.readMessage(
          value,
          proto.airchat.auth.v2.RefreshToken.deserializeBinaryFromReader
        );
        msg.setRefreshToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.Credential.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.Credential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.Credential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.Credential.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getAccessToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.auth.v2.AccessToken.serializeBinaryToWriter
    );
  }
  f = message.getRefreshToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airchat.auth.v2.RefreshToken.serializeBinaryToWriter
    );
  }
};

/**
 * optional AccessToken access_token = 1;
 * @return {?proto.airchat.auth.v2.AccessToken}
 */
proto.airchat.auth.v2.Credential.prototype.getAccessToken = function () {
  return /** @type{?proto.airchat.auth.v2.AccessToken} */ (
    jspb.Message.getWrapperField(this, proto.airchat.auth.v2.AccessToken, 1)
  );
};

/**
 * @param {?proto.airchat.auth.v2.AccessToken|undefined} value
 * @return {!proto.airchat.auth.v2.Credential} returns this
 */
proto.airchat.auth.v2.Credential.prototype.setAccessToken = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.Credential} returns this
 */
proto.airchat.auth.v2.Credential.prototype.clearAccessToken = function () {
  return this.setAccessToken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.Credential.prototype.hasAccessToken = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional RefreshToken refresh_token = 2;
 * @return {?proto.airchat.auth.v2.RefreshToken}
 */
proto.airchat.auth.v2.Credential.prototype.getRefreshToken = function () {
  return /** @type{?proto.airchat.auth.v2.RefreshToken} */ (
    jspb.Message.getWrapperField(this, proto.airchat.auth.v2.RefreshToken, 2)
  );
};

/**
 * @param {?proto.airchat.auth.v2.RefreshToken|undefined} value
 * @return {!proto.airchat.auth.v2.Credential} returns this
 */
proto.airchat.auth.v2.Credential.prototype.setRefreshToken = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.Credential} returns this
 */
proto.airchat.auth.v2.Credential.prototype.clearRefreshToken = function () {
  return this.setRefreshToken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.Credential.prototype.hasRefreshToken = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.PhoneNumberFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.PhoneNumberFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.PhoneNumberFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.PhoneNumberFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ''),
        locale: jspb.Message.getFieldWithDefault(msg, 2, ''),
        transport: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.PhoneNumberFactor}
 */
proto.airchat.auth.v2.PhoneNumberFactor.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.PhoneNumberFactor();
  return proto.airchat.auth.v2.PhoneNumberFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.PhoneNumberFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.PhoneNumberFactor}
 */
proto.airchat.auth.v2.PhoneNumberFactor.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhoneNumber(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setLocale(value);
        break;
      case 3:
        var value =
          /** @type {!proto.airchat.auth.v2.PhoneNumberFactorTransport} */ (
            reader.readEnum()
          );
        msg.setTransport(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.auth.v2.PhoneNumberFactor.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.PhoneNumberFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.PhoneNumberFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTransport();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
};

/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.getPhoneNumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.PhoneNumberFactor} returns this
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.setPhoneNumber = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string locale = 2;
 * @return {string}
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.getLocale = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.PhoneNumberFactor} returns this
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.setLocale = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional PhoneNumberFactorTransport transport = 3;
 * @return {!proto.airchat.auth.v2.PhoneNumberFactorTransport}
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.getTransport = function () {
  return /** @type {!proto.airchat.auth.v2.PhoneNumberFactorTransport} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/**
 * @param {!proto.airchat.auth.v2.PhoneNumberFactorTransport} value
 * @return {!proto.airchat.auth.v2.PhoneNumberFactor} returns this
 */
proto.airchat.auth.v2.PhoneNumberFactor.prototype.setTransport = function (
  value
) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.PhoneNumberOTPFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.PhoneNumberOTPFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.PhoneNumberOTPFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.PhoneNumberOTPFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ''),
        otp: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPFactor}
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.PhoneNumberOTPFactor();
  return proto.airchat.auth.v2.PhoneNumberOTPFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.PhoneNumberOTPFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPFactor}
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setPhoneNumber(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setOtp(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.auth.v2.PhoneNumberOTPFactor.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.PhoneNumberOTPFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.prototype.getPhoneNumber =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPFactor} returns this
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.prototype.setPhoneNumber = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string otp = 2;
 * @return {string}
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.prototype.getOtp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPFactor} returns this
 */
proto.airchat.auth.v2.PhoneNumberOTPFactor.prototype.setOtp = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.PhoneNumberStep.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.PhoneNumberStep.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.PhoneNumberStep} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.PhoneNumberStep.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.PhoneNumberStep}
 */
proto.airchat.auth.v2.PhoneNumberStep.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.PhoneNumberStep();
  return proto.airchat.auth.v2.PhoneNumberStep.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.PhoneNumberStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.PhoneNumberStep}
 */
proto.airchat.auth.v2.PhoneNumberStep.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhoneNumber(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.PhoneNumberStep.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.PhoneNumberStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.PhoneNumberStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.PhoneNumberStep.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.airchat.auth.v2.PhoneNumberStep.prototype.getPhoneNumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.PhoneNumberStep} returns this
 */
proto.airchat.auth.v2.PhoneNumberStep.prototype.setPhoneNumber = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.PhoneNumberOTPStep.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.PhoneNumberOTPStep} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.PhoneNumberOTPStep.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ''),
        isMasked: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
        otpLength: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPStep}
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.PhoneNumberOTPStep();
  return proto.airchat.auth.v2.PhoneNumberOTPStep.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.PhoneNumberOTPStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPStep}
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setPhoneNumber(value);
          break;
        case 2:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setIsMasked(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readUint32());
          msg.setOtpLength(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.auth.v2.PhoneNumberOTPStep.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.PhoneNumberOTPStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getIsMasked();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getOtpLength();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
};

/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.getPhoneNumber =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPStep} returns this
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.setPhoneNumber = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bool is_masked = 2;
 * @return {boolean}
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.getIsMasked = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 2, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPStep} returns this
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.setIsMasked = function (
  value
) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional uint32 otp_length = 3;
 * @return {number}
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.getOtpLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.airchat.auth.v2.PhoneNumberOTPStep} returns this
 */
proto.airchat.auth.v2.PhoneNumberOTPStep.prototype.setOtpLength = function (
  value
) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.EmailFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.EmailFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.EmailFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.EmailFactor.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.EmailFactor}
 */
proto.airchat.auth.v2.EmailFactor.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.EmailFactor();
  return proto.airchat.auth.v2.EmailFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.EmailFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.EmailFactor}
 */
proto.airchat.auth.v2.EmailFactor.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.EmailFactor.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.EmailFactor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.EmailFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.EmailFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.airchat.auth.v2.EmailFactor.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.EmailFactor} returns this
 */
proto.airchat.auth.v2.EmailFactor.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.EmailOTPFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.EmailOTPFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.EmailOTPFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.EmailOTPFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        otp: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.EmailOTPFactor}
 */
proto.airchat.auth.v2.EmailOTPFactor.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.EmailOTPFactor();
  return proto.airchat.auth.v2.EmailOTPFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.EmailOTPFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.EmailOTPFactor}
 */
proto.airchat.auth.v2.EmailOTPFactor.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setOtp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.EmailOTPFactor.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.EmailOTPFactor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.EmailOTPFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.EmailOTPFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.airchat.auth.v2.EmailOTPFactor.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.EmailOTPFactor} returns this
 */
proto.airchat.auth.v2.EmailOTPFactor.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string otp = 2;
 * @return {string}
 */
proto.airchat.auth.v2.EmailOTPFactor.prototype.getOtp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.EmailOTPFactor} returns this
 */
proto.airchat.auth.v2.EmailOTPFactor.prototype.setOtp = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.InviteCodeFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.InviteCodeFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.InviteCodeFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.InviteCodeFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        inviteCode: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.InviteCodeFactor}
 */
proto.airchat.auth.v2.InviteCodeFactor.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.InviteCodeFactor();
  return proto.airchat.auth.v2.InviteCodeFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.InviteCodeFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.InviteCodeFactor}
 */
proto.airchat.auth.v2.InviteCodeFactor.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setInviteCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.InviteCodeFactor.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.InviteCodeFactor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.InviteCodeFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.InviteCodeFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getInviteCode();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string invite_code = 1;
 * @return {string}
 */
proto.airchat.auth.v2.InviteCodeFactor.prototype.getInviteCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.InviteCodeFactor} returns this
 */
proto.airchat.auth.v2.InviteCodeFactor.prototype.setInviteCode = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.AppleIdentityFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.AppleIdentityFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.AppleIdentityFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.AppleIdentityFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        appleIdentityToken: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.AppleIdentityFactor}
 */
proto.airchat.auth.v2.AppleIdentityFactor.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.AppleIdentityFactor();
  return proto.airchat.auth.v2.AppleIdentityFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.AppleIdentityFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.AppleIdentityFactor}
 */
proto.airchat.auth.v2.AppleIdentityFactor.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setAppleIdentityToken(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.AppleIdentityFactor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.auth.v2.AppleIdentityFactor.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.AppleIdentityFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.AppleIdentityFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getAppleIdentityToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string apple_identity_token = 1;
 * @return {string}
 */
proto.airchat.auth.v2.AppleIdentityFactor.prototype.getAppleIdentityToken =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.AppleIdentityFactor} returns this
 */
proto.airchat.auth.v2.AppleIdentityFactor.prototype.setAppleIdentityToken =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.AppleIdentity.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.AppleIdentity.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.AppleIdentity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.AppleIdentity.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sub: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.AppleIdentity}
 */
proto.airchat.auth.v2.AppleIdentity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.AppleIdentity();
  return proto.airchat.auth.v2.AppleIdentity.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.AppleIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.AppleIdentity}
 */
proto.airchat.auth.v2.AppleIdentity.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSub(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.AppleIdentity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.AppleIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.AppleIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.AppleIdentity.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSub();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string sub = 1;
 * @return {string}
 */
proto.airchat.auth.v2.AppleIdentity.prototype.getSub = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.AppleIdentity} returns this
 */
proto.airchat.auth.v2.AppleIdentity.prototype.setSub = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.GoogleIdentityFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.GoogleIdentityFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.GoogleIdentityFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.GoogleIdentityFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        googleIdentityToken: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.GoogleIdentityFactor}
 */
proto.airchat.auth.v2.GoogleIdentityFactor.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.GoogleIdentityFactor();
  return proto.airchat.auth.v2.GoogleIdentityFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.GoogleIdentityFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.GoogleIdentityFactor}
 */
proto.airchat.auth.v2.GoogleIdentityFactor.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setGoogleIdentityToken(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.GoogleIdentityFactor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.auth.v2.GoogleIdentityFactor.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.GoogleIdentityFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.GoogleIdentityFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getGoogleIdentityToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string google_identity_token = 1;
 * @return {string}
 */
proto.airchat.auth.v2.GoogleIdentityFactor.prototype.getGoogleIdentityToken =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.GoogleIdentityFactor} returns this
 */
proto.airchat.auth.v2.GoogleIdentityFactor.prototype.setGoogleIdentityToken =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.GoogleIdentity.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.GoogleIdentity.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.GoogleIdentity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.GoogleIdentity.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sub: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.GoogleIdentity}
 */
proto.airchat.auth.v2.GoogleIdentity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.GoogleIdentity();
  return proto.airchat.auth.v2.GoogleIdentity.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.GoogleIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.GoogleIdentity}
 */
proto.airchat.auth.v2.GoogleIdentity.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSub(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.GoogleIdentity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.GoogleIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.GoogleIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.GoogleIdentity.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getSub();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string sub = 1;
 * @return {string}
 */
proto.airchat.auth.v2.GoogleIdentity.prototype.getSub = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.GoogleIdentity} returns this
 */
proto.airchat.auth.v2.GoogleIdentity.prototype.setSub = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.SignupRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.SignupRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.SignupRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.SignupRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.SignupRequest}
 */
proto.airchat.auth.v2.SignupRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.SignupRequest();
  return proto.airchat.auth.v2.SignupRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.SignupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.SignupRequest}
 */
proto.airchat.auth.v2.SignupRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.SignupRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.SignupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.SignupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.SignupRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.EmailStep.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.EmailStep.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.EmailStep} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.EmailStep.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.EmailStep}
 */
proto.airchat.auth.v2.EmailStep.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.EmailStep();
  return proto.airchat.auth.v2.EmailStep.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.EmailStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.EmailStep}
 */
proto.airchat.auth.v2.EmailStep.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.EmailStep.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.EmailStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.EmailStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.EmailStep.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.airchat.auth.v2.EmailStep.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.EmailStep} returns this
 */
proto.airchat.auth.v2.EmailStep.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.EmailOTPStep.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.EmailOTPStep.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.EmailOTPStep} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.EmailOTPStep.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        isMasked: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
        otpLength: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.EmailOTPStep}
 */
proto.airchat.auth.v2.EmailOTPStep.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.EmailOTPStep();
  return proto.airchat.auth.v2.EmailOTPStep.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.EmailOTPStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.EmailOTPStep}
 */
proto.airchat.auth.v2.EmailOTPStep.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsMasked(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setOtpLength(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.EmailOTPStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.EmailOTPStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.EmailOTPStep.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getIsMasked();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getOtpLength();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.auth.v2.EmailOTPStep} returns this
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bool is_masked = 2;
 * @return {boolean}
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.getIsMasked = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 2, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.airchat.auth.v2.EmailOTPStep} returns this
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.setIsMasked = function (value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional uint32 otp_length = 3;
 * @return {number}
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.getOtpLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.airchat.auth.v2.EmailOTPStep} returns this
 */
proto.airchat.auth.v2.EmailOTPStep.prototype.setOtpLength = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.InviteCodeStep.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.InviteCodeStep.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.InviteCodeStep} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.InviteCodeStep.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.InviteCodeStep}
 */
proto.airchat.auth.v2.InviteCodeStep.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.InviteCodeStep();
  return proto.airchat.auth.v2.InviteCodeStep.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.InviteCodeStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.InviteCodeStep}
 */
proto.airchat.auth.v2.InviteCodeStep.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.InviteCodeStep.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.InviteCodeStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.InviteCodeStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.InviteCodeStep.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.LinkAccountStep.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.LinkAccountStep.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.LinkAccountStep} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.LinkAccountStep.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.LinkAccountStep}
 */
proto.airchat.auth.v2.LinkAccountStep.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.LinkAccountStep();
  return proto.airchat.auth.v2.LinkAccountStep.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.LinkAccountStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.LinkAccountStep}
 */
proto.airchat.auth.v2.LinkAccountStep.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.LinkAccountStep.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.auth.v2.LinkAccountStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.LinkAccountStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.LinkAccountStep.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_ = [[1, 2, 3, 4, 5]];

/**
 * @enum {number}
 */
proto.airchat.auth.v2.AuthenticationFactor.FactorCase = {
  FACTOR_NOT_SET: 0,
  PHONE_NUMBER: 1,
  EMAIL: 2,
  INVITE_CODE: 3,
  APPLE_IDENTITY: 4,
  GOOGLE_IDENTITY: 5
};

/**
 * @return {proto.airchat.auth.v2.AuthenticationFactor.FactorCase}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.getFactorCase =
  function () {
    return /** @type {proto.airchat.auth.v2.AuthenticationFactor.FactorCase} */ (
      jspb.Message.computeOneofCase(
        this,
        proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_[0]
      )
    );
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.auth.v2.AuthenticationFactor.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.auth.v2.AuthenticationFactor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.auth.v2.AuthenticationFactor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.auth.v2.AuthenticationFactor.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumber:
          (f = msg.getPhoneNumber()) &&
          proto.airchat.auth.v2.PhoneNumberFactor.toObject(includeInstance, f),
        email:
          (f = msg.getEmail()) &&
          proto.airchat.auth.v2.EmailFactor.toObject(includeInstance, f),
        inviteCode:
          (f = msg.getInviteCode()) &&
          proto.airchat.auth.v2.InviteCodeFactor.toObject(includeInstance, f),
        appleIdentity:
          (f = msg.getAppleIdentity()) &&
          proto.airchat.auth.v2.AppleIdentity.toObject(includeInstance, f),
        googleIdentity:
          (f = msg.getGoogleIdentity()) &&
          proto.airchat.auth.v2.GoogleIdentity.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor}
 */
proto.airchat.auth.v2.AuthenticationFactor.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.auth.v2.AuthenticationFactor();
  return proto.airchat.auth.v2.AuthenticationFactor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.auth.v2.AuthenticationFactor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor}
 */
proto.airchat.auth.v2.AuthenticationFactor.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.airchat.auth.v2.PhoneNumberFactor();
          reader.readMessage(
            value,
            proto.airchat.auth.v2.PhoneNumberFactor.deserializeBinaryFromReader
          );
          msg.setPhoneNumber(value);
          break;
        case 2:
          var value = new proto.airchat.auth.v2.EmailFactor();
          reader.readMessage(
            value,
            proto.airchat.auth.v2.EmailFactor.deserializeBinaryFromReader
          );
          msg.setEmail(value);
          break;
        case 3:
          var value = new proto.airchat.auth.v2.InviteCodeFactor();
          reader.readMessage(
            value,
            proto.airchat.auth.v2.InviteCodeFactor.deserializeBinaryFromReader
          );
          msg.setInviteCode(value);
          break;
        case 4:
          var value = new proto.airchat.auth.v2.AppleIdentity();
          reader.readMessage(
            value,
            proto.airchat.auth.v2.AppleIdentity.deserializeBinaryFromReader
          );
          msg.setAppleIdentity(value);
          break;
        case 5:
          var value = new proto.airchat.auth.v2.GoogleIdentity();
          reader.readMessage(
            value,
            proto.airchat.auth.v2.GoogleIdentity.deserializeBinaryFromReader
          );
          msg.setGoogleIdentity(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.auth.v2.AuthenticationFactor.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.auth.v2.AuthenticationFactor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.auth.v2.AuthenticationFactor.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.auth.v2.PhoneNumberFactor.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airchat.auth.v2.EmailFactor.serializeBinaryToWriter
    );
  }
  f = message.getInviteCode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.airchat.auth.v2.InviteCodeFactor.serializeBinaryToWriter
    );
  }
  f = message.getAppleIdentity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.airchat.auth.v2.AppleIdentity.serializeBinaryToWriter
    );
  }
  f = message.getGoogleIdentity();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.airchat.auth.v2.GoogleIdentity.serializeBinaryToWriter
    );
  }
};

/**
 * optional PhoneNumberFactor phone_number = 1;
 * @return {?proto.airchat.auth.v2.PhoneNumberFactor}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.getPhoneNumber =
  function () {
    return /** @type{?proto.airchat.auth.v2.PhoneNumberFactor} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.auth.v2.PhoneNumberFactor,
        1
      )
    );
  };

/**
 * @param {?proto.airchat.auth.v2.PhoneNumberFactor|undefined} value
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.setPhoneNumber = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    1,
    proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.clearPhoneNumber =
  function () {
    return this.setPhoneNumber(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.hasPhoneNumber =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional EmailFactor email = 2;
 * @return {?proto.airchat.auth.v2.EmailFactor}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.getEmail = function () {
  return /** @type{?proto.airchat.auth.v2.EmailFactor} */ (
    jspb.Message.getWrapperField(this, proto.airchat.auth.v2.EmailFactor, 2)
  );
};

/**
 * @param {?proto.airchat.auth.v2.EmailFactor|undefined} value
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.setEmail = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    2,
    proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.clearEmail = function () {
  return this.setEmail(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.hasEmail = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional InviteCodeFactor invite_code = 3;
 * @return {?proto.airchat.auth.v2.InviteCodeFactor}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.getInviteCode =
  function () {
    return /** @type{?proto.airchat.auth.v2.InviteCodeFactor} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.auth.v2.InviteCodeFactor,
        3
      )
    );
  };

/**
 * @param {?proto.airchat.auth.v2.InviteCodeFactor|undefined} value
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.setInviteCode = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    3,
    proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.clearInviteCode =
  function () {
    return this.setInviteCode(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.hasInviteCode =
  function () {
    return jspb.Message.getField(this, 3) != null;
  };

/**
 * optional AppleIdentity apple_identity = 4;
 * @return {?proto.airchat.auth.v2.AppleIdentity}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.getAppleIdentity =
  function () {
    return /** @type{?proto.airchat.auth.v2.AppleIdentity} */ (
      jspb.Message.getWrapperField(this, proto.airchat.auth.v2.AppleIdentity, 4)
    );
  };

/**
 * @param {?proto.airchat.auth.v2.AppleIdentity|undefined} value
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.setAppleIdentity =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      4,
      proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.clearAppleIdentity =
  function () {
    return this.setAppleIdentity(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.hasAppleIdentity =
  function () {
    return jspb.Message.getField(this, 4) != null;
  };

/**
 * optional GoogleIdentity google_identity = 5;
 * @return {?proto.airchat.auth.v2.GoogleIdentity}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.getGoogleIdentity =
  function () {
    return /** @type{?proto.airchat.auth.v2.GoogleIdentity} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.auth.v2.GoogleIdentity,
        5
      )
    );
  };

/**
 * @param {?proto.airchat.auth.v2.GoogleIdentity|undefined} value
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.setGoogleIdentity =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      5,
      proto.airchat.auth.v2.AuthenticationFactor.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.auth.v2.AuthenticationFactor} returns this
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.clearGoogleIdentity =
  function () {
    return this.setGoogleIdentity(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.auth.v2.AuthenticationFactor.prototype.hasGoogleIdentity =
  function () {
    return jspb.Message.getField(this, 5) != null;
  };

/**
 * @enum {number}
 */
proto.airchat.auth.v2.PhoneNumberFactorTransport = {
  PHONE_NUMBER_FACTOR_TRANSPORT_INVALID: 0,
  PHONE_NUMBER_FACTOR_TRANSPORT_SMS: 1,
  PHONE_NUMBER_FACTOR_TRANSPORT_CALL: 2
};

/**
 * @enum {number}
 */
proto.airchat.auth.v2.AuthError = {
  AUTH_ERROR_INVALID: 0,
  AUTH_ERROR_RATE_LIMITED: 1,
  AUTH_ERROR_PHONE_NUMBER_FORMATTING: 2,
  AUTH_ERROR_PHONE_NUMBER_BLOCKED_CARRIER: 3,
  AUTH_ERROR_PHONE_NUMBER_INCORRECT_OTP: 4,
  AUTH_ERROR_PHONE_NUMBER_EXPIRED_OTP: 5,
  AUTH_ERROR_PHONE_NUMBER_MAX_ATTEMPTS_OTP: 6,
  AUTH_ERROR_PHONE_NUMBER_MAX_RESENDS_OTP: 7,
  AUTH_ERROR_PHONE_NUMBER_INVALID_TRANSPORT: 8,
  AUTH_ERROR_SESSION_TOKEN_EXPIRED: 9,
  AUTH_ERROR_SESSION_TOKEN_INVALID: 10,
  AUTH_ERROR_AUTH_TOKEN_EXPIRED: 11,
  AUTH_ERROR_AUTH_TOKEN_INVALID: 12,
  AUTH_ERROR_REFRESH_TOKEN_EXPIRED: 13,
  AUTH_ERROR_REFRESH_TOKEN_INVALID: 14,
  AUTH_ERROR_UNEXPECTED_STEP: 15,
  AUTH_ERROR_UNEXPECTED_INTERNAL_ERROR: 16,
  AUTH_ERROR_INVITE_CODE_UNKNOWN: 17,
  AUTH_ERROR_INVITE_CODE_MAXIMUM_USED: 18,
  AUTH_ERROR_INVITE_CODE_EXPIRED: 19
};

/**
 * @enum {number}
 */
proto.airchat.auth.v2.SubjectAccountStatus = {
  SUBJECT_ACCOUNT_STATUS_INVALID: 0,
  SUBJECT_ACCOUNT_STATUS_NEW: 1,
  SUBJECT_ACCOUNT_STATUS_ACTIVE: 2,
  SUBJECT_ACCOUNT_STATUS_SUSPENDED: 3,
  SUBJECT_ACCOUNT_STATUS_LOCKED_OUT: 4
};

goog.object.extend(exports, proto.airchat.auth.v2);
