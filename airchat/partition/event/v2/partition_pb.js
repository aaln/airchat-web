// source: airchat/partition/event/v2/partition.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

var airchat_activity_v2_activity_pb = require('../../../../airchat/activity/v2/activity_pb.js');
goog.object.extend(proto, airchat_activity_v2_activity_pb);
var airchat_gateway_v2_status_stream_pb = require('../../../../airchat/gateway/v2/status_stream_pb.js');
goog.object.extend(proto, airchat_gateway_v2_status_stream_pb);
var airchat_message_v2_message_pb = require('../../../../airchat/message/v2/message_pb.js');
goog.object.extend(proto, airchat_message_v2_message_pb);
var airchat_message_event_v2_message_pb = require('../../../../airchat/message/event/v2/message_pb.js');
goog.object.extend(proto, airchat_message_event_v2_message_pb);
var airchat_user_event_v2_user_pb = require('../../../../airchat/user/event/v2/user_pb.js');
goog.object.extend(proto, airchat_user_event_v2_user_pb);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.EventRecordingsByUserAndType',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.FollowerUserIdsIdentifier',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId',
  null,
  global
);
goog.exportSymbol('proto.airchat.partition.event.v2.Partition', null, global);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.PartitionListIdentifier',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.PartitionListIdentifier.ListIdentifierCase',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.PartitionPayload',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.PartitionPayload.PayloadCase',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.partition.event.v2.StatusAndTarget',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.Partition = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.partition.event.v2.Partition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.Partition.displayName =
    'proto.airchat.partition.event.v2.Partition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.PartitionListIdentifier = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.partition.event.v2.PartitionListIdentifier.repeatedFields_,
    proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_
  );
};
goog.inherits(
  proto.airchat.partition.event.v2.PartitionListIdentifier,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.PartitionListIdentifier.displayName =
    'proto.airchat.partition.event.v2.PartitionListIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.PartitionPayload = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_
  );
};
goog.inherits(proto.airchat.partition.event.v2.PartitionPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.PartitionPayload.displayName =
    'proto.airchat.partition.event.v2.PartitionPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType = function (
  opt_data
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.airchat.partition.event.v2.EventRecordingsByUserAndType,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.EventRecordingsByUserAndType.displayName =
    'proto.airchat.partition.event.v2.EventRecordingsByUserAndType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.StatusAndTarget = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.partition.event.v2.StatusAndTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.StatusAndTarget.displayName =
    'proto.airchat.partition.event.v2.StatusAndTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.partition.event.v2.FollowerUserIdsIdentifier,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.displayName =
    'proto.airchat.partition.event.v2.FollowerUserIdsIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId =
  function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
goog.inherits(
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.displayName =
    'proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId =
  function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
goog.inherits(
  proto.airchat.partition.event.v2
    .MessageThreadFeedItemsByMessageThreadIdAndFollowedId,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.displayName =
    'proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.Partition.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.partition.event.v2.Partition.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.Partition} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.Partition.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        partitionStart: msg.getPartitionStart_asB64(),
        partitionEnd: msg.getPartitionEnd_asB64(),
        identifier:
          (f = msg.getIdentifier()) &&
          proto.airchat.partition.event.v2.PartitionListIdentifier.toObject(
            includeInstance,
            f
          ),
        payload:
          (f = msg.getPayload()) &&
          proto.airchat.partition.event.v2.PartitionPayload.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.Partition}
 */
proto.airchat.partition.event.v2.Partition.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.partition.event.v2.Partition();
  return proto.airchat.partition.event.v2.Partition.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.Partition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.Partition}
 */
proto.airchat.partition.event.v2.Partition.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */ (reader.readBytes());
          msg.setPartitionStart(value);
          break;
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes());
          msg.setPartitionEnd(value);
          break;
        case 3:
          var value =
            new proto.airchat.partition.event.v2.PartitionListIdentifier();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2.PartitionListIdentifier
              .deserializeBinaryFromReader
          );
          msg.setIdentifier(value);
          break;
        case 4:
          var value = new proto.airchat.partition.event.v2.PartitionPayload();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2.PartitionPayload
              .deserializeBinaryFromReader
          );
          msg.setPayload(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.Partition.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.Partition.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.Partition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.Partition.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPartitionStart_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPartitionEnd_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.airchat.partition.event.v2.PartitionListIdentifier
        .serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.airchat.partition.event.v2.PartitionPayload.serializeBinaryToWriter
    );
  }
};

/**
 * optional bytes partition_start = 1;
 * @return {!(string|Uint8Array)}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPartitionStart =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * optional bytes partition_start = 1;
 * This is a type-conversion wrapper around `getPartitionStart()`
 * @return {string}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPartitionStart_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getPartitionStart())
    );
  };

/**
 * optional bytes partition_start = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPartitionStart()`
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPartitionStart_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getPartitionStart())
    );
  };

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.airchat.partition.event.v2.Partition} returns this
 */
proto.airchat.partition.event.v2.Partition.prototype.setPartitionStart =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value);
  };

/**
 * optional bytes partition_end = 2;
 * @return {!(string|Uint8Array)}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPartitionEnd =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * optional bytes partition_end = 2;
 * This is a type-conversion wrapper around `getPartitionEnd()`
 * @return {string}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPartitionEnd_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getPartitionEnd())
    );
  };

/**
 * optional bytes partition_end = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPartitionEnd()`
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPartitionEnd_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getPartitionEnd())
    );
  };

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.airchat.partition.event.v2.Partition} returns this
 */
proto.airchat.partition.event.v2.Partition.prototype.setPartitionEnd =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
  };

/**
 * optional PartitionListIdentifier identifier = 3;
 * @return {?proto.airchat.partition.event.v2.PartitionListIdentifier}
 */
proto.airchat.partition.event.v2.Partition.prototype.getIdentifier =
  function () {
    return /** @type{?proto.airchat.partition.event.v2.PartitionListIdentifier} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.partition.event.v2.PartitionListIdentifier,
        3
      )
    );
  };

/**
 * @param {?proto.airchat.partition.event.v2.PartitionListIdentifier|undefined} value
 * @return {!proto.airchat.partition.event.v2.Partition} returns this
 */
proto.airchat.partition.event.v2.Partition.prototype.setIdentifier = function (
  value
) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.Partition} returns this
 */
proto.airchat.partition.event.v2.Partition.prototype.clearIdentifier =
  function () {
    return this.setIdentifier(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.Partition.prototype.hasIdentifier =
  function () {
    return jspb.Message.getField(this, 3) != null;
  };

/**
 * optional PartitionPayload payload = 4;
 * @return {?proto.airchat.partition.event.v2.PartitionPayload}
 */
proto.airchat.partition.event.v2.Partition.prototype.getPayload = function () {
  return /** @type{?proto.airchat.partition.event.v2.PartitionPayload} */ (
    jspb.Message.getWrapperField(
      this,
      proto.airchat.partition.event.v2.PartitionPayload,
      4
    )
  );
};

/**
 * @param {?proto.airchat.partition.event.v2.PartitionPayload|undefined} value
 * @return {!proto.airchat.partition.event.v2.Partition} returns this
 */
proto.airchat.partition.event.v2.Partition.prototype.setPayload = function (
  value
) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.Partition} returns this
 */
proto.airchat.partition.event.v2.Partition.prototype.clearPayload =
  function () {
    return this.setPayload(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.Partition.prototype.hasPayload = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.repeatedFields_ = [1];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_ = [
  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
];

/**
 * @enum {number}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.ListIdentifierCase = {
  LIST_IDENTIFIER_NOT_SET: 0,
  FOLLOWER_USER_ID: 2,
  STATUS_SUBSCRIPTION_USER_ID: 3,
  FOLLOWED_USER_ID: 4,
  EVENT_RECORDINGS_BY_USER_AND_TYPE: 5,
  MESSAGES_BY_USER_ID: 6,
  FOLLOWER_USER_IDS_IDENTIFIER: 7,
  PRIVATE_MESSAGES_BY_USER_ID: 8,
  HIGHLIGHT_CONTEXT_IDS_BY_USER_ID: 9,
  MESSAGE_THREAD_FEED_ITEMS_BY_USER_ID_AND_FOLLOWED_ID: 10,
  MESSAGE_THREAD_FEED_ITEMS_BY_MESSAGE_THREAD_ID_AND_FOLLOWED_ID: 11
};

/**
 * @return {proto.airchat.partition.event.v2.PartitionListIdentifier.ListIdentifierCase}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getListIdentifierCase =
  function () {
    return /** @type {proto.airchat.partition.event.v2.PartitionListIdentifier.ListIdentifierCase} */ (
      jspb.Message.computeOneofCase(
        this,
        proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0]
      )
    );
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.PartitionListIdentifier.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.PartitionListIdentifier} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.PartitionListIdentifier.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        excludeIdList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
        followerUserId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        statusSubscriptionUserId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        followedUserId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        eventRecordingsByUserAndType:
          (f = msg.getEventRecordingsByUserAndType()) &&
          proto.airchat.partition.event.v2.EventRecordingsByUserAndType.toObject(
            includeInstance,
            f
          ),
        messagesByUserId: jspb.Message.getFieldWithDefault(msg, 6, ''),
        followerUserIdsIdentifier:
          (f = msg.getFollowerUserIdsIdentifier()) &&
          proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.toObject(
            includeInstance,
            f
          ),
        privateMessagesByUserId: jspb.Message.getFieldWithDefault(msg, 8, ''),
        highlightContextIdsByUserId: jspb.Message.getFieldWithDefault(
          msg,
          9,
          ''
        ),
        messageThreadFeedItemsByUserIdAndFollowedId:
          (f = msg.getMessageThreadFeedItemsByUserIdAndFollowedId()) &&
          proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.toObject(
            includeInstance,
            f
          ),
        messageThreadFeedItemsByMessageThreadIdAndFollowedId:
          (f = msg.getMessageThreadFeedItemsByMessageThreadIdAndFollowedId()) &&
          proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.partition.event.v2.PartitionListIdentifier();
    return proto.airchat.partition.event.v2.PartitionListIdentifier.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.PartitionListIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.addExcludeId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFollowerUserId(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setStatusSubscriptionUserId(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setFollowedUserId(value);
          break;
        case 5:
          var value =
            new proto.airchat.partition.event.v2.EventRecordingsByUserAndType();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2.EventRecordingsByUserAndType
              .deserializeBinaryFromReader
          );
          msg.setEventRecordingsByUserAndType(value);
          break;
        case 6:
          var value = /** @type {string} */ (reader.readString());
          msg.setMessagesByUserId(value);
          break;
        case 7:
          var value =
            new proto.airchat.partition.event.v2.FollowerUserIdsIdentifier();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2.FollowerUserIdsIdentifier
              .deserializeBinaryFromReader
          );
          msg.setFollowerUserIdsIdentifier(value);
          break;
        case 8:
          var value = /** @type {string} */ (reader.readString());
          msg.setPrivateMessagesByUserId(value);
          break;
        case 9:
          var value = /** @type {string} */ (reader.readString());
          msg.setHighlightContextIdsByUserId(value);
          break;
        case 10:
          var value =
            new proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2
              .MessageThreadFeedItemsByUserIdAndFollowedId
              .deserializeBinaryFromReader
          );
          msg.setMessageThreadFeedItemsByUserIdAndFollowedId(value);
          break;
        case 11:
          var value =
            new proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2
              .MessageThreadFeedItemsByMessageThreadIdAndFollowedId
              .deserializeBinaryFromReader
          );
          msg.setMessageThreadFeedItemsByMessageThreadIdAndFollowedId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.PartitionListIdentifier.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.PartitionListIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getExcludeIdList();
    if (f.length > 0) {
      writer.writeRepeatedString(1, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 2));
    if (f != null) {
      writer.writeString(2, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 3));
    if (f != null) {
      writer.writeString(3, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 4));
    if (f != null) {
      writer.writeString(4, f);
    }
    f = message.getEventRecordingsByUserAndType();
    if (f != null) {
      writer.writeMessage(
        5,
        f,
        proto.airchat.partition.event.v2.EventRecordingsByUserAndType
          .serializeBinaryToWriter
      );
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 6));
    if (f != null) {
      writer.writeString(6, f);
    }
    f = message.getFollowerUserIdsIdentifier();
    if (f != null) {
      writer.writeMessage(
        7,
        f,
        proto.airchat.partition.event.v2.FollowerUserIdsIdentifier
          .serializeBinaryToWriter
      );
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 8));
    if (f != null) {
      writer.writeString(8, f);
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 9));
    if (f != null) {
      writer.writeString(9, f);
    }
    f = message.getMessageThreadFeedItemsByUserIdAndFollowedId();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        proto.airchat.partition.event.v2
          .MessageThreadFeedItemsByUserIdAndFollowedId.serializeBinaryToWriter
      );
    }
    f = message.getMessageThreadFeedItemsByMessageThreadIdAndFollowedId();
    if (f != null) {
      writer.writeMessage(
        11,
        f,
        proto.airchat.partition.event.v2
          .MessageThreadFeedItemsByMessageThreadIdAndFollowedId
          .serializeBinaryToWriter
      );
    }
  };

/**
 * repeated string exclude_id = 1;
 * @return {!Array<string>}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getExcludeIdList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setExcludeIdList =
  function (value) {
    return jspb.Message.setField(this, 1, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.addExcludeId =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearExcludeIdList =
  function () {
    return this.setExcludeIdList([]);
  };

/**
 * optional string follower_user_id = 2;
 * @return {string}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getFollowerUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setFollowerUserId =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      2,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearFollowerUserId =
  function () {
    return jspb.Message.setOneofField(
      this,
      2,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasFollowerUserId =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

/**
 * optional string status_subscription_user_id = 3;
 * @return {string}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getStatusSubscriptionUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setStatusSubscriptionUserId =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      3,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearStatusSubscriptionUserId =
  function () {
    return jspb.Message.setOneofField(
      this,
      3,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasStatusSubscriptionUserId =
  function () {
    return jspb.Message.getField(this, 3) != null;
  };

/**
 * optional string followed_user_id = 4;
 * @return {string}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getFollowedUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setFollowedUserId =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      4,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearFollowedUserId =
  function () {
    return jspb.Message.setOneofField(
      this,
      4,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasFollowedUserId =
  function () {
    return jspb.Message.getField(this, 4) != null;
  };

/**
 * optional EventRecordingsByUserAndType event_recordings_by_user_and_type = 5;
 * @return {?proto.airchat.partition.event.v2.EventRecordingsByUserAndType}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getEventRecordingsByUserAndType =
  function () {
    return /** @type{?proto.airchat.partition.event.v2.EventRecordingsByUserAndType} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.partition.event.v2.EventRecordingsByUserAndType,
        5
      )
    );
  };

/**
 * @param {?proto.airchat.partition.event.v2.EventRecordingsByUserAndType|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setEventRecordingsByUserAndType =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      5,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearEventRecordingsByUserAndType =
  function () {
    return this.setEventRecordingsByUserAndType(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasEventRecordingsByUserAndType =
  function () {
    return jspb.Message.getField(this, 5) != null;
  };

/**
 * optional string messages_by_user_id = 6;
 * @return {string}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getMessagesByUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 6, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setMessagesByUserId =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      6,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearMessagesByUserId =
  function () {
    return jspb.Message.setOneofField(
      this,
      6,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasMessagesByUserId =
  function () {
    return jspb.Message.getField(this, 6) != null;
  };

/**
 * optional FollowerUserIdsIdentifier follower_user_ids_identifier = 7;
 * @return {?proto.airchat.partition.event.v2.FollowerUserIdsIdentifier}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getFollowerUserIdsIdentifier =
  function () {
    return /** @type{?proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.partition.event.v2.FollowerUserIdsIdentifier,
        7
      )
    );
  };

/**
 * @param {?proto.airchat.partition.event.v2.FollowerUserIdsIdentifier|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setFollowerUserIdsIdentifier =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      7,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearFollowerUserIdsIdentifier =
  function () {
    return this.setFollowerUserIdsIdentifier(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasFollowerUserIdsIdentifier =
  function () {
    return jspb.Message.getField(this, 7) != null;
  };

/**
 * optional string private_messages_by_user_id = 8;
 * @return {string}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getPrivateMessagesByUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 8, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setPrivateMessagesByUserId =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      8,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearPrivateMessagesByUserId =
  function () {
    return jspb.Message.setOneofField(
      this,
      8,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasPrivateMessagesByUserId =
  function () {
    return jspb.Message.getField(this, 8) != null;
  };

/**
 * optional string highlight_context_ids_by_user_id = 9;
 * @return {string}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getHighlightContextIdsByUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 9, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setHighlightContextIdsByUserId =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      9,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearHighlightContextIdsByUserId =
  function () {
    return jspb.Message.setOneofField(
      this,
      9,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasHighlightContextIdsByUserId =
  function () {
    return jspb.Message.getField(this, 9) != null;
  };

/**
 * optional MessageThreadFeedItemsByUserIdAndFollowedId message_thread_feed_items_by_user_id_and_followed_id = 10;
 * @return {?proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getMessageThreadFeedItemsByUserIdAndFollowedId =
  function () {
    return /** @type{?proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.partition.event.v2
          .MessageThreadFeedItemsByUserIdAndFollowedId,
        10
      )
    );
  };

/**
 * @param {?proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setMessageThreadFeedItemsByUserIdAndFollowedId =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      10,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearMessageThreadFeedItemsByUserIdAndFollowedId =
  function () {
    return this.setMessageThreadFeedItemsByUserIdAndFollowedId(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasMessageThreadFeedItemsByUserIdAndFollowedId =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

/**
 * optional MessageThreadFeedItemsByMessageThreadIdAndFollowedId message_thread_feed_items_by_message_thread_id_and_followed_id = 11;
 * @return {?proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.getMessageThreadFeedItemsByMessageThreadIdAndFollowedId =
  function () {
    return /** @type{?proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.partition.event.v2
          .MessageThreadFeedItemsByMessageThreadIdAndFollowedId,
        11
      )
    );
  };

/**
 * @param {?proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.setMessageThreadFeedItemsByMessageThreadIdAndFollowedId =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      11,
      proto.airchat.partition.event.v2.PartitionListIdentifier.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionListIdentifier} returns this
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.clearMessageThreadFeedItemsByMessageThreadIdAndFollowedId =
  function () {
    return this.setMessageThreadFeedItemsByMessageThreadIdAndFollowedId(
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionListIdentifier.prototype.hasMessageThreadFeedItemsByMessageThreadIdAndFollowedId =
  function () {
    return jspb.Message.getField(this, 11) != null;
  };

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_ = [
  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
];

/**
 * @enum {number}
 */
proto.airchat.partition.event.v2.PartitionPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  ACTIVITY_ITEM: 1,
  STREAM_STATUS_AND_TARGET: 2,
  USER_STATUS_SUBSCRIPTION: 3,
  MESSAGE_PUBLISHED: 4,
  MESSAGE_REPOST_UPDATE: 5,
  DELETE_MESSAGES: 6,
  DELETE_PRIVATE_MESSAGES: 7,
  HIGHLIGHT_ITEM_UPDATE: 8,
  MESSAGE_THREAD_FEED_UPDATE: 9,
  USER_FOLLOW: 10
};

/**
 * @return {proto.airchat.partition.event.v2.PartitionPayload.PayloadCase}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getPayloadCase =
  function () {
    return /** @type {proto.airchat.partition.event.v2.PartitionPayload.PayloadCase} */ (
      jspb.Message.computeOneofCase(
        this,
        proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0]
      )
    );
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.PartitionPayload.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.PartitionPayload.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.PartitionPayload} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.PartitionPayload.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        activityItem:
          (f = msg.getActivityItem()) &&
          airchat_activity_v2_activity_pb.ActivityItem.toObject(
            includeInstance,
            f
          ),
        streamStatusAndTarget:
          (f = msg.getStreamStatusAndTarget()) &&
          proto.airchat.partition.event.v2.StatusAndTarget.toObject(
            includeInstance,
            f
          ),
        userStatusSubscription:
          (f = msg.getUserStatusSubscription()) &&
          airchat_gateway_v2_status_stream_pb.StatusSubscription.toObject(
            includeInstance,
            f
          ),
        messagePublished:
          (f = msg.getMessagePublished()) &&
          airchat_message_event_v2_message_pb.MessagePublished.toObject(
            includeInstance,
            f
          ),
        messageRepostUpdate:
          (f = msg.getMessageRepostUpdate()) &&
          airchat_message_event_v2_message_pb.MessageRepostUpdate.toObject(
            includeInstance,
            f
          ),
        deleteMessages: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        deletePrivateMessages: jspb.Message.getBooleanFieldWithDefault(
          msg,
          7,
          false
        ),
        highlightItemUpdate:
          (f = msg.getHighlightItemUpdate()) &&
          airchat_message_event_v2_message_pb.HighlightItemUpdate.toObject(
            includeInstance,
            f
          ),
        messageThreadFeedUpdate:
          (f = msg.getMessageThreadFeedUpdate()) &&
          airchat_message_event_v2_message_pb.MessageThreadFeedUpdate.toObject(
            includeInstance,
            f
          ),
        userFollow:
          (f = msg.getUserFollow()) &&
          airchat_user_event_v2_user_pb.UserFollow.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload}
 */
proto.airchat.partition.event.v2.PartitionPayload.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.partition.event.v2.PartitionPayload();
  return proto.airchat.partition.event.v2.PartitionPayload.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.PartitionPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload}
 */
proto.airchat.partition.event.v2.PartitionPayload.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_activity_v2_activity_pb.ActivityItem();
          reader.readMessage(
            value,
            airchat_activity_v2_activity_pb.ActivityItem
              .deserializeBinaryFromReader
          );
          msg.setActivityItem(value);
          break;
        case 2:
          var value = new proto.airchat.partition.event.v2.StatusAndTarget();
          reader.readMessage(
            value,
            proto.airchat.partition.event.v2.StatusAndTarget
              .deserializeBinaryFromReader
          );
          msg.setStreamStatusAndTarget(value);
          break;
        case 3:
          var value =
            new airchat_gateway_v2_status_stream_pb.StatusSubscription();
          reader.readMessage(
            value,
            airchat_gateway_v2_status_stream_pb.StatusSubscription
              .deserializeBinaryFromReader
          );
          msg.setUserStatusSubscription(value);
          break;
        case 4:
          var value =
            new airchat_message_event_v2_message_pb.MessagePublished();
          reader.readMessage(
            value,
            airchat_message_event_v2_message_pb.MessagePublished
              .deserializeBinaryFromReader
          );
          msg.setMessagePublished(value);
          break;
        case 5:
          var value =
            new airchat_message_event_v2_message_pb.MessageRepostUpdate();
          reader.readMessage(
            value,
            airchat_message_event_v2_message_pb.MessageRepostUpdate
              .deserializeBinaryFromReader
          );
          msg.setMessageRepostUpdate(value);
          break;
        case 6:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setDeleteMessages(value);
          break;
        case 7:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setDeletePrivateMessages(value);
          break;
        case 8:
          var value =
            new airchat_message_event_v2_message_pb.HighlightItemUpdate();
          reader.readMessage(
            value,
            airchat_message_event_v2_message_pb.HighlightItemUpdate
              .deserializeBinaryFromReader
          );
          msg.setHighlightItemUpdate(value);
          break;
        case 9:
          var value =
            new airchat_message_event_v2_message_pb.MessageThreadFeedUpdate();
          reader.readMessage(
            value,
            airchat_message_event_v2_message_pb.MessageThreadFeedUpdate
              .deserializeBinaryFromReader
          );
          msg.setMessageThreadFeedUpdate(value);
          break;
        case 10:
          var value = new airchat_user_event_v2_user_pb.UserFollow();
          reader.readMessage(
            value,
            airchat_user_event_v2_user_pb.UserFollow.deserializeBinaryFromReader
          );
          msg.setUserFollow(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.PartitionPayload.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.PartitionPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.PartitionPayload.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getActivityItem();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        airchat_activity_v2_activity_pb.ActivityItem.serializeBinaryToWriter
      );
    }
    f = message.getStreamStatusAndTarget();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        proto.airchat.partition.event.v2.StatusAndTarget.serializeBinaryToWriter
      );
    }
    f = message.getUserStatusSubscription();
    if (f != null) {
      writer.writeMessage(
        3,
        f,
        airchat_gateway_v2_status_stream_pb.StatusSubscription
          .serializeBinaryToWriter
      );
    }
    f = message.getMessagePublished();
    if (f != null) {
      writer.writeMessage(
        4,
        f,
        airchat_message_event_v2_message_pb.MessagePublished
          .serializeBinaryToWriter
      );
    }
    f = message.getMessageRepostUpdate();
    if (f != null) {
      writer.writeMessage(
        5,
        f,
        airchat_message_event_v2_message_pb.MessageRepostUpdate
          .serializeBinaryToWriter
      );
    }
    f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
    if (f != null) {
      writer.writeBool(6, f);
    }
    f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
    if (f != null) {
      writer.writeBool(7, f);
    }
    f = message.getHighlightItemUpdate();
    if (f != null) {
      writer.writeMessage(
        8,
        f,
        airchat_message_event_v2_message_pb.HighlightItemUpdate
          .serializeBinaryToWriter
      );
    }
    f = message.getMessageThreadFeedUpdate();
    if (f != null) {
      writer.writeMessage(
        9,
        f,
        airchat_message_event_v2_message_pb.MessageThreadFeedUpdate
          .serializeBinaryToWriter
      );
    }
    f = message.getUserFollow();
    if (f != null) {
      writer.writeMessage(
        10,
        f,
        airchat_user_event_v2_user_pb.UserFollow.serializeBinaryToWriter
      );
    }
  };

/**
 * optional airchat.activity.v2.ActivityItem activity_item = 1;
 * @return {?proto.airchat.activity.v2.ActivityItem}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getActivityItem =
  function () {
    return /** @type{?proto.airchat.activity.v2.ActivityItem} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_activity_v2_activity_pb.ActivityItem,
        1
      )
    );
  };

/**
 * @param {?proto.airchat.activity.v2.ActivityItem|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setActivityItem =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      1,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearActivityItem =
  function () {
    return this.setActivityItem(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasActivityItem =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional StatusAndTarget stream_status_and_target = 2;
 * @return {?proto.airchat.partition.event.v2.StatusAndTarget}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getStreamStatusAndTarget =
  function () {
    return /** @type{?proto.airchat.partition.event.v2.StatusAndTarget} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.partition.event.v2.StatusAndTarget,
        2
      )
    );
  };

/**
 * @param {?proto.airchat.partition.event.v2.StatusAndTarget|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setStreamStatusAndTarget =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      2,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearStreamStatusAndTarget =
  function () {
    return this.setStreamStatusAndTarget(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasStreamStatusAndTarget =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

/**
 * optional airchat.gateway.v2.StatusSubscription user_status_subscription = 3;
 * @return {?proto.airchat.gateway.v2.StatusSubscription}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getUserStatusSubscription =
  function () {
    return /** @type{?proto.airchat.gateway.v2.StatusSubscription} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_gateway_v2_status_stream_pb.StatusSubscription,
        3
      )
    );
  };

/**
 * @param {?proto.airchat.gateway.v2.StatusSubscription|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setUserStatusSubscription =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      3,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearUserStatusSubscription =
  function () {
    return this.setUserStatusSubscription(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasUserStatusSubscription =
  function () {
    return jspb.Message.getField(this, 3) != null;
  };

/**
 * optional airchat.message.event.v2.MessagePublished message_published = 4;
 * @return {?proto.airchat.message.event.v2.MessagePublished}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getMessagePublished =
  function () {
    return /** @type{?proto.airchat.message.event.v2.MessagePublished} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_message_event_v2_message_pb.MessagePublished,
        4
      )
    );
  };

/**
 * @param {?proto.airchat.message.event.v2.MessagePublished|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setMessagePublished =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      4,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearMessagePublished =
  function () {
    return this.setMessagePublished(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasMessagePublished =
  function () {
    return jspb.Message.getField(this, 4) != null;
  };

/**
 * optional airchat.message.event.v2.MessageRepostUpdate message_repost_update = 5;
 * @return {?proto.airchat.message.event.v2.MessageRepostUpdate}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getMessageRepostUpdate =
  function () {
    return /** @type{?proto.airchat.message.event.v2.MessageRepostUpdate} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_message_event_v2_message_pb.MessageRepostUpdate,
        5
      )
    );
  };

/**
 * @param {?proto.airchat.message.event.v2.MessageRepostUpdate|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setMessageRepostUpdate =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      5,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearMessageRepostUpdate =
  function () {
    return this.setMessageRepostUpdate(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasMessageRepostUpdate =
  function () {
    return jspb.Message.getField(this, 5) != null;
  };

/**
 * optional bool delete_messages = 6;
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getDeleteMessages =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 6, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setDeleteMessages =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      6,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearDeleteMessages =
  function () {
    return jspb.Message.setOneofField(
      this,
      6,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasDeleteMessages =
  function () {
    return jspb.Message.getField(this, 6) != null;
  };

/**
 * optional bool delete_private_messages = 7;
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getDeletePrivateMessages =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 7, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setDeletePrivateMessages =
  function (value) {
    return jspb.Message.setOneofField(
      this,
      7,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearDeletePrivateMessages =
  function () {
    return jspb.Message.setOneofField(
      this,
      7,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasDeletePrivateMessages =
  function () {
    return jspb.Message.getField(this, 7) != null;
  };

/**
 * optional airchat.message.event.v2.HighlightItemUpdate highlight_item_update = 8;
 * @return {?proto.airchat.message.event.v2.HighlightItemUpdate}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getHighlightItemUpdate =
  function () {
    return /** @type{?proto.airchat.message.event.v2.HighlightItemUpdate} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_message_event_v2_message_pb.HighlightItemUpdate,
        8
      )
    );
  };

/**
 * @param {?proto.airchat.message.event.v2.HighlightItemUpdate|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setHighlightItemUpdate =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      8,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearHighlightItemUpdate =
  function () {
    return this.setHighlightItemUpdate(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasHighlightItemUpdate =
  function () {
    return jspb.Message.getField(this, 8) != null;
  };

/**
 * optional airchat.message.event.v2.MessageThreadFeedUpdate message_thread_feed_update = 9;
 * @return {?proto.airchat.message.event.v2.MessageThreadFeedUpdate}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getMessageThreadFeedUpdate =
  function () {
    return /** @type{?proto.airchat.message.event.v2.MessageThreadFeedUpdate} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_message_event_v2_message_pb.MessageThreadFeedUpdate,
        9
      )
    );
  };

/**
 * @param {?proto.airchat.message.event.v2.MessageThreadFeedUpdate|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setMessageThreadFeedUpdate =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      9,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearMessageThreadFeedUpdate =
  function () {
    return this.setMessageThreadFeedUpdate(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasMessageThreadFeedUpdate =
  function () {
    return jspb.Message.getField(this, 9) != null;
  };

/**
 * optional airchat.user.event.v2.UserFollow user_follow = 10;
 * @return {?proto.airchat.user.event.v2.UserFollow}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.getUserFollow =
  function () {
    return /** @type{?proto.airchat.user.event.v2.UserFollow} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_user_event_v2_user_pb.UserFollow,
        10
      )
    );
  };

/**
 * @param {?proto.airchat.user.event.v2.UserFollow|undefined} value
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.setUserFollow =
  function (value) {
    return jspb.Message.setOneofWrapperField(
      this,
      10,
      proto.airchat.partition.event.v2.PartitionPayload.oneofGroups_[0],
      value
    );
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.PartitionPayload} returns this
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.clearUserFollow =
  function () {
    return this.setUserFollow(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.PartitionPayload.prototype.hasUserFollow =
  function () {
    return jspb.Message.getField(this, 10) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.EventRecordingsByUserAndType.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.EventRecordingsByUserAndType.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.EventRecordingsByUserAndType.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          eventType: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType}
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.partition.event.v2.EventRecordingsByUserAndType();
    return proto.airchat.partition.event.v2.EventRecordingsByUserAndType.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType}
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value =
            /** @type {!proto.airchat.message.v2.MessageEventType} */ (
              reader.readEnum()
            );
          msg.setEventType(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.EventRecordingsByUserAndType.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getEventType();
    if (f !== 0.0) {
      writer.writeEnum(2, f);
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType} returns this
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional airchat.message.v2.MessageEventType event_type = 2;
 * @return {!proto.airchat.message.v2.MessageEventType}
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.prototype.getEventType =
  function () {
    return /** @type {!proto.airchat.message.v2.MessageEventType} */ (
      jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

/**
 * @param {!proto.airchat.message.v2.MessageEventType} value
 * @return {!proto.airchat.partition.event.v2.EventRecordingsByUserAndType} returns this
 */
proto.airchat.partition.event.v2.EventRecordingsByUserAndType.prototype.setEventType =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.StatusAndTarget.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.StatusAndTarget.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.StatusAndTarget} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.StatusAndTarget.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        status:
          (f = msg.getStatus()) &&
          airchat_gateway_v2_status_stream_pb.Status.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.StatusAndTarget}
 */
proto.airchat.partition.event.v2.StatusAndTarget.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.partition.event.v2.StatusAndTarget();
  return proto.airchat.partition.event.v2.StatusAndTarget.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.StatusAndTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.StatusAndTarget}
 */
proto.airchat.partition.event.v2.StatusAndTarget.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_gateway_v2_status_stream_pb.Status();
          reader.readMessage(
            value,
            airchat_gateway_v2_status_stream_pb.Status
              .deserializeBinaryFromReader
          );
          msg.setStatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.StatusAndTarget.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.StatusAndTarget.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.StatusAndTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.StatusAndTarget.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        airchat_gateway_v2_status_stream_pb.Status.serializeBinaryToWriter
      );
    }
  };

/**
 * optional airchat.gateway.v2.Status status = 1;
 * @return {?proto.airchat.gateway.v2.Status}
 */
proto.airchat.partition.event.v2.StatusAndTarget.prototype.getStatus =
  function () {
    return /** @type{?proto.airchat.gateway.v2.Status} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_gateway_v2_status_stream_pb.Status,
        1
      )
    );
  };

/**
 * @param {?proto.airchat.gateway.v2.Status|undefined} value
 * @return {!proto.airchat.partition.event.v2.StatusAndTarget} returns this
 */
proto.airchat.partition.event.v2.StatusAndTarget.prototype.setStatus =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.partition.event.v2.StatusAndTarget} returns this
 */
proto.airchat.partition.event.v2.StatusAndTarget.prototype.clearStatus =
  function () {
    return this.setStatus(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.partition.event.v2.StatusAndTarget.prototype.hasStatus =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.repeatedFields_ = [
  1
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          userIdList:
            (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier}
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.partition.event.v2.FollowerUserIdsIdentifier();
    return proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier}
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.addUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserIdList();
    if (f.length > 0) {
      writer.writeRepeatedString(1, f);
    }
  };

/**
 * repeated string user_id = 1;
 * @return {!Array<string>}
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.prototype.getUserIdList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} returns this
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.prototype.setUserIdList =
  function (value) {
    return jspb.Message.setField(this, 1, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} returns this
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.prototype.addUserId =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.partition.event.v2.FollowerUserIdsIdentifier} returns this
 */
proto.airchat.partition.event.v2.FollowerUserIdsIdentifier.prototype.clearUserIdList =
  function () {
    return this.setUserIdList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          followedUserId: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId();
    return proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFollowedUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getFollowedUserId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId} returns this
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string followed_user_id = 2;
 * @return {string}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.prototype.getFollowedUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId} returns this
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByUserIdAndFollowedId.prototype.setFollowedUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          messageThreadId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          followedUserId: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId();
    return proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setMessageThreadId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFollowedUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getMessageThreadId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getFollowedUserId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string message_thread_id = 1;
 * @return {string}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.prototype.getMessageThreadId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId} returns this
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.prototype.setMessageThreadId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string followed_user_id = 2;
 * @return {string}
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.prototype.getFollowedUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId} returns this
 */
proto.airchat.partition.event.v2.MessageThreadFeedItemsByMessageThreadIdAndFollowedId.prototype.setFollowedUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

goog.object.extend(exports, proto.airchat.partition.event.v2);
