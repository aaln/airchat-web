// source: airchat/gateway/v2/status_stream_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_gateway_v2_status_stream_pb = require('../../../airchat/gateway/v2/status_stream_pb.js');
goog.object.extend(proto, airchat_gateway_v2_status_stream_pb);
goog.exportSymbol('proto.airchat.gateway.v2.SendStatusRequest', null, global);
goog.exportSymbol('proto.airchat.gateway.v2.SendStatusResponse', null, global);
goog.exportSymbol('proto.airchat.gateway.v2.StatusStreamRequest', null, global);
goog.exportSymbol('proto.airchat.gateway.v2.StatusStreamRequest.RequestCase', null, global);
goog.exportSymbol('proto.airchat.gateway.v2.StatusStreamResponse', null, global);
goog.exportSymbol('proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest', null, global);
goog.exportSymbol('proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.v2.StatusStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.gateway.v2.StatusStreamRequest.oneofGroups_);
};
goog.inherits(proto.airchat.gateway.v2.StatusStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.v2.StatusStreamRequest.displayName = 'proto.airchat.gateway.v2.StatusStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.v2.StatusStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.gateway.v2.StatusStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.v2.StatusStreamResponse.displayName = 'proto.airchat.gateway.v2.StatusStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.repeatedFields_, null);
};
goog.inherits(proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.displayName = 'proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.displayName = 'proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.v2.SendStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.gateway.v2.SendStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.v2.SendStatusRequest.displayName = 'proto.airchat.gateway.v2.SendStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.v2.SendStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.gateway.v2.SendStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.v2.SendStatusResponse.displayName = 'proto.airchat.gateway.v2.SendStatusResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.gateway.v2.StatusStreamRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.airchat.gateway.v2.StatusStreamRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  SUBSCRIPTION: 1,
  SEND_STATUS: 2
};

/**
 * @return {proto.airchat.gateway.v2.StatusStreamRequest.RequestCase}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.getRequestCase = function() {
  return /** @type {proto.airchat.gateway.v2.StatusStreamRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.airchat.gateway.v2.StatusStreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.gateway.v2.StatusStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.gateway.v2.StatusStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.StatusStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscription: (f = msg.getSubscription()) && proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.toObject(includeInstance, f),
    sendStatus: (f = msg.getSendStatus()) && proto.airchat.gateway.v2.SendStatusRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.v2.StatusStreamRequest}
 */
proto.airchat.gateway.v2.StatusStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.v2.StatusStreamRequest;
  return proto.airchat.gateway.v2.StatusStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.v2.StatusStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.v2.StatusStreamRequest}
 */
proto.airchat.gateway.v2.StatusStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest;
      reader.readMessage(value,proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    case 2:
      var value = new proto.airchat.gateway.v2.SendStatusRequest;
      reader.readMessage(value,proto.airchat.gateway.v2.SendStatusRequest.deserializeBinaryFromReader);
      msg.setSendStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.gateway.v2.StatusStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.v2.StatusStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.StatusStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.serializeBinaryToWriter
    );
  }
  f = message.getSendStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airchat.gateway.v2.SendStatusRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional UpdateStatusSubscriptionRequest subscription = 1;
 * @return {?proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.getSubscription = function() {
  return /** @type{?proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} */ (
    jspb.Message.getWrapperField(this, proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest, 1));
};


/**
 * @param {?proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest|undefined} value
 * @return {!proto.airchat.gateway.v2.StatusStreamRequest} returns this
*/
proto.airchat.gateway.v2.StatusStreamRequest.prototype.setSubscription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.airchat.gateway.v2.StatusStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.v2.StatusStreamRequest} returns this
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SendStatusRequest send_status = 2;
 * @return {?proto.airchat.gateway.v2.SendStatusRequest}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.getSendStatus = function() {
  return /** @type{?proto.airchat.gateway.v2.SendStatusRequest} */ (
    jspb.Message.getWrapperField(this, proto.airchat.gateway.v2.SendStatusRequest, 2));
};


/**
 * @param {?proto.airchat.gateway.v2.SendStatusRequest|undefined} value
 * @return {!proto.airchat.gateway.v2.StatusStreamRequest} returns this
*/
proto.airchat.gateway.v2.StatusStreamRequest.prototype.setSendStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.airchat.gateway.v2.StatusStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.v2.StatusStreamRequest} returns this
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.clearSendStatus = function() {
  return this.setSendStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.v2.StatusStreamRequest.prototype.hasSendStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.gateway.v2.StatusStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.gateway.v2.StatusStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.StatusStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: (f = msg.getStatus()) && airchat_gateway_v2_status_stream_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.v2.StatusStreamResponse}
 */
proto.airchat.gateway.v2.StatusStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.v2.StatusStreamResponse;
  return proto.airchat.gateway.v2.StatusStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.v2.StatusStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.v2.StatusStreamResponse}
 */
proto.airchat.gateway.v2.StatusStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = new airchat_gateway_v2_status_stream_pb.Status;
      reader.readMessage(value,airchat_gateway_v2_status_stream_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.gateway.v2.StatusStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.v2.StatusStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.StatusStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      airchat_gateway_v2_status_stream_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.gateway.v2.StatusStreamResponse} returns this
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {?proto.airchat.gateway.v2.Status}
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.getStatus = function() {
  return /** @type{?proto.airchat.gateway.v2.Status} */ (
    jspb.Message.getWrapperField(this, airchat_gateway_v2_status_stream_pb.Status, 2));
};


/**
 * @param {?proto.airchat.gateway.v2.Status|undefined} value
 * @return {!proto.airchat.gateway.v2.StatusStreamResponse} returns this
*/
proto.airchat.gateway.v2.StatusStreamResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.v2.StatusStreamResponse} returns this
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.v2.StatusStreamResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest;
  return proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} returns this
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string user_id = 2;
 * @return {!Array<string>}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.getUserIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} returns this
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.setUserIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} returns this
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.addUserId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest} returns this
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionRequest.prototype.clearUserIdList = function() {
  return this.setUserIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse;
  return proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.UpdateStatusSubscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.gateway.v2.SendStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.gateway.v2.SendStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.gateway.v2.SendStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.SendStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && airchat_gateway_v2_status_stream_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.v2.SendStatusRequest}
 */
proto.airchat.gateway.v2.SendStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.v2.SendStatusRequest;
  return proto.airchat.gateway.v2.SendStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.v2.SendStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.v2.SendStatusRequest}
 */
proto.airchat.gateway.v2.SendStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_gateway_v2_status_stream_pb.Status;
      reader.readMessage(value,airchat_gateway_v2_status_stream_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.v2.SendStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.gateway.v2.SendStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.v2.SendStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.SendStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_gateway_v2_status_stream_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.airchat.gateway.v2.Status}
 */
proto.airchat.gateway.v2.SendStatusRequest.prototype.getStatus = function() {
  return /** @type{?proto.airchat.gateway.v2.Status} */ (
    jspb.Message.getWrapperField(this, airchat_gateway_v2_status_stream_pb.Status, 1));
};


/**
 * @param {?proto.airchat.gateway.v2.Status|undefined} value
 * @return {!proto.airchat.gateway.v2.SendStatusRequest} returns this
*/
proto.airchat.gateway.v2.SendStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.v2.SendStatusRequest} returns this
 */
proto.airchat.gateway.v2.SendStatusRequest.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.v2.SendStatusRequest.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.gateway.v2.SendStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.gateway.v2.SendStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.gateway.v2.SendStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.SendStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.v2.SendStatusResponse}
 */
proto.airchat.gateway.v2.SendStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.v2.SendStatusResponse;
  return proto.airchat.gateway.v2.SendStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.v2.SendStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.v2.SendStatusResponse}
 */
proto.airchat.gateway.v2.SendStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.v2.SendStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.gateway.v2.SendStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.v2.SendStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.v2.SendStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.airchat.gateway.v2);
