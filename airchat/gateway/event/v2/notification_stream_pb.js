// source: airchat/gateway/event/v2/notification_stream.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

var airchat_gateway_v2_gateway_pb = require('../../../../airchat/gateway/v2/gateway_pb.js');
goog.object.extend(proto, airchat_gateway_v2_gateway_pb);
var airchat_gateway_v2_notification_stream_pb = require('../../../../airchat/gateway/v2/notification_stream_pb.js');
goog.object.extend(proto, airchat_gateway_v2_notification_stream_pb);
goog.exportSymbol(
  'proto.airchat.gateway.event.v2.NotificationEvent',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.gateway.event.v2.NotificationSubscription',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.event.v2.NotificationSubscription = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.airchat.gateway.event.v2.NotificationSubscription,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.event.v2.NotificationSubscription.displayName =
    'proto.airchat.gateway.event.v2.NotificationSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.gateway.event.v2.NotificationEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.gateway.event.v2.NotificationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.gateway.event.v2.NotificationEvent.displayName =
    'proto.airchat.gateway.event.v2.NotificationEvent';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.gateway.event.v2.NotificationSubscription.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.gateway.event.v2.NotificationSubscription.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.gateway.event.v2.NotificationSubscription} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.gateway.event.v2.NotificationSubscription.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        streamId:
          (f = msg.getStreamId()) &&
          airchat_gateway_v2_gateway_pb.StreamIdentifier.toObject(
            includeInstance,
            f
          ),
        userId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        action: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.event.v2.NotificationSubscription}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.gateway.event.v2.NotificationSubscription();
    return proto.airchat.gateway.event.v2.NotificationSubscription.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.event.v2.NotificationSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.event.v2.NotificationSubscription}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_gateway_v2_gateway_pb.StreamIdentifier();
          reader.readMessage(
            value,
            airchat_gateway_v2_gateway_pb.StreamIdentifier
              .deserializeBinaryFromReader
          );
          msg.setStreamId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 3:
          var value =
            /** @type {!proto.airchat.gateway.v2.SubscriptionAction} */ (
              reader.readEnum()
            );
          msg.setAction(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.gateway.event.v2.NotificationSubscription.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.event.v2.NotificationSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.event.v2.NotificationSubscription.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getStreamId();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        airchat_gateway_v2_gateway_pb.StreamIdentifier.serializeBinaryToWriter
      );
    }
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getAction();
    if (f !== 0.0) {
      writer.writeEnum(3, f);
    }
  };

/**
 * optional airchat.gateway.v2.StreamIdentifier stream_id = 1;
 * @return {?proto.airchat.gateway.v2.StreamIdentifier}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.getStreamId =
  function () {
    return /** @type{?proto.airchat.gateway.v2.StreamIdentifier} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_gateway_v2_gateway_pb.StreamIdentifier,
        1
      )
    );
  };

/**
 * @param {?proto.airchat.gateway.v2.StreamIdentifier|undefined} value
 * @return {!proto.airchat.gateway.event.v2.NotificationSubscription} returns this
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.setStreamId =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.event.v2.NotificationSubscription} returns this
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.clearStreamId =
  function () {
    return this.setStreamId(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.hasStreamId =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.gateway.event.v2.NotificationSubscription} returns this
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional airchat.gateway.v2.SubscriptionAction action = 3;
 * @return {!proto.airchat.gateway.v2.SubscriptionAction}
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.getAction =
  function () {
    return /** @type {!proto.airchat.gateway.v2.SubscriptionAction} */ (
      jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

/**
 * @param {!proto.airchat.gateway.v2.SubscriptionAction} value
 * @return {!proto.airchat.gateway.event.v2.NotificationSubscription} returns this
 */
proto.airchat.gateway.event.v2.NotificationSubscription.prototype.setAction =
  function (value) {
    return jspb.Message.setProto3EnumField(this, 3, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.gateway.event.v2.NotificationEvent.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.gateway.event.v2.NotificationEvent.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.gateway.event.v2.NotificationEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.gateway.event.v2.NotificationEvent.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        streamId:
          (f = msg.getStreamId()) &&
          airchat_gateway_v2_gateway_pb.StreamIdentifier.toObject(
            includeInstance,
            f
          ),
        envelope:
          (f = msg.getEnvelope()) &&
          airchat_gateway_v2_notification_stream_pb.Envelope.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.gateway.event.v2.NotificationEvent}
 */
proto.airchat.gateway.event.v2.NotificationEvent.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.gateway.event.v2.NotificationEvent();
  return proto.airchat.gateway.event.v2.NotificationEvent.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.gateway.event.v2.NotificationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.gateway.event.v2.NotificationEvent}
 */
proto.airchat.gateway.event.v2.NotificationEvent.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_gateway_v2_gateway_pb.StreamIdentifier();
          reader.readMessage(
            value,
            airchat_gateway_v2_gateway_pb.StreamIdentifier
              .deserializeBinaryFromReader
          );
          msg.setStreamId(value);
          break;
        case 2:
          var value = new airchat_gateway_v2_notification_stream_pb.Envelope();
          reader.readMessage(
            value,
            airchat_gateway_v2_notification_stream_pb.Envelope
              .deserializeBinaryFromReader
          );
          msg.setEnvelope(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.gateway.event.v2.NotificationEvent.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.gateway.event.v2.NotificationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.gateway.event.v2.NotificationEvent.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getStreamId();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        airchat_gateway_v2_gateway_pb.StreamIdentifier.serializeBinaryToWriter
      );
    }
    f = message.getEnvelope();
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        airchat_gateway_v2_notification_stream_pb.Envelope
          .serializeBinaryToWriter
      );
    }
  };

/**
 * optional airchat.gateway.v2.StreamIdentifier stream_id = 1;
 * @return {?proto.airchat.gateway.v2.StreamIdentifier}
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.getStreamId =
  function () {
    return /** @type{?proto.airchat.gateway.v2.StreamIdentifier} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_gateway_v2_gateway_pb.StreamIdentifier,
        1
      )
    );
  };

/**
 * @param {?proto.airchat.gateway.v2.StreamIdentifier|undefined} value
 * @return {!proto.airchat.gateway.event.v2.NotificationEvent} returns this
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.setStreamId =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.event.v2.NotificationEvent} returns this
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.clearStreamId =
  function () {
    return this.setStreamId(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.hasStreamId =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

/**
 * optional airchat.gateway.v2.Envelope envelope = 2;
 * @return {?proto.airchat.gateway.v2.Envelope}
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.getEnvelope =
  function () {
    return /** @type{?proto.airchat.gateway.v2.Envelope} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_gateway_v2_notification_stream_pb.Envelope,
        2
      )
    );
  };

/**
 * @param {?proto.airchat.gateway.v2.Envelope|undefined} value
 * @return {!proto.airchat.gateway.event.v2.NotificationEvent} returns this
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.setEnvelope =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.gateway.event.v2.NotificationEvent} returns this
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.clearEnvelope =
  function () {
    return this.setEnvelope(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.gateway.event.v2.NotificationEvent.prototype.hasEnvelope =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

goog.object.extend(exports, proto.airchat.gateway.event.v2);
