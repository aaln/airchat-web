// source: airchat/channel/event/v2/channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_channel_v2_channel_pb = require('../../../../airchat/channel/v2/channel_pb.js');
goog.object.extend(proto, airchat_channel_v2_channel_pb);
goog.exportSymbol('proto.airchat.channel.event.v2.ChannelDeleted', null, global);
goog.exportSymbol('proto.airchat.channel.event.v2.ChannelParticipantUpdate', null, global);
goog.exportSymbol('proto.airchat.channel.event.v2.ChannelParticipantUpdateAction', null, global);
goog.exportSymbol('proto.airchat.channel.event.v2.UpdateChannelIndex', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.channel.event.v2.ChannelParticipantUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.channel.event.v2.ChannelParticipantUpdate.displayName = 'proto.airchat.channel.event.v2.ChannelParticipantUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.channel.event.v2.UpdateChannelIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.channel.event.v2.UpdateChannelIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.channel.event.v2.UpdateChannelIndex.displayName = 'proto.airchat.channel.event.v2.UpdateChannelIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.channel.event.v2.ChannelDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.channel.event.v2.ChannelDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.channel.event.v2.ChannelDeleted.displayName = 'proto.airchat.channel.event.v2.ChannelDeleted';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.channel.event.v2.ChannelParticipantUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    participantUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonParticipantAction: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdate}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.channel.event.v2.ChannelParticipantUpdate;
  return proto.airchat.channel.event.v2.ChannelParticipantUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdate}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.channel.event.v2.ChannelParticipantUpdateAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNonParticipantAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.channel.event.v2.ChannelParticipantUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParticipantUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNonParticipantAction();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} returns this
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string participant_user_id = 2;
 * @return {string}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.getParticipantUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} returns this
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.setParticipantUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChannelParticipantUpdateAction action = 3;
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdateAction}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.getAction = function() {
  return /** @type {!proto.airchat.channel.event.v2.ChannelParticipantUpdateAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.channel.event.v2.ChannelParticipantUpdateAction} value
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} returns this
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool non_participant_action = 4;
 * @return {boolean}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.getNonParticipantAction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.channel.event.v2.ChannelParticipantUpdate} returns this
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdate.prototype.setNonParticipantAction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.channel.event.v2.UpdateChannelIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.channel.event.v2.UpdateChannelIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && airchat_channel_v2_channel_pb.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.channel.event.v2.UpdateChannelIndex}
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.channel.event.v2.UpdateChannelIndex;
  return proto.airchat.channel.event.v2.UpdateChannelIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.channel.event.v2.UpdateChannelIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.channel.event.v2.UpdateChannelIndex}
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_channel_v2_channel_pb.Channel;
      reader.readMessage(value,airchat_channel_v2_channel_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.channel.event.v2.UpdateChannelIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.channel.event.v2.UpdateChannelIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_channel_v2_channel_pb.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.channel.v2.Channel channel = 1;
 * @return {?proto.airchat.channel.v2.Channel}
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.prototype.getChannel = function() {
  return /** @type{?proto.airchat.channel.v2.Channel} */ (
    jspb.Message.getWrapperField(this, airchat_channel_v2_channel_pb.Channel, 1));
};


/**
 * @param {?proto.airchat.channel.v2.Channel|undefined} value
 * @return {!proto.airchat.channel.event.v2.UpdateChannelIndex} returns this
*/
proto.airchat.channel.event.v2.UpdateChannelIndex.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.event.v2.UpdateChannelIndex} returns this
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.event.v2.UpdateChannelIndex.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.channel.event.v2.ChannelDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.channel.event.v2.ChannelDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.channel.event.v2.ChannelDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.event.v2.ChannelDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.channel.event.v2.ChannelDeleted}
 */
proto.airchat.channel.event.v2.ChannelDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.channel.event.v2.ChannelDeleted;
  return proto.airchat.channel.event.v2.ChannelDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.channel.event.v2.ChannelDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.channel.event.v2.ChannelDeleted}
 */
proto.airchat.channel.event.v2.ChannelDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.channel.event.v2.ChannelDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.channel.event.v2.ChannelDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.channel.event.v2.ChannelDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.event.v2.ChannelDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.airchat.channel.event.v2.ChannelDeleted.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.event.v2.ChannelDeleted} returns this
 */
proto.airchat.channel.event.v2.ChannelDeleted.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.airchat.channel.event.v2.ChannelParticipantUpdateAction = {
  CHANNEL_PARTICIPANT_UPDATE_ACTION_INVALID: 0,
  CHANNEL_PARTICIPANT_UPDATE_ACTION_ADDED: 1,
  CHANNEL_PARTICIPANT_UPDATE_ACTION_REMOVED: 2
};

goog.object.extend(exports, proto.airchat.channel.event.v2);
