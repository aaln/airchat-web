// source: airchat/channel/v2/channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var airchat_user_v2_user_pb = require('../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
goog.exportSymbol('proto.airchat.channel.v2.Channel', null, global);
goog.exportSymbol('proto.airchat.channel.v2.ChannelInviteCode', null, global);
goog.exportSymbol('proto.airchat.channel.v2.ChannelParticipantInvite', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.channel.v2.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.channel.v2.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.channel.v2.Channel.displayName = 'proto.airchat.channel.v2.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.channel.v2.ChannelInviteCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.channel.v2.ChannelInviteCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.channel.v2.ChannelInviteCode.displayName = 'proto.airchat.channel.v2.ChannelInviteCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.channel.v2.ChannelParticipantInvite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.channel.v2.ChannelParticipantInvite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.channel.v2.ChannelParticipantInvite.displayName = 'proto.airchat.channel.v2.ChannelParticipantInvite';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.channel.v2.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.channel.v2.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.channel.v2.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.v2.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    summary: jspb.Message.getFieldWithDefault(msg, 3, ""),
    owner: (f = msg.getOwner()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f),
    participantCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    handle: jspb.Message.getFieldWithDefault(msg, 6, ""),
    isParticipant: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    avatarPath: jspb.Message.getFieldWithDefault(msg, 8, ""),
    isOpen: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    isAllowedToJoin: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.channel.v2.Channel}
 */
proto.airchat.channel.v2.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.channel.v2.Channel;
  return proto.airchat.channel.v2.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.channel.v2.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.channel.v2.Channel}
 */
proto.airchat.channel.v2.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 4:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParticipantCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParticipant(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarPath(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOpen(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAllowedToJoin(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.channel.v2.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.channel.v2.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.channel.v2.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.v2.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getParticipantCount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHandle();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIsParticipant();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getAvatarPath();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIsOpen();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsAllowedToJoin();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.airchat.channel.v2.Channel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.airchat.channel.v2.Channel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string summary = 3;
 * @return {string}
 */
proto.airchat.channel.v2.Channel.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional airchat.user.v2.User owner = 4;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.channel.v2.Channel.prototype.getOwner = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 4));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
*/
proto.airchat.channel.v2.Channel.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.v2.Channel.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 participant_count = 5;
 * @return {number}
 */
proto.airchat.channel.v2.Channel.prototype.getParticipantCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setParticipantCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string handle = 6;
 * @return {string}
 */
proto.airchat.channel.v2.Channel.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool is_participant = 7;
 * @return {boolean}
 */
proto.airchat.channel.v2.Channel.prototype.getIsParticipant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setIsParticipant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string avatar_path = 8;
 * @return {string}
 */
proto.airchat.channel.v2.Channel.prototype.getAvatarPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setAvatarPath = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool is_open = 9;
 * @return {boolean}
 */
proto.airchat.channel.v2.Channel.prototype.getIsOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setIsOpen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool is_allowed_to_join = 10;
 * @return {boolean}
 */
proto.airchat.channel.v2.Channel.prototype.getIsAllowedToJoin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.setIsAllowedToJoin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional google.protobuf.Timestamp created_date = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.channel.v2.Channel.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.channel.v2.Channel} returns this
*/
proto.airchat.channel.v2.Channel.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.v2.Channel} returns this
 */
proto.airchat.channel.v2.Channel.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.v2.Channel.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.channel.v2.ChannelInviteCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.channel.v2.ChannelInviteCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.v2.ChannelInviteCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.channel.v2.ChannelInviteCode}
 */
proto.airchat.channel.v2.ChannelInviteCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.channel.v2.ChannelInviteCode;
  return proto.airchat.channel.v2.ChannelInviteCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.channel.v2.ChannelInviteCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.channel.v2.ChannelInviteCode}
 */
proto.airchat.channel.v2.ChannelInviteCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteCode(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.channel.v2.ChannelInviteCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.channel.v2.ChannelInviteCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.v2.ChannelInviteCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.ChannelInviteCode} returns this
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string invite_code = 2;
 * @return {string}
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.getInviteCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.ChannelInviteCode} returns this
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.setInviteCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp created_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.channel.v2.ChannelInviteCode} returns this
*/
proto.airchat.channel.v2.ChannelInviteCode.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.v2.ChannelInviteCode} returns this
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.v2.ChannelInviteCode.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.channel.v2.ChannelParticipantInvite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.channel.v2.ChannelParticipantInvite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.v2.ChannelParticipantInvite.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    participant: (f = msg.getParticipant()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f),
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastUpdatedDate: (f = msg.getLastUpdatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.channel.v2.ChannelParticipantInvite;
  return proto.airchat.channel.v2.ChannelParticipantInvite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.channel.v2.ChannelParticipantInvite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 5:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setParticipant(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.channel.v2.ChannelParticipantInvite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.channel.v2.ChannelParticipantInvite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.channel.v2.ChannelParticipantInvite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParticipant();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional airchat.user.v2.User participant = 5;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.getParticipant = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 5));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
*/
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.setParticipant = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.clearParticipant = function() {
  return this.setParticipant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.hasParticipant = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp created_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
*/
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.getLastUpdatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
*/
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.setLastUpdatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.channel.v2.ChannelParticipantInvite} returns this
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.clearLastUpdatedDate = function() {
  return this.setLastUpdatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.channel.v2.ChannelParticipantInvite.prototype.hasLastUpdatedDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.airchat.channel.v2);
