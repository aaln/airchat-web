// source: airchat/message/event/v2/message_internal_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

var airchat_message_v2_message_pb = require('../../../../airchat/message/v2/message_pb.js');
goog.object.extend(proto, airchat_message_v2_message_pb);
goog.exportSymbol(
  'proto.airchat.message.event.v2.GetHydratedMessagesRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.message.event.v2.GetHydratedMessagesResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.message.event.v2.GetHydratedMessagesRequest.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.message.event.v2.GetHydratedMessagesRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.GetHydratedMessagesRequest.displayName =
    'proto.airchat.message.event.v2.GetHydratedMessagesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.message.event.v2.GetHydratedMessagesResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.message.event.v2.GetHydratedMessagesResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.GetHydratedMessagesResponse.displayName =
    'proto.airchat.message.event.v2.GetHydratedMessagesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest = function (
  opt_data
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.displayName =
    'proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse
      .repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.displayName =
    'proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest
      .repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.displayName =
    'proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse
      .repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.displayName =
    'proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.message.event.v2.GetHydratedMessagesRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.message.event.v2.GetHydratedMessagesRequest.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          recordingIdList:
            (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
          userId: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesRequest}
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.message.event.v2.GetHydratedMessagesRequest();
    return proto.airchat.message.event.v2.GetHydratedMessagesRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesRequest}
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.addRecordingId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.message.event.v2.GetHydratedMessagesRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getRecordingIdList();
    if (f.length > 0) {
      writer.writeRepeatedString(1, f);
    }
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * repeated string recording_id = 1;
 * @return {!Array<string>}
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.getRecordingIdList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.setRecordingIdList =
  function (value) {
    return jspb.Message.setField(this, 1, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.addRecordingId =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.clearRecordingIdList =
  function () {
    return this.setRecordingIdList([]);
  };

/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedMessagesRequest.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.repeatedFields_ = [
  1
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.message.event.v2.GetHydratedMessagesResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.message.event.v2.GetHydratedMessagesResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.message.event.v2.GetHydratedMessagesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.message.event.v2.GetHydratedMessagesResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          messageList: jspb.Message.toObjectList(
            msg.getMessageList(),
            airchat_message_v2_message_pb.Message.toObject,
            includeInstance
          )
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesResponse}
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.message.event.v2.GetHydratedMessagesResponse();
    return proto.airchat.message.event.v2.GetHydratedMessagesResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.GetHydratedMessagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesResponse}
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_message_v2_message_pb.Message();
          reader.readMessage(
            value,
            airchat_message_v2_message_pb.Message.deserializeBinaryFromReader
          );
          msg.addMessage(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.message.event.v2.GetHydratedMessagesResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.GetHydratedMessagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getMessageList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        airchat_message_v2_message_pb.Message.serializeBinaryToWriter
      );
    }
  };

/**
 * repeated airchat.message.v2.Message message = 1;
 * @return {!Array<!proto.airchat.message.v2.Message>}
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.prototype.getMessageList =
  function () {
    return /** @type{!Array<!proto.airchat.message.v2.Message>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_message_v2_message_pb.Message,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.message.v2.Message>} value
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesResponse} returns this
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.prototype.setMessageList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.airchat.message.v2.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.prototype.addMessage =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.airchat.message.v2.Message,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.event.v2.GetHydratedMessagesResponse} returns this
 */
proto.airchat.message.event.v2.GetHydratedMessagesResponse.prototype.clearMessageList =
  function () {
    return this.setMessageList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          pageKey: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest();
    return proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setPageKey(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getPageKey();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest} returns this
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string page_key = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.prototype.getPageKey =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest} returns this
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreRequest.prototype.setPageKey =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.repeatedFields_ =
  [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          userIdList:
            (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
          nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse();
    return proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.addUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setNextPageKey(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserIdList();
    if (f.length > 0) {
      writer.writeRepeatedString(1, f);
    }
    f = message.getNextPageKey();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * repeated string user_id = 1;
 * @return {!Array<string>}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.getUserIdList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} returns this
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.setUserIdList =
  function (value) {
    return jspb.Message.setField(this, 1, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} returns this
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.addUserId =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} returns this
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.clearUserIdList =
  function () {
    return this.setUserIdList([]);
  };

/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.getNextPageKey =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse} returns this
 */
proto.airchat.message.event.v2.GetUserIdsByInteractionScoreResponse.prototype.setNextPageKey =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.repeatedFields_ =
  [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          recordingIdList:
            (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest();
    return proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.addRecordingId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getRecordingIdList();
    if (f.length > 0) {
      writer.writeRepeatedString(2, f);
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * repeated string recording_id = 2;
 * @return {!Array<string>}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.getRecordingIdList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 2)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.setRecordingIdList =
  function (value) {
    return jspb.Message.setField(this, 2, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.addRecordingId =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest} returns this
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesRequest.prototype.clearRecordingIdList =
  function () {
    return this.setRecordingIdList([]);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.repeatedFields_ =
  [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          messageList: jspb.Message.toObjectList(
            msg.getMessageList(),
            airchat_message_v2_message_pb.Message.toObject,
            includeInstance
          )
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse();
    return proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_message_v2_message_pb.Message();
          reader.readMessage(
            value,
            airchat_message_v2_message_pb.Message.deserializeBinaryFromReader
          );
          msg.addMessage(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getMessageList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        airchat_message_v2_message_pb.Message.serializeBinaryToWriter
      );
    }
  };

/**
 * repeated airchat.message.v2.Message message = 1;
 * @return {!Array<!proto.airchat.message.v2.Message>}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.prototype.getMessageList =
  function () {
    return /** @type{!Array<!proto.airchat.message.v2.Message>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_message_v2_message_pb.Message,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.message.v2.Message>} value
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse} returns this
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.prototype.setMessageList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.airchat.message.v2.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.prototype.addMessage =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.airchat.message.v2.Message,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse} returns this
 */
proto.airchat.message.event.v2.GetHydratedPrivateMessagesResponse.prototype.clearMessageList =
  function () {
    return this.setMessageList([]);
  };

goog.object.extend(exports, proto.airchat.message.event.v2);
