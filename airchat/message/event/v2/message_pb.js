// source: airchat/message/event/v2/message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_message_v2_message_pb = require('../../../../airchat/message/v2/message_pb.js');
goog.object.extend(proto, airchat_message_v2_message_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.airchat.message.event.v2.DeleteImageReference', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.DeleteMessage', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.HighlightContextType', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.HighlightItemAction', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.HighlightItemUpdate', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessageDeleted', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessagePublished', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessagePublishedForFollower', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessagePublishedForPriorityFollower', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessageRepostAction', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessageRepostUpdate', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessageThreadFeedUpdate', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessageThreadUpdateAction', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.MessageTranscriptionCompleted', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.PrivateMessagePublished', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.RefreshMessageTranscription', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.TranscriptionUpdated', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.UpdateMessageIndex', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.UpdateMessageThreadCount', null, global);
goog.exportSymbol('proto.airchat.message.event.v2.UpdateMessageThreadStats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessagePublished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.MessagePublished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessagePublished.displayName = 'proto.airchat.message.event.v2.MessagePublished';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessagePublishedForFollower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.MessagePublishedForFollower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessagePublishedForFollower.displayName = 'proto.airchat.message.event.v2.MessagePublishedForFollower';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.MessagePublishedForPriorityFollower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.displayName = 'proto.airchat.message.event.v2.MessagePublishedForPriorityFollower';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.event.v2.MessageTranscriptionCompleted.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.event.v2.MessageTranscriptionCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessageTranscriptionCompleted.displayName = 'proto.airchat.message.event.v2.MessageTranscriptionCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessageRepostUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.MessageRepostUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessageRepostUpdate.displayName = 'proto.airchat.message.event.v2.MessageRepostUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.UpdateMessageThreadStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.UpdateMessageThreadStats.displayName = 'proto.airchat.message.event.v2.UpdateMessageThreadStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.UpdateMessageThreadCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.UpdateMessageThreadCount.displayName = 'proto.airchat.message.event.v2.UpdateMessageThreadCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessageDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.MessageDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessageDeleted.displayName = 'proto.airchat.message.event.v2.MessageDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.TranscriptionUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.TranscriptionUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.TranscriptionUpdated.displayName = 'proto.airchat.message.event.v2.TranscriptionUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.RefreshMessageTranscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.RefreshMessageTranscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.RefreshMessageTranscription.displayName = 'proto.airchat.message.event.v2.RefreshMessageTranscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.DeleteMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.DeleteMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.DeleteMessage.displayName = 'proto.airchat.message.event.v2.DeleteMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.UpdateMessageIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.UpdateMessageIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.UpdateMessageIndex.displayName = 'proto.airchat.message.event.v2.UpdateMessageIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.PrivateMessagePublished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.PrivateMessagePublished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.PrivateMessagePublished.displayName = 'proto.airchat.message.event.v2.PrivateMessagePublished';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.DeleteImageReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.DeleteImageReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.DeleteImageReference.displayName = 'proto.airchat.message.event.v2.DeleteImageReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.HighlightItemUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.HighlightItemUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.HighlightItemUpdate.displayName = 'proto.airchat.message.event.v2.HighlightItemUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.event.v2.MessageThreadFeedUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.event.v2.MessageThreadFeedUpdate.displayName = 'proto.airchat.message.event.v2.MessageThreadFeedUpdate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessagePublished.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessagePublished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessagePublished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessagePublished.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f),
    isThreadHighlighted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessagePublished}
 */
proto.airchat.message.event.v2.MessagePublished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessagePublished;
  return proto.airchat.message.event.v2.MessagePublished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessagePublished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessagePublished}
 */
proto.airchat.message.event.v2.MessagePublished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsThreadHighlighted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessagePublished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessagePublished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessagePublished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessagePublished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getIsThreadHighlighted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.MessagePublished.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.MessagePublished} returns this
*/
proto.airchat.message.event.v2.MessagePublished.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessagePublished} returns this
 */
proto.airchat.message.event.v2.MessagePublished.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublished.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_thread_highlighted = 2;
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublished.prototype.getIsThreadHighlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.MessagePublished} returns this
 */
proto.airchat.message.event.v2.MessagePublished.prototype.setIsThreadHighlighted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessagePublishedForFollower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessagePublishedForFollower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f),
    followerUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isThreadHighlighted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    isFromFollow: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessagePublishedForFollower;
  return proto.airchat.message.event.v2.MessagePublishedForFollower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessagePublishedForFollower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowerUserId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsThreadHighlighted(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFromFollow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessagePublishedForFollower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessagePublishedForFollower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getFollowerUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsThreadHighlighted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsFromFollow();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower} returns this
*/
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string follower_user_id = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.getFollowerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.setFollowerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_thread_highlighted = 3;
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.getIsThreadHighlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.setIsThreadHighlighted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_from_follow = 4;
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.getIsFromFollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForFollower.prototype.setIsFromFollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f),
    followerUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isThreadHighlighted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessagePublishedForPriorityFollower;
  return proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowerUserId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsThreadHighlighted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getFollowerUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsThreadHighlighted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} returns this
*/
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string follower_user_id = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.getFollowerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.setFollowerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_thread_highlighted = 3;
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.getIsThreadHighlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.MessagePublishedForPriorityFollower} returns this
 */
proto.airchat.message.event.v2.MessagePublishedForPriorityFollower.prototype.setIsThreadHighlighted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessageTranscriptionCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f),
    transcriptionString: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transcriptionClient: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transcriptionModel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    transcriptionLanguage: jspb.Message.getFieldWithDefault(msg, 5, ""),
    transcriptionSegmentsList: jspb.Message.toObjectList(msg.getTranscriptionSegmentsList(),
    airchat_message_v2_message_pb.TranscriptionSegment.toObject, includeInstance),
    transcriptionStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    noSpeechProbability: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessageTranscriptionCompleted;
  return proto.airchat.message.event.v2.MessageTranscriptionCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscriptionString(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.message.v2.TranscriptionClient} */ (reader.readEnum());
      msg.setTranscriptionClient(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscriptionModel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscriptionLanguage(value);
      break;
    case 6:
      var value = new airchat_message_v2_message_pb.TranscriptionSegment;
      reader.readMessage(value,airchat_message_v2_message_pb.TranscriptionSegment.deserializeBinaryFromReader);
      msg.addTranscriptionSegments(value);
      break;
    case 7:
      var value = /** @type {!proto.airchat.message.v2.TranscriptionStatus} */ (reader.readEnum());
      msg.setTranscriptionStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNoSpeechProbability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessageTranscriptionCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getTranscriptionString();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTranscriptionClient();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTranscriptionModel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTranscriptionLanguage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTranscriptionSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      airchat_message_v2_message_pb.TranscriptionSegment.serializeBinaryToWriter
    );
  }
  f = message.getTranscriptionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getNoSpeechProbability();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
*/
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string transcription_string = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getTranscriptionString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setTranscriptionString = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional airchat.message.v2.TranscriptionClient transcription_client = 3;
 * @return {!proto.airchat.message.v2.TranscriptionClient}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getTranscriptionClient = function() {
  return /** @type {!proto.airchat.message.v2.TranscriptionClient} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.message.v2.TranscriptionClient} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setTranscriptionClient = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string transcription_model = 4;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getTranscriptionModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setTranscriptionModel = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string transcription_language = 5;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getTranscriptionLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setTranscriptionLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated airchat.message.v2.TranscriptionSegment transcription_segments = 6;
 * @return {!Array<!proto.airchat.message.v2.TranscriptionSegment>}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getTranscriptionSegmentsList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.TranscriptionSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_message_v2_message_pb.TranscriptionSegment, 6));
};


/**
 * @param {!Array<!proto.airchat.message.v2.TranscriptionSegment>} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
*/
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setTranscriptionSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.airchat.message.v2.TranscriptionSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.TranscriptionSegment}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.addTranscriptionSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.airchat.message.v2.TranscriptionSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.clearTranscriptionSegmentsList = function() {
  return this.setTranscriptionSegmentsList([]);
};


/**
 * optional airchat.message.v2.TranscriptionStatus transcription_status = 7;
 * @return {!proto.airchat.message.v2.TranscriptionStatus}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getTranscriptionStatus = function() {
  return /** @type {!proto.airchat.message.v2.TranscriptionStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.airchat.message.v2.TranscriptionStatus} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setTranscriptionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional double no_speech_probability = 8;
 * @return {number}
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.getNoSpeechProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.event.v2.MessageTranscriptionCompleted} returns this
 */
proto.airchat.message.event.v2.MessageTranscriptionCompleted.prototype.setNoSpeechProbability = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessageRepostUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessageRepostUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageRepostUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actionUserId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    followerUserId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventTime: (f = msg.getEventTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessageRepostUpdate;
  return proto.airchat.message.event.v2.MessageRepostUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessageRepostUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.message.event.v2.MessageRepostAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUserId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowerUserId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEventTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessageRepostUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessageRepostUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageRepostUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getActionUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFollowerUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate} returns this
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MessageRepostAction action = 2;
 * @return {!proto.airchat.message.event.v2.MessageRepostAction}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.getAction = function() {
  return /** @type {!proto.airchat.message.event.v2.MessageRepostAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.message.event.v2.MessageRepostAction} value
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate} returns this
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string action_user_id = 3;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.getActionUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate} returns this
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.setActionUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string follower_user_id = 4;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.getFollowerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate} returns this
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.setFollowerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp event_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.getEventTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate} returns this
*/
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.setEventTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessageRepostUpdate} returns this
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.clearEventTime = function() {
  return this.setEventTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessageRepostUpdate.prototype.hasEventTime = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.UpdateMessageThreadStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.UpdateMessageThreadStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actionUserId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.UpdateMessageThreadStats;
  return proto.airchat.message.event.v2.UpdateMessageThreadStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.UpdateMessageThreadStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.message.event.v2.MessageThreadUpdateAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUserId(value);
      break;
    case 4:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.UpdateMessageThreadStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.UpdateMessageThreadStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getActionUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional string message_thread_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats} returns this
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MessageThreadUpdateAction action = 2;
 * @return {!proto.airchat.message.event.v2.MessageThreadUpdateAction}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.getAction = function() {
  return /** @type {!proto.airchat.message.event.v2.MessageThreadUpdateAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.message.event.v2.MessageThreadUpdateAction} value
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats} returns this
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string action_user_id = 3;
 * @return {string}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.getActionUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats} returns this
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.setActionUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional airchat.message.v2.Message message = 4;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 4));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats} returns this
*/
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadStats} returns this
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.UpdateMessageThreadStats.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.UpdateMessageThreadCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.UpdateMessageThreadCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadCount}
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.UpdateMessageThreadCount;
  return proto.airchat.message.event.v2.UpdateMessageThreadCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.UpdateMessageThreadCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadCount}
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.UpdateMessageThreadCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.UpdateMessageThreadCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.UpdateMessageThreadCount} returns this
 */
proto.airchat.message.event.v2.UpdateMessageThreadCount.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessageDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessageDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessageDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessageDeleted}
 */
proto.airchat.message.event.v2.MessageDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessageDeleted;
  return proto.airchat.message.event.v2.MessageDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessageDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessageDeleted}
 */
proto.airchat.message.event.v2.MessageDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessageDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessageDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessageDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.MessageDeleted.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.MessageDeleted} returns this
*/
proto.airchat.message.event.v2.MessageDeleted.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessageDeleted} returns this
 */
proto.airchat.message.event.v2.MessageDeleted.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessageDeleted.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.TranscriptionUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.TranscriptionUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.TranscriptionUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.TranscriptionUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isMessagePrivate: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.TranscriptionUpdated}
 */
proto.airchat.message.event.v2.TranscriptionUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.TranscriptionUpdated;
  return proto.airchat.message.event.v2.TranscriptionUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.TranscriptionUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.TranscriptionUpdated}
 */
proto.airchat.message.event.v2.TranscriptionUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMessagePrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.TranscriptionUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.TranscriptionUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.TranscriptionUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.TranscriptionUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsMessagePrivate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.TranscriptionUpdated.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.TranscriptionUpdated} returns this
 */
proto.airchat.message.event.v2.TranscriptionUpdated.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_message_private = 2;
 * @return {boolean}
 */
proto.airchat.message.event.v2.TranscriptionUpdated.prototype.getIsMessagePrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.TranscriptionUpdated} returns this
 */
proto.airchat.message.event.v2.TranscriptionUpdated.prototype.setIsMessagePrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.RefreshMessageTranscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.RefreshMessageTranscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f),
    client: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.RefreshMessageTranscription}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.RefreshMessageTranscription;
  return proto.airchat.message.event.v2.RefreshMessageTranscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.RefreshMessageTranscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.RefreshMessageTranscription}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.message.v2.TranscriptionClient} */ (reader.readEnum());
      msg.setClient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.RefreshMessageTranscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.RefreshMessageTranscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getClient();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.RefreshMessageTranscription} returns this
*/
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.RefreshMessageTranscription} returns this
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional airchat.message.v2.TranscriptionClient client = 2;
 * @return {!proto.airchat.message.v2.TranscriptionClient}
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.getClient = function() {
  return /** @type {!proto.airchat.message.v2.TranscriptionClient} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.message.v2.TranscriptionClient} value
 * @return {!proto.airchat.message.event.v2.RefreshMessageTranscription} returns this
 */
proto.airchat.message.event.v2.RefreshMessageTranscription.prototype.setClient = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.DeleteMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.DeleteMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.DeleteMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.DeleteMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isMessagePrivate: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.DeleteMessage}
 */
proto.airchat.message.event.v2.DeleteMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.DeleteMessage;
  return proto.airchat.message.event.v2.DeleteMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.DeleteMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.DeleteMessage}
 */
proto.airchat.message.event.v2.DeleteMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMessagePrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.DeleteMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.DeleteMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.DeleteMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.DeleteMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsMessagePrivate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.DeleteMessage.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.DeleteMessage} returns this
 */
proto.airchat.message.event.v2.DeleteMessage.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_message_private = 2;
 * @return {boolean}
 */
proto.airchat.message.event.v2.DeleteMessage.prototype.getIsMessagePrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.DeleteMessage} returns this
 */
proto.airchat.message.event.v2.DeleteMessage.prototype.setIsMessagePrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.UpdateMessageIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.UpdateMessageIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.UpdateMessageIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.UpdateMessageIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.UpdateMessageIndex}
 */
proto.airchat.message.event.v2.UpdateMessageIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.UpdateMessageIndex;
  return proto.airchat.message.event.v2.UpdateMessageIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.UpdateMessageIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.UpdateMessageIndex}
 */
proto.airchat.message.event.v2.UpdateMessageIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.UpdateMessageIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.UpdateMessageIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.UpdateMessageIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.UpdateMessageIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.UpdateMessageIndex.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.UpdateMessageIndex} returns this
*/
proto.airchat.message.event.v2.UpdateMessageIndex.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.UpdateMessageIndex} returns this
 */
proto.airchat.message.event.v2.UpdateMessageIndex.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.UpdateMessageIndex.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.PrivateMessagePublished.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.PrivateMessagePublished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.PrivateMessagePublished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.PrivateMessagePublished.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.PrivateMessagePublished}
 */
proto.airchat.message.event.v2.PrivateMessagePublished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.PrivateMessagePublished;
  return proto.airchat.message.event.v2.PrivateMessagePublished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.PrivateMessagePublished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.PrivateMessagePublished}
 */
proto.airchat.message.event.v2.PrivateMessagePublished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.PrivateMessagePublished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.PrivateMessagePublished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.PrivateMessagePublished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.PrivateMessagePublished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.event.v2.PrivateMessagePublished.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.event.v2.PrivateMessagePublished} returns this
*/
proto.airchat.message.event.v2.PrivateMessagePublished.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.PrivateMessagePublished} returns this
 */
proto.airchat.message.event.v2.PrivateMessagePublished.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.PrivateMessagePublished.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.DeleteImageReference.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.DeleteImageReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.DeleteImageReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.DeleteImageReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageReferenceId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.DeleteImageReference}
 */
proto.airchat.message.event.v2.DeleteImageReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.DeleteImageReference;
  return proto.airchat.message.event.v2.DeleteImageReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.DeleteImageReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.DeleteImageReference}
 */
proto.airchat.message.event.v2.DeleteImageReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageReferenceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.DeleteImageReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.DeleteImageReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.DeleteImageReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.DeleteImageReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageReferenceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string image_reference_id = 1;
 * @return {string}
 */
proto.airchat.message.event.v2.DeleteImageReference.prototype.getImageReferenceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.DeleteImageReference} returns this
 */
proto.airchat.message.event.v2.DeleteImageReference.prototype.setImageReferenceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.HighlightItemUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.HighlightItemUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.HighlightItemUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contextId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contextType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    actionUserId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastUpdatedTime: (f = msg.getLastUpdatedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    followerUserId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.HighlightItemUpdate;
  return proto.airchat.message.event.v2.HighlightItemUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.HighlightItemUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.airchat.message.event.v2.HighlightItemAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextId(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.message.event.v2.HighlightContextType} */ (reader.readEnum());
      msg.setContextType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUserId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowerUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.HighlightItemUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.HighlightItemUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.HighlightItemUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContextId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContextType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getActionUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastUpdatedTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFollowerUserId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional HighlightItemAction action = 1;
 * @return {!proto.airchat.message.event.v2.HighlightItemAction}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.getAction = function() {
  return /** @type {!proto.airchat.message.event.v2.HighlightItemAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.airchat.message.event.v2.HighlightItemAction} value
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string context_id = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.getContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.setContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional HighlightContextType context_type = 3;
 * @return {!proto.airchat.message.event.v2.HighlightContextType}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.getContextType = function() {
  return /** @type {!proto.airchat.message.event.v2.HighlightContextType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.message.event.v2.HighlightContextType} value
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.setContextType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string action_user_id = 4;
 * @return {string}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.getActionUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.setActionUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp last_updated_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.getLastUpdatedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
*/
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.setLastUpdatedTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.clearLastUpdatedTime = function() {
  return this.setLastUpdatedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.hasLastUpdatedTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string follower_user_id = 6;
 * @return {string}
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.getFollowerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.HighlightItemUpdate} returns this
 */
proto.airchat.message.event.v2.HighlightItemUpdate.prototype.setFollowerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.event.v2.MessageThreadFeedUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referenceRecordingId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionUserId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastMessageTime: (f = msg.getLastMessageTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    isThreadHighlighted: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    followerUserId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isFromFollow: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.event.v2.MessageThreadFeedUpdate;
  return proto.airchat.message.event.v2.MessageThreadFeedUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.airchat.message.event.v2.MessageThreadUpdateAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceRecordingId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUserId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastMessageTime(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsThreadHighlighted(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowerUserId(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFromFollow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.event.v2.MessageThreadFeedUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferenceRecordingId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastMessageTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getIsThreadHighlighted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getFollowerUserId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsFromFollow();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional MessageThreadUpdateAction action = 1;
 * @return {!proto.airchat.message.event.v2.MessageThreadUpdateAction}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getAction = function() {
  return /** @type {!proto.airchat.message.event.v2.MessageThreadUpdateAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.airchat.message.event.v2.MessageThreadUpdateAction} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message_thread_id = 2;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reference_recording_id = 3;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getReferenceRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setReferenceRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string action_user_id = 4;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getActionUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setActionUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp last_message_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getLastMessageTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
*/
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setLastMessageTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.clearLastMessageTime = function() {
  return this.setLastMessageTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.hasLastMessageTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_thread_highlighted = 6;
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getIsThreadHighlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setIsThreadHighlighted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string follower_user_id = 7;
 * @return {string}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getFollowerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setFollowerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_from_follow = 8;
 * @return {boolean}
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.getIsFromFollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.event.v2.MessageThreadFeedUpdate} returns this
 */
proto.airchat.message.event.v2.MessageThreadFeedUpdate.prototype.setIsFromFollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * @enum {number}
 */
proto.airchat.message.event.v2.MessageRepostAction = {
  MESSAGE_REPOST_ACTION_INVALID: 0,
  MESSAGE_REPOST_ACTION_ADDED: 1,
  MESSAGE_REPOST_ACTION_DELETED: 2
};

/**
 * @enum {number}
 */
proto.airchat.message.event.v2.HighlightContextType = {
  HIGHLIGHT_CONTEXT_TYPE_INVALID: 0,
  HIGHLIGHT_CONTEXT_TYPE_POST: 1,
  HIGHLIGHT_CONTEXT_TYPE_THREAD: 2
};

/**
 * @enum {number}
 */
proto.airchat.message.event.v2.HighlightItemAction = {
  HIGHLIGHT_ITEM_ACTION_INVALID: 0,
  HIGHLIGHT_ITEM_ACTION_ADDED: 1,
  HIGHLIGHT_ITEM_ACTION_DELETED: 2
};

/**
 * @enum {number}
 */
proto.airchat.message.event.v2.MessageThreadUpdateAction = {
  MESSAGE_THREAD_UPDATE_ACTION_INVALID: 0,
  MESSAGE_THREAD_UPDATE_ACTION_NONE: 1,
  MESSAGE_THREAD_UPDATE_ACTION_POST_CREATED: 2,
  MESSAGE_THREAD_UPDATE_ACTION_POST_DELETED: 3
};

goog.object.extend(exports, proto.airchat.message.event.v2);
