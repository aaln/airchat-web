// source: airchat/message/v2/message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_user_v2_user_pb = require('../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
var airchat_channel_v2_channel_pb = require('../../../airchat/channel/v2/channel_pb.js');
goog.object.extend(proto, airchat_channel_v2_channel_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.airchat.message.v2.ImageReference', null, global);
goog.exportSymbol('proto.airchat.message.v2.LinkMetadata', null, global);
goog.exportSymbol('proto.airchat.message.v2.LinkMetadataUpload', null, global);
goog.exportSymbol('proto.airchat.message.v2.MentionCandidate', null, global);
goog.exportSymbol('proto.airchat.message.v2.MentionCandidateMatchStrength', null, global);
goog.exportSymbol('proto.airchat.message.v2.Message', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageAnalytics', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageEventItem', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageEventType', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageFeedItem', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageFeedItemAttribution', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageFeedItemAttributionType', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageFeedItemType', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageMediaType', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageThread', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageThreadDeletedIndex', null, global);
goog.exportSymbol('proto.airchat.message.v2.MessageThreadDetails', null, global);
goog.exportSymbol('proto.airchat.message.v2.Playlist', null, global);
goog.exportSymbol('proto.airchat.message.v2.PlaylistHeader', null, global);
goog.exportSymbol('proto.airchat.message.v2.PrivateRoom', null, global);
goog.exportSymbol('proto.airchat.message.v2.PrivateRoomDeletedIndex', null, global);
goog.exportSymbol('proto.airchat.message.v2.Resolution', null, global);
goog.exportSymbol('proto.airchat.message.v2.Segment', null, global);
goog.exportSymbol('proto.airchat.message.v2.Segments', null, global);
goog.exportSymbol('proto.airchat.message.v2.Transcription', null, global);
goog.exportSymbol('proto.airchat.message.v2.TranscriptionClient', null, global);
goog.exportSymbol('proto.airchat.message.v2.TranscriptionSegment', null, global);
goog.exportSymbol('proto.airchat.message.v2.TranscriptionStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.v2.Message.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.v2.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.Message.displayName = 'proto.airchat.message.v2.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.Playlist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.Playlist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.Playlist.displayName = 'proto.airchat.message.v2.Playlist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.Resolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.Resolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.Resolution.displayName = 'proto.airchat.message.v2.Resolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.PlaylistHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.PlaylistHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.PlaylistHeader.displayName = 'proto.airchat.message.v2.PlaylistHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.Segment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.Segment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.Segment.displayName = 'proto.airchat.message.v2.Segment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.Segments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.v2.Segments.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.v2.Segments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.Segments.displayName = 'proto.airchat.message.v2.Segments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.v2.MessageThread.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.v2.MessageThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageThread.displayName = 'proto.airchat.message.v2.MessageThread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageThreadDeletedIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.MessageThreadDeletedIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageThreadDeletedIndex.displayName = 'proto.airchat.message.v2.MessageThreadDeletedIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.Transcription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.v2.Transcription.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.v2.Transcription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.Transcription.displayName = 'proto.airchat.message.v2.Transcription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.TranscriptionSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.TranscriptionSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.TranscriptionSegment.displayName = 'proto.airchat.message.v2.TranscriptionSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageFeedItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.v2.MessageFeedItem.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.v2.MessageFeedItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageFeedItem.displayName = 'proto.airchat.message.v2.MessageFeedItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageAnalytics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.MessageAnalytics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageAnalytics.displayName = 'proto.airchat.message.v2.MessageAnalytics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageEventItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.MessageEventItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageEventItem.displayName = 'proto.airchat.message.v2.MessageEventItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageThreadDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.MessageThreadDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageThreadDetails.displayName = 'proto.airchat.message.v2.MessageThreadDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.PrivateRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.message.v2.PrivateRoom.repeatedFields_, null);
};
goog.inherits(proto.airchat.message.v2.PrivateRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.PrivateRoom.displayName = 'proto.airchat.message.v2.PrivateRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.PrivateRoomDeletedIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.PrivateRoomDeletedIndex.displayName = 'proto.airchat.message.v2.PrivateRoomDeletedIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.LinkMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.LinkMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.LinkMetadata.displayName = 'proto.airchat.message.v2.LinkMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.LinkMetadataUpload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.LinkMetadataUpload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.LinkMetadataUpload.displayName = 'proto.airchat.message.v2.LinkMetadataUpload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MessageFeedItemAttribution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.MessageFeedItemAttribution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MessageFeedItemAttribution.displayName = 'proto.airchat.message.v2.MessageFeedItemAttribution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.ImageReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.ImageReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.ImageReference.displayName = 'proto.airchat.message.v2.ImageReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.message.v2.MentionCandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.message.v2.MentionCandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.message.v2.MentionCandidate.displayName = 'proto.airchat.message.v2.MentionCandidate';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.v2.Message.repeatedFields_ = [13,16,17,21,22,26,27];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromUserId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mediaType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    index: jspb.Message.getFieldWithDefault(msg, 5, 0),
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    messageUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    hlsUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    transcription: (f = msg.getTranscription()) && proto.airchat.message.v2.Transcription.toObject(includeInstance, f),
    fromUser: (f = msg.getFromUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f),
    eventsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    messageAnalytics: (f = msg.getMessageAnalytics()) && proto.airchat.message.v2.MessageAnalytics.toObject(includeInstance, f),
    continuedMessageThreadId: jspb.Message.getFieldWithDefault(msg, 15, ""),
    mentionedUserIdsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    mentionedUsersList: jspb.Message.toObjectList(msg.getMentionedUsersList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    referenceMessageThreadId: jspb.Message.getFieldWithDefault(msg, 18, ""),
    isReferenceMessageThreadCreated: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    privateRoomId: jspb.Message.getFieldWithDefault(msg, 20, ""),
    imageReferenceIdsList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    linkMetadataList: jspb.Message.toObjectList(msg.getLinkMetadataList(),
    proto.airchat.message.v2.LinkMetadata.toObject, includeInstance),
    previousThreadRecordingId: jspb.Message.getFieldWithDefault(msg, 23, ""),
    participantOnlyVisibility: jspb.Message.getBooleanFieldWithDefault(msg, 24, false),
    userRestriction: (f = msg.getUserRestriction()) && airchat_user_v2_user_pb.UserRestriction.toObject(includeInstance, f),
    imageReferencesList: jspb.Message.toObjectList(msg.getImageReferencesList(),
    proto.airchat.message.v2.ImageReference.toObject, includeInstance),
    repostUserList: jspb.Message.toObjectList(msg.getRepostUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    thumbnailImagePath: jspb.Message.getFieldWithDefault(msg, 28, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 29, ""),
    isBookmarked: jspb.Message.getBooleanFieldWithDefault(msg, 30, false),
    isHighlighted: jspb.Message.getBooleanFieldWithDefault(msg, 31, false),
    hiddenInChannel: jspb.Message.getBooleanFieldWithDefault(msg, 32, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.Message;
  return proto.airchat.message.v2.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUserId(value);
      break;
    case 4:
      var value = /** @type {!proto.airchat.message.v2.MessageMediaType} */ (reader.readEnum());
      msg.setMediaType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHlsUrl(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 10:
      var value = new proto.airchat.message.v2.Transcription;
      reader.readMessage(value,proto.airchat.message.v2.Transcription.deserializeBinaryFromReader);
      msg.setTranscription(value);
      break;
    case 11:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setFromUser(value);
      break;
    case 13:
      var values = /** @type {!Array<!proto.airchat.message.v2.MessageEventType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEvents(values[i]);
      }
      break;
    case 14:
      var value = new proto.airchat.message.v2.MessageAnalytics;
      reader.readMessage(value,proto.airchat.message.v2.MessageAnalytics.deserializeBinaryFromReader);
      msg.setMessageAnalytics(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setContinuedMessageThreadId(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addMentionedUserIds(value);
      break;
    case 17:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addMentionedUsers(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceMessageThreadId(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReferenceMessageThreadCreated(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRoomId(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.addImageReferenceIds(value);
      break;
    case 22:
      var value = new proto.airchat.message.v2.LinkMetadata;
      reader.readMessage(value,proto.airchat.message.v2.LinkMetadata.deserializeBinaryFromReader);
      msg.addLinkMetadata(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousThreadRecordingId(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParticipantOnlyVisibility(value);
      break;
    case 25:
      var value = new airchat_user_v2_user_pb.UserRestriction;
      reader.readMessage(value,airchat_user_v2_user_pb.UserRestriction.deserializeBinaryFromReader);
      msg.setUserRestriction(value);
      break;
    case 26:
      var value = new proto.airchat.message.v2.ImageReference;
      reader.readMessage(value,proto.airchat.message.v2.ImageReference.deserializeBinaryFromReader);
      msg.addImageReferences(value);
      break;
    case 27:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addRepostUser(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnailImagePath(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBookmarked(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHighlighted(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHiddenInChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMediaType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMessageUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getHlsUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTranscription();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.airchat.message.v2.Transcription.serializeBinaryToWriter
    );
  }
  f = message.getFromUser();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getMessageAnalytics();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.airchat.message.v2.MessageAnalytics.serializeBinaryToWriter
    );
  }
  f = message.getContinuedMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMentionedUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getMentionedUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getReferenceMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getIsReferenceMessageThreadCreated();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getPrivateRoomId();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getImageReferenceIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      21,
      f
    );
  }
  f = message.getLinkMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.airchat.message.v2.LinkMetadata.serializeBinaryToWriter
    );
  }
  f = message.getPreviousThreadRecordingId();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getParticipantOnlyVisibility();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
  f = message.getUserRestriction();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      airchat_user_v2_user_pb.UserRestriction.serializeBinaryToWriter
    );
  }
  f = message.getImageReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      26,
      f,
      proto.airchat.message.v2.ImageReference.serializeBinaryToWriter
    );
  }
  f = message.getRepostUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      27,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getThumbnailImagePath();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getIsBookmarked();
  if (f) {
    writer.writeBool(
      30,
      f
    );
  }
  f = message.getIsHighlighted();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
  f = message.getHiddenInChannel();
  if (f) {
    writer.writeBool(
      32,
      f
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message_thread_id = 2;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from_user_id = 3;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getFromUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional MessageMediaType media_type = 4;
 * @return {!proto.airchat.message.v2.MessageMediaType}
 */
proto.airchat.message.v2.Message.prototype.getMediaType = function() {
  return /** @type {!proto.airchat.message.v2.MessageMediaType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.airchat.message.v2.MessageMediaType} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setMediaType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 index = 5;
 * @return {number}
 */
proto.airchat.message.v2.Message.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp created_date = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.v2.Message.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string message_url = 7;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getMessageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setMessageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string hls_url = 8;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getHlsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setHlsUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double duration = 9;
 * @return {number}
 */
proto.airchat.message.v2.Message.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional Transcription transcription = 10;
 * @return {?proto.airchat.message.v2.Transcription}
 */
proto.airchat.message.v2.Message.prototype.getTranscription = function() {
  return /** @type{?proto.airchat.message.v2.Transcription} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Transcription, 10));
};


/**
 * @param {?proto.airchat.message.v2.Transcription|undefined} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setTranscription = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearTranscription = function() {
  return this.setTranscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.hasTranscription = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional airchat.user.v2.User from_user = 11;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.Message.prototype.getFromUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 11));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setFromUser = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearFromUser = function() {
  return this.setFromUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.hasFromUser = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated MessageEventType events = 13;
 * @return {!Array<!proto.airchat.message.v2.MessageEventType>}
 */
proto.airchat.message.v2.Message.prototype.getEventsList = function() {
  return /** @type {!Array<!proto.airchat.message.v2.MessageEventType>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<!proto.airchat.message.v2.MessageEventType>} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setEventsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.airchat.message.v2.MessageEventType} value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.addEvents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * optional MessageAnalytics message_analytics = 14;
 * @return {?proto.airchat.message.v2.MessageAnalytics}
 */
proto.airchat.message.v2.Message.prototype.getMessageAnalytics = function() {
  return /** @type{?proto.airchat.message.v2.MessageAnalytics} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.MessageAnalytics, 14));
};


/**
 * @param {?proto.airchat.message.v2.MessageAnalytics|undefined} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setMessageAnalytics = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearMessageAnalytics = function() {
  return this.setMessageAnalytics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.hasMessageAnalytics = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string continued_message_thread_id = 15;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getContinuedMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setContinuedMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * repeated string mentioned_user_ids = 16;
 * @return {!Array<string>}
 */
proto.airchat.message.v2.Message.prototype.getMentionedUserIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setMentionedUserIdsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.addMentionedUserIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearMentionedUserIdsList = function() {
  return this.setMentionedUserIdsList([]);
};


/**
 * repeated airchat.user.v2.User mentioned_users = 17;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.message.v2.Message.prototype.getMentionedUsersList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 17));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setMentionedUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.Message.prototype.addMentionedUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearMentionedUsersList = function() {
  return this.setMentionedUsersList([]);
};


/**
 * optional string reference_message_thread_id = 18;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getReferenceMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setReferenceMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool is_reference_message_thread_created = 19;
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.getIsReferenceMessageThreadCreated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setIsReferenceMessageThreadCreated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional string private_room_id = 20;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getPrivateRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setPrivateRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * repeated string image_reference_ids = 21;
 * @return {!Array<string>}
 */
proto.airchat.message.v2.Message.prototype.getImageReferenceIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setImageReferenceIdsList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.addImageReferenceIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearImageReferenceIdsList = function() {
  return this.setImageReferenceIdsList([]);
};


/**
 * repeated LinkMetadata link_metadata = 22;
 * @return {!Array<!proto.airchat.message.v2.LinkMetadata>}
 */
proto.airchat.message.v2.Message.prototype.getLinkMetadataList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.LinkMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.message.v2.LinkMetadata, 22));
};


/**
 * @param {!Array<!proto.airchat.message.v2.LinkMetadata>} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setLinkMetadataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.airchat.message.v2.LinkMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.LinkMetadata}
 */
proto.airchat.message.v2.Message.prototype.addLinkMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.airchat.message.v2.LinkMetadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearLinkMetadataList = function() {
  return this.setLinkMetadataList([]);
};


/**
 * optional string previous_thread_recording_id = 23;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getPreviousThreadRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setPreviousThreadRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional bool participant_only_visibility = 24;
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.getParticipantOnlyVisibility = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setParticipantOnlyVisibility = function(value) {
  return jspb.Message.setProto3BooleanField(this, 24, value);
};


/**
 * optional airchat.user.v2.UserRestriction user_restriction = 25;
 * @return {?proto.airchat.user.v2.UserRestriction}
 */
proto.airchat.message.v2.Message.prototype.getUserRestriction = function() {
  return /** @type{?proto.airchat.user.v2.UserRestriction} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.UserRestriction, 25));
};


/**
 * @param {?proto.airchat.user.v2.UserRestriction|undefined} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setUserRestriction = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearUserRestriction = function() {
  return this.setUserRestriction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.hasUserRestriction = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * repeated ImageReference image_references = 26;
 * @return {!Array<!proto.airchat.message.v2.ImageReference>}
 */
proto.airchat.message.v2.Message.prototype.getImageReferencesList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.ImageReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.message.v2.ImageReference, 26));
};


/**
 * @param {!Array<!proto.airchat.message.v2.ImageReference>} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setImageReferencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 26, value);
};


/**
 * @param {!proto.airchat.message.v2.ImageReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.ImageReference}
 */
proto.airchat.message.v2.Message.prototype.addImageReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 26, opt_value, proto.airchat.message.v2.ImageReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearImageReferencesList = function() {
  return this.setImageReferencesList([]);
};


/**
 * repeated airchat.user.v2.User repost_user = 27;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.message.v2.Message.prototype.getRepostUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 27));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.message.v2.Message} returns this
*/
proto.airchat.message.v2.Message.prototype.setRepostUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 27, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.Message.prototype.addRepostUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 27, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.clearRepostUserList = function() {
  return this.setRepostUserList([]);
};


/**
 * optional string thumbnail_image_path = 28;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getThumbnailImagePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setThumbnailImagePath = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string channel_id = 29;
 * @return {string}
 */
proto.airchat.message.v2.Message.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional bool is_bookmarked = 30;
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.getIsBookmarked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 30, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setIsBookmarked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 30, value);
};


/**
 * optional bool is_highlighted = 31;
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.getIsHighlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 31, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setIsHighlighted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 31, value);
};


/**
 * optional bool hidden_in_channel = 32;
 * @return {boolean}
 */
proto.airchat.message.v2.Message.prototype.getHiddenInChannel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Message} returns this
 */
proto.airchat.message.v2.Message.prototype.setHiddenInChannel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 32, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.Playlist.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.Playlist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.Playlist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Playlist.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bandwidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    codecs: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetDuration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    resolution: (f = msg.getResolution()) && proto.airchat.message.v2.Resolution.toObject(includeInstance, f),
    frameRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    fileExtension: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.Playlist}
 */
proto.airchat.message.v2.Playlist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.Playlist;
  return proto.airchat.message.v2.Playlist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.Playlist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.Playlist}
 */
proto.airchat.message.v2.Playlist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.airchat.message.v2.MessageMediaType} */ (reader.readEnum());
      msg.setMediaType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBandwidth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodecs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetDuration(value);
      break;
    case 5:
      var value = new proto.airchat.message.v2.Resolution;
      reader.readMessage(value,proto.airchat.message.v2.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrameRate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileExtension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.Playlist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.Playlist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.Playlist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Playlist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMediaType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBandwidth();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCodecs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetDuration();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.airchat.message.v2.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getFrameRate();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getFileExtension();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional MessageMediaType media_type = 1;
 * @return {!proto.airchat.message.v2.MessageMediaType}
 */
proto.airchat.message.v2.Playlist.prototype.getMediaType = function() {
  return /** @type {!proto.airchat.message.v2.MessageMediaType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.airchat.message.v2.MessageMediaType} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.setMediaType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 bandwidth = 2;
 * @return {number}
 */
proto.airchat.message.v2.Playlist.prototype.getBandwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.setBandwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string codecs = 3;
 * @return {string}
 */
proto.airchat.message.v2.Playlist.prototype.getCodecs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.setCodecs = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 target_duration = 4;
 * @return {number}
 */
proto.airchat.message.v2.Playlist.prototype.getTargetDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.setTargetDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Resolution resolution = 5;
 * @return {?proto.airchat.message.v2.Resolution}
 */
proto.airchat.message.v2.Playlist.prototype.getResolution = function() {
  return /** @type{?proto.airchat.message.v2.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Resolution, 5));
};


/**
 * @param {?proto.airchat.message.v2.Resolution|undefined} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
*/
proto.airchat.message.v2.Playlist.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.Playlist.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double frame_rate = 6;
 * @return {number}
 */
proto.airchat.message.v2.Playlist.prototype.getFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string file_extension = 7;
 * @return {string}
 */
proto.airchat.message.v2.Playlist.prototype.getFileExtension = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Playlist} returns this
 */
proto.airchat.message.v2.Playlist.prototype.setFileExtension = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.Resolution.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.Resolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.Resolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Resolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolutionWidth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resolutionHeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.Resolution}
 */
proto.airchat.message.v2.Resolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.Resolution;
  return proto.airchat.message.v2.Resolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.Resolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.Resolution}
 */
proto.airchat.message.v2.Resolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolutionWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolutionHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.Resolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.Resolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.Resolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Resolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolutionWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResolutionHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 resolution_width = 1;
 * @return {number}
 */
proto.airchat.message.v2.Resolution.prototype.getResolutionWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Resolution} returns this
 */
proto.airchat.message.v2.Resolution.prototype.setResolutionWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 resolution_height = 2;
 * @return {number}
 */
proto.airchat.message.v2.Resolution.prototype.getResolutionHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Resolution} returns this
 */
proto.airchat.message.v2.Resolution.prototype.setResolutionHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.PlaylistHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.PlaylistHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.PlaylistHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: msg.getContents_asB64(),
    fileExtension: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.PlaylistHeader}
 */
proto.airchat.message.v2.PlaylistHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.PlaylistHeader;
  return proto.airchat.message.v2.PlaylistHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.PlaylistHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.PlaylistHeader}
 */
proto.airchat.message.v2.PlaylistHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileExtension(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.PlaylistHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.PlaylistHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.PlaylistHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFileExtension();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes contents = 1;
 * @return {!(string|Uint8Array)}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contents = 1;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.airchat.message.v2.PlaylistHeader} returns this
 */
proto.airchat.message.v2.PlaylistHeader.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string file_extension = 2;
 * @return {string}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.getFileExtension = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.PlaylistHeader} returns this
 */
proto.airchat.message.v2.PlaylistHeader.prototype.setFileExtension = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content_type = 3;
 * @return {string}
 */
proto.airchat.message.v2.PlaylistHeader.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.PlaylistHeader} returns this
 */
proto.airchat.message.v2.PlaylistHeader.prototype.setContentType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.Segment.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.Segment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.Segment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Segment.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    uploaded: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.Segment}
 */
proto.airchat.message.v2.Segment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.Segment;
  return proto.airchat.message.v2.Segment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.Segment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.Segment}
 */
proto.airchat.message.v2.Segment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUploaded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.Segment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.Segment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.Segment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Segment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getUploaded();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.airchat.message.v2.Segment.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Segment} returns this
 */
proto.airchat.message.v2.Segment.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double duration = 2;
 * @return {number}
 */
proto.airchat.message.v2.Segment.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.Segment} returns this
 */
proto.airchat.message.v2.Segment.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool uploaded = 3;
 * @return {boolean}
 */
proto.airchat.message.v2.Segment.prototype.getUploaded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Segment} returns this
 */
proto.airchat.message.v2.Segment.prototype.setUploaded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.v2.Segments.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.Segments.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.Segments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.Segments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Segments.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto.airchat.message.v2.Segment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.Segments}
 */
proto.airchat.message.v2.Segments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.Segments;
  return proto.airchat.message.v2.Segments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.Segments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.Segments}
 */
proto.airchat.message.v2.Segments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airchat.message.v2.Segment;
      reader.readMessage(value,proto.airchat.message.v2.Segment.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.Segments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.Segments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.Segments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Segments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.airchat.message.v2.Segment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Segment segment = 1;
 * @return {!Array<!proto.airchat.message.v2.Segment>}
 */
proto.airchat.message.v2.Segments.prototype.getSegmentList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.Segment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.message.v2.Segment, 1));
};


/**
 * @param {!Array<!proto.airchat.message.v2.Segment>} value
 * @return {!proto.airchat.message.v2.Segments} returns this
*/
proto.airchat.message.v2.Segments.prototype.setSegmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.message.v2.Segment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Segment}
 */
proto.airchat.message.v2.Segments.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.message.v2.Segment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Segments} returns this
 */
proto.airchat.message.v2.Segments.prototype.clearSegmentList = function() {
  return this.setSegmentList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.v2.MessageThread.repeatedFields_ = [2,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageThread.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    referenceRecordingId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    messageCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    continuedMessageThreadId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    continuedMessageCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    continuedMessageIndex: jspb.Message.getFieldWithDefault(msg, 9, 0),
    lastMessageTime: (f = msg.getLastMessageTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    participantOnlyVisibility: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    userRestrictionList: jspb.Message.toObjectList(msg.getUserRestrictionList(),
    airchat_user_v2_user_pb.UserRestriction.toObject, includeInstance),
    channelId: jspb.Message.getFieldWithDefault(msg, 13, ""),
    isBookmarked: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    isHighlighted: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    isInteracted: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageThread}
 */
proto.airchat.message.v2.MessageThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageThread;
  return proto.airchat.message.v2.MessageThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageThread}
 */
proto.airchat.message.v2.MessageThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceRecordingId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageCount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContinuedMessageThreadId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContinuedMessageCount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContinuedMessageIndex(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastMessageTime(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParticipantOnlyVisibility(value);
      break;
    case 12:
      var value = new airchat_user_v2_user_pb.UserRestriction;
      reader.readMessage(value,airchat_user_v2_user_pb.UserRestriction.deserializeBinaryFromReader);
      msg.addUserRestriction(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBookmarked(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHighlighted(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInteracted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getReferenceRecordingId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getContinuedMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContinuedMessageCount();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getContinuedMessageIndex();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getLastMessageTime();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getParticipantOnlyVisibility();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getUserRestrictionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      airchat_user_v2_user_pb.UserRestriction.serializeBinaryToWriter
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getIsBookmarked();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsHighlighted();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getIsInteracted();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.airchat.message.v2.MessageThread.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated airchat.user.v2.User participants = 2;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.message.v2.MessageThread.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 2));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
*/
proto.airchat.message.v2.MessageThread.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.MessageThread.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional int64 index = 3;
 * @return {number}
 */
proto.airchat.message.v2.MessageThread.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string reference_recording_id = 4;
 * @return {string}
 */
proto.airchat.message.v2.MessageThread.prototype.getReferenceRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setReferenceRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.v2.MessageThread.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
*/
proto.airchat.message.v2.MessageThread.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThread.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 message_count = 6;
 * @return {number}
 */
proto.airchat.message.v2.MessageThread.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string continued_message_thread_id = 7;
 * @return {string}
 */
proto.airchat.message.v2.MessageThread.prototype.getContinuedMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setContinuedMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 continued_message_count = 8;
 * @return {number}
 */
proto.airchat.message.v2.MessageThread.prototype.getContinuedMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setContinuedMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 continued_message_index = 9;
 * @return {number}
 */
proto.airchat.message.v2.MessageThread.prototype.getContinuedMessageIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setContinuedMessageIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional google.protobuf.Timestamp last_message_time = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.v2.MessageThread.prototype.getLastMessageTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
*/
proto.airchat.message.v2.MessageThread.prototype.setLastMessageTime = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.clearLastMessageTime = function() {
  return this.setLastMessageTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThread.prototype.hasLastMessageTime = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool participant_only_visibility = 11;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThread.prototype.getParticipantOnlyVisibility = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setParticipantOnlyVisibility = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * repeated airchat.user.v2.UserRestriction user_restriction = 12;
 * @return {!Array<!proto.airchat.user.v2.UserRestriction>}
 */
proto.airchat.message.v2.MessageThread.prototype.getUserRestrictionList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.UserRestriction>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.UserRestriction, 12));
};


/**
 * @param {!Array<!proto.airchat.user.v2.UserRestriction>} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
*/
proto.airchat.message.v2.MessageThread.prototype.setUserRestrictionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.airchat.user.v2.UserRestriction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.UserRestriction}
 */
proto.airchat.message.v2.MessageThread.prototype.addUserRestriction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.airchat.user.v2.UserRestriction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.clearUserRestrictionList = function() {
  return this.setUserRestrictionList([]);
};


/**
 * optional string channel_id = 13;
 * @return {string}
 */
proto.airchat.message.v2.MessageThread.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool is_bookmarked = 14;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThread.prototype.getIsBookmarked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setIsBookmarked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool is_highlighted = 15;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThread.prototype.getIsHighlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setIsHighlighted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool is_interacted = 16;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThread.prototype.getIsInteracted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThread} returns this
 */
proto.airchat.message.v2.MessageThread.prototype.setIsInteracted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageThreadDeletedIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageThreadDeletedIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recordingId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageThreadDeletedIndex}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageThreadDeletedIndex;
  return proto.airchat.message.v2.MessageThreadDeletedIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageThreadDeletedIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageThreadDeletedIndex}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageThreadDeletedIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageThreadDeletedIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message_thread_id = 1;
 * @return {string}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageThreadDeletedIndex} returns this
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageThreadDeletedIndex} returns this
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string recording_id = 3;
 * @return {string}
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageThreadDeletedIndex} returns this
 */
proto.airchat.message.v2.MessageThreadDeletedIndex.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.v2.Transcription.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.Transcription.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.Transcription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.Transcription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Transcription.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transcriptionSegmentsList: jspb.Message.toObjectList(msg.getTranscriptionSegmentsList(),
    proto.airchat.message.v2.TranscriptionSegment.toObject, includeInstance),
    language: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transcriptionStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transcriptionText: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isEdited: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.Transcription}
 */
proto.airchat.message.v2.Transcription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.Transcription;
  return proto.airchat.message.v2.Transcription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.Transcription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.Transcription}
 */
proto.airchat.message.v2.Transcription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 2:
      var value = new proto.airchat.message.v2.TranscriptionSegment;
      reader.readMessage(value,proto.airchat.message.v2.TranscriptionSegment.deserializeBinaryFromReader);
      msg.addTranscriptionSegments(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 4:
      var value = /** @type {!proto.airchat.message.v2.TranscriptionStatus} */ (reader.readEnum());
      msg.setTranscriptionStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscriptionText(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEdited(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.Transcription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.Transcription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.Transcription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.Transcription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTranscriptionSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.airchat.message.v2.TranscriptionSegment.serializeBinaryToWriter
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTranscriptionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTranscriptionText();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsEdited();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.v2.Transcription.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Transcription} returns this
 */
proto.airchat.message.v2.Transcription.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TranscriptionSegment transcription_segments = 2;
 * @return {!Array<!proto.airchat.message.v2.TranscriptionSegment>}
 */
proto.airchat.message.v2.Transcription.prototype.getTranscriptionSegmentsList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.TranscriptionSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.message.v2.TranscriptionSegment, 2));
};


/**
 * @param {!Array<!proto.airchat.message.v2.TranscriptionSegment>} value
 * @return {!proto.airchat.message.v2.Transcription} returns this
*/
proto.airchat.message.v2.Transcription.prototype.setTranscriptionSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.airchat.message.v2.TranscriptionSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.TranscriptionSegment}
 */
proto.airchat.message.v2.Transcription.prototype.addTranscriptionSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.airchat.message.v2.TranscriptionSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.Transcription} returns this
 */
proto.airchat.message.v2.Transcription.prototype.clearTranscriptionSegmentsList = function() {
  return this.setTranscriptionSegmentsList([]);
};


/**
 * optional string language = 3;
 * @return {string}
 */
proto.airchat.message.v2.Transcription.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Transcription} returns this
 */
proto.airchat.message.v2.Transcription.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TranscriptionStatus transcription_status = 4;
 * @return {!proto.airchat.message.v2.TranscriptionStatus}
 */
proto.airchat.message.v2.Transcription.prototype.getTranscriptionStatus = function() {
  return /** @type {!proto.airchat.message.v2.TranscriptionStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.airchat.message.v2.TranscriptionStatus} value
 * @return {!proto.airchat.message.v2.Transcription} returns this
 */
proto.airchat.message.v2.Transcription.prototype.setTranscriptionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string transcription_text = 5;
 * @return {string}
 */
proto.airchat.message.v2.Transcription.prototype.getTranscriptionText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.Transcription} returns this
 */
proto.airchat.message.v2.Transcription.prototype.setTranscriptionText = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool is_edited = 6;
 * @return {boolean}
 */
proto.airchat.message.v2.Transcription.prototype.getIsEdited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.Transcription} returns this
 */
proto.airchat.message.v2.Transcription.prototype.setIsEdited = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.TranscriptionSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.TranscriptionSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.TranscriptionSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    logProbability: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.TranscriptionSegment}
 */
proto.airchat.message.v2.TranscriptionSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.TranscriptionSegment;
  return proto.airchat.message.v2.TranscriptionSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.TranscriptionSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.TranscriptionSegment}
 */
proto.airchat.message.v2.TranscriptionSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLogProbability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.TranscriptionSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.TranscriptionSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.TranscriptionSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLogProbability();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.TranscriptionSegment} returns this
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double start_time = 2;
 * @return {number}
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.TranscriptionSegment} returns this
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double end_time = 3;
 * @return {number}
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.TranscriptionSegment} returns this
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double log_probability = 4;
 * @return {number}
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.getLogProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.TranscriptionSegment} returns this
 */
proto.airchat.message.v2.TranscriptionSegment.prototype.setLogProbability = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.v2.MessageFeedItem.repeatedFields_ = [5,8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageFeedItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageFeedItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageFeedItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageThread: (f = msg.getMessageThread()) && proto.airchat.message.v2.MessageThread.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    itemTime: (f = msg.getItemTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    referenceMessage: (f = msg.getReferenceMessage()) && proto.airchat.message.v2.Message.toObject(includeInstance, f),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.airchat.message.v2.Message.toObject, includeInstance),
    messageCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    participantMessageGap: jspb.Message.getFieldWithDefault(msg, 7, 0),
    actionUserList: jspb.Message.toObjectList(msg.getActionUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    continuedMessageCount: jspb.Message.getFieldWithDefault(msg, 9, 0),
    clusteredMessageThreadsList: jspb.Message.toObjectList(msg.getClusteredMessageThreadsList(),
    proto.airchat.message.v2.MessageThread.toObject, includeInstance),
    attribution: (f = msg.getAttribution()) && proto.airchat.message.v2.MessageFeedItemAttribution.toObject(includeInstance, f),
    previousMessage: (f = msg.getPreviousMessage()) && proto.airchat.message.v2.Message.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && airchat_channel_v2_channel_pb.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageFeedItem}
 */
proto.airchat.message.v2.MessageFeedItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageFeedItem;
  return proto.airchat.message.v2.MessageFeedItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageFeedItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageFeedItem}
 */
proto.airchat.message.v2.MessageFeedItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airchat.message.v2.MessageThread;
      reader.readMessage(value,proto.airchat.message.v2.MessageThread.deserializeBinaryFromReader);
      msg.setMessageThread(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.message.v2.MessageFeedItemType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setItemTime(value);
      break;
    case 4:
      var value = new proto.airchat.message.v2.Message;
      reader.readMessage(value,proto.airchat.message.v2.Message.deserializeBinaryFromReader);
      msg.setReferenceMessage(value);
      break;
    case 5:
      var value = new proto.airchat.message.v2.Message;
      reader.readMessage(value,proto.airchat.message.v2.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParticipantMessageGap(value);
      break;
    case 8:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addActionUser(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContinuedMessageCount(value);
      break;
    case 10:
      var value = new proto.airchat.message.v2.MessageThread;
      reader.readMessage(value,proto.airchat.message.v2.MessageThread.deserializeBinaryFromReader);
      msg.addClusteredMessageThreads(value);
      break;
    case 11:
      var value = new proto.airchat.message.v2.MessageFeedItemAttribution;
      reader.readMessage(value,proto.airchat.message.v2.MessageFeedItemAttribution.deserializeBinaryFromReader);
      msg.setAttribution(value);
      break;
    case 12:
      var value = new proto.airchat.message.v2.Message;
      reader.readMessage(value,proto.airchat.message.v2.Message.deserializeBinaryFromReader);
      msg.setPreviousMessage(value);
      break;
    case 13:
      var value = new airchat_channel_v2_channel_pb.Channel;
      reader.readMessage(value,airchat_channel_v2_channel_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageFeedItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageFeedItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageFeedItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageThread();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.message.v2.MessageThread.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getItemTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReferenceMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.airchat.message.v2.Message.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.airchat.message.v2.Message.serializeBinaryToWriter
    );
  }
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getParticipantMessageGap();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getActionUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getContinuedMessageCount();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getClusteredMessageThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.airchat.message.v2.MessageThread.serializeBinaryToWriter
    );
  }
  f = message.getAttribution();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.airchat.message.v2.MessageFeedItemAttribution.serializeBinaryToWriter
    );
  }
  f = message.getPreviousMessage();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.airchat.message.v2.Message.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      airchat_channel_v2_channel_pb.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageThread message_thread = 1;
 * @return {?proto.airchat.message.v2.MessageThread}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getMessageThread = function() {
  return /** @type{?proto.airchat.message.v2.MessageThread} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.MessageThread, 1));
};


/**
 * @param {?proto.airchat.message.v2.MessageThread|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setMessageThread = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearMessageThread = function() {
  return this.setMessageThread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.hasMessageThread = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageFeedItemType type = 2;
 * @return {!proto.airchat.message.v2.MessageFeedItemType}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getType = function() {
  return /** @type {!proto.airchat.message.v2.MessageFeedItemType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.message.v2.MessageFeedItemType} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp item_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getItemTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setItemTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearItemTime = function() {
  return this.setItemTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.hasItemTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Message reference_message = 4;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getReferenceMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Message, 4));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setReferenceMessage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearReferenceMessage = function() {
  return this.setReferenceMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.hasReferenceMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Message messages = 5;
 * @return {!Array<!proto.airchat.message.v2.Message>}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.message.v2.Message, 5));
};


/**
 * @param {!Array<!proto.airchat.message.v2.Message>} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.airchat.message.v2.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.airchat.message.v2.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional int64 message_count = 6;
 * @return {number}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.setMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 participant_message_gap = 7;
 * @return {number}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getParticipantMessageGap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.setParticipantMessageGap = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated airchat.user.v2.User action_user = 8;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getActionUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 8));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setActionUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.addActionUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearActionUserList = function() {
  return this.setActionUserList([]);
};


/**
 * optional int64 continued_message_count = 9;
 * @return {number}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getContinuedMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.setContinuedMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated MessageThread clustered_message_threads = 10;
 * @return {!Array<!proto.airchat.message.v2.MessageThread>}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getClusteredMessageThreadsList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.MessageThread>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.message.v2.MessageThread, 10));
};


/**
 * @param {!Array<!proto.airchat.message.v2.MessageThread>} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setClusteredMessageThreadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.airchat.message.v2.MessageThread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.MessageThread}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.addClusteredMessageThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.airchat.message.v2.MessageThread, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearClusteredMessageThreadsList = function() {
  return this.setClusteredMessageThreadsList([]);
};


/**
 * optional MessageFeedItemAttribution attribution = 11;
 * @return {?proto.airchat.message.v2.MessageFeedItemAttribution}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getAttribution = function() {
  return /** @type{?proto.airchat.message.v2.MessageFeedItemAttribution} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.MessageFeedItemAttribution, 11));
};


/**
 * @param {?proto.airchat.message.v2.MessageFeedItemAttribution|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setAttribution = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearAttribution = function() {
  return this.setAttribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.hasAttribution = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Message previous_message = 12;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getPreviousMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Message, 12));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setPreviousMessage = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearPreviousMessage = function() {
  return this.setPreviousMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.hasPreviousMessage = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional airchat.channel.v2.Channel channel = 13;
 * @return {?proto.airchat.channel.v2.Channel}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.getChannel = function() {
  return /** @type{?proto.airchat.channel.v2.Channel} */ (
    jspb.Message.getWrapperField(this, airchat_channel_v2_channel_pb.Channel, 13));
};


/**
 * @param {?proto.airchat.channel.v2.Channel|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
*/
proto.airchat.message.v2.MessageFeedItem.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItem} returns this
 */
proto.airchat.message.v2.MessageFeedItem.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItem.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageAnalytics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageAnalytics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageAnalytics.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    viewCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    listenCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    likeCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    repostCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    threadCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageAnalytics}
 */
proto.airchat.message.v2.MessageAnalytics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageAnalytics;
  return proto.airchat.message.v2.MessageAnalytics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageAnalytics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageAnalytics}
 */
proto.airchat.message.v2.MessageAnalytics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setViewCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setListenCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLikeCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepostCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreadCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageAnalytics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageAnalytics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageAnalytics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getViewCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getListenCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLikeCount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRepostCount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getThreadCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional string recording_id = 1;
 * @return {string}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.MessageAnalytics} returns this
 */
proto.airchat.message.v2.MessageAnalytics.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 view_count = 2;
 * @return {number}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.getViewCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageAnalytics} returns this
 */
proto.airchat.message.v2.MessageAnalytics.prototype.setViewCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 listen_count = 3;
 * @return {number}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.getListenCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageAnalytics} returns this
 */
proto.airchat.message.v2.MessageAnalytics.prototype.setListenCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 like_count = 4;
 * @return {number}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.getLikeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageAnalytics} returns this
 */
proto.airchat.message.v2.MessageAnalytics.prototype.setLikeCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 repost_count = 5;
 * @return {number}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.getRepostCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageAnalytics} returns this
 */
proto.airchat.message.v2.MessageAnalytics.prototype.setRepostCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 thread_count = 6;
 * @return {number}
 */
proto.airchat.message.v2.MessageAnalytics.prototype.getThreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.MessageAnalytics} returns this
 */
proto.airchat.message.v2.MessageAnalytics.prototype.setThreadCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageEventItem.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageEventItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageEventItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageEventItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f),
    eventType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventTime: (f = msg.getEventTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageEventItem}
 */
proto.airchat.message.v2.MessageEventItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageEventItem;
  return proto.airchat.message.v2.MessageEventItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageEventItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageEventItem}
 */
proto.airchat.message.v2.MessageEventItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.message.v2.MessageEventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEventTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageEventItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageEventItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageEventItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageEventItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEventTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.user.v2.User user = 1;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.MessageEventItem.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.message.v2.MessageEventItem} returns this
*/
proto.airchat.message.v2.MessageEventItem.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageEventItem} returns this
 */
proto.airchat.message.v2.MessageEventItem.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageEventItem.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageEventType event_type = 2;
 * @return {!proto.airchat.message.v2.MessageEventType}
 */
proto.airchat.message.v2.MessageEventItem.prototype.getEventType = function() {
  return /** @type {!proto.airchat.message.v2.MessageEventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.message.v2.MessageEventType} value
 * @return {!proto.airchat.message.v2.MessageEventItem} returns this
 */
proto.airchat.message.v2.MessageEventItem.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp event_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.v2.MessageEventItem.prototype.getEventTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.v2.MessageEventItem} returns this
*/
proto.airchat.message.v2.MessageEventItem.prototype.setEventTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageEventItem} returns this
 */
proto.airchat.message.v2.MessageEventItem.prototype.clearEventTime = function() {
  return this.setEventTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageEventItem.prototype.hasEventTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageThreadDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageThreadDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageThreadDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageThread: (f = msg.getMessageThread()) && proto.airchat.message.v2.MessageThread.toObject(includeInstance, f),
    firstMessage: (f = msg.getFirstMessage()) && proto.airchat.message.v2.Message.toObject(includeInstance, f),
    lastMessage: (f = msg.getLastMessage()) && proto.airchat.message.v2.Message.toObject(includeInstance, f),
    following: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    isUserFollowing: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isInteracted: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageThreadDetails}
 */
proto.airchat.message.v2.MessageThreadDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageThreadDetails;
  return proto.airchat.message.v2.MessageThreadDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageThreadDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageThreadDetails}
 */
proto.airchat.message.v2.MessageThreadDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airchat.message.v2.MessageThread;
      reader.readMessage(value,proto.airchat.message.v2.MessageThread.deserializeBinaryFromReader);
      msg.setMessageThread(value);
      break;
    case 2:
      var value = new proto.airchat.message.v2.Message;
      reader.readMessage(value,proto.airchat.message.v2.Message.deserializeBinaryFromReader);
      msg.setFirstMessage(value);
      break;
    case 3:
      var value = new proto.airchat.message.v2.Message;
      reader.readMessage(value,proto.airchat.message.v2.Message.deserializeBinaryFromReader);
      msg.setLastMessage(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollowing(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUserFollowing(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInteracted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageThreadDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageThreadDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageThreadDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageThread();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.message.v2.MessageThread.serializeBinaryToWriter
    );
  }
  f = message.getFirstMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airchat.message.v2.Message.serializeBinaryToWriter
    );
  }
  f = message.getLastMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.airchat.message.v2.Message.serializeBinaryToWriter
    );
  }
  f = message.getFollowing();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsUserFollowing();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsInteracted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional MessageThread message_thread = 1;
 * @return {?proto.airchat.message.v2.MessageThread}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.getMessageThread = function() {
  return /** @type{?proto.airchat.message.v2.MessageThread} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.MessageThread, 1));
};


/**
 * @param {?proto.airchat.message.v2.MessageThread|undefined} value
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
*/
proto.airchat.message.v2.MessageThreadDetails.prototype.setMessageThread = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.clearMessageThread = function() {
  return this.setMessageThread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.hasMessageThread = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Message first_message = 2;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.getFirstMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Message, 2));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
*/
proto.airchat.message.v2.MessageThreadDetails.prototype.setFirstMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.clearFirstMessage = function() {
  return this.setFirstMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.hasFirstMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Message last_message = 3;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.getLastMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Message, 3));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
*/
proto.airchat.message.v2.MessageThreadDetails.prototype.setLastMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.clearLastMessage = function() {
  return this.setLastMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.hasLastMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool following = 4;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.getFollowing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.setFollowing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_user_following = 5;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.getIsUserFollowing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.setIsUserFollowing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_interacted = 6;
 * @return {boolean}
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.getIsInteracted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.MessageThreadDetails} returns this
 */
proto.airchat.message.v2.MessageThreadDetails.prototype.setIsInteracted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.message.v2.PrivateRoom.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.PrivateRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.PrivateRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.PrivateRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.PrivateRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createdDate: (f = msg.getCreatedDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    messageCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastMessage: (f = msg.getLastMessage()) && proto.airchat.message.v2.Message.toObject(includeInstance, f),
    unreadCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isPersonalRoom: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.PrivateRoom}
 */
proto.airchat.message.v2.PrivateRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.PrivateRoom;
  return proto.airchat.message.v2.PrivateRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.PrivateRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.PrivateRoom}
 */
proto.airchat.message.v2.PrivateRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 4:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageCount(value);
      break;
    case 6:
      var value = new proto.airchat.message.v2.Message;
      reader.readMessage(value,proto.airchat.message.v2.Message.deserializeBinaryFromReader);
      msg.setLastMessage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnreadCount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPersonalRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.PrivateRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.PrivateRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.PrivateRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.PrivateRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLastMessage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.airchat.message.v2.Message.serializeBinaryToWriter
    );
  }
  f = message.getUnreadCount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getIsPersonalRoom();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp created_date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getCreatedDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
*/
proto.airchat.message.v2.PrivateRoom.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.PrivateRoom.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated airchat.user.v2.User participants = 4;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 4));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
*/
proto.airchat.message.v2.PrivateRoom.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.PrivateRoom.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional int64 message_count = 5;
 * @return {number}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.setMessageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Message last_message = 6;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getLastMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Message, 6));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
*/
proto.airchat.message.v2.PrivateRoom.prototype.setLastMessage = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.clearLastMessage = function() {
  return this.setLastMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.PrivateRoom.prototype.hasLastMessage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 unread_count = 7;
 * @return {number}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.setUnreadCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool is_personal_room = 8;
 * @return {boolean}
 */
proto.airchat.message.v2.PrivateRoom.prototype.getIsPersonalRoom = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.message.v2.PrivateRoom} returns this
 */
proto.airchat.message.v2.PrivateRoom.prototype.setIsPersonalRoom = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.PrivateRoomDeletedIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.PrivateRoomDeletedIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    privateRoomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recordingId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.PrivateRoomDeletedIndex}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.PrivateRoomDeletedIndex;
  return proto.airchat.message.v2.PrivateRoomDeletedIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.PrivateRoomDeletedIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.PrivateRoomDeletedIndex}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRoomId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.PrivateRoomDeletedIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.PrivateRoomDeletedIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrivateRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string private_room_id = 1;
 * @return {string}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.getPrivateRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.PrivateRoomDeletedIndex} returns this
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.setPrivateRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.message.v2.PrivateRoomDeletedIndex} returns this
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string recording_id = 3;
 * @return {string}
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.PrivateRoomDeletedIndex} returns this
 */
proto.airchat.message.v2.PrivateRoomDeletedIndex.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.LinkMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.LinkMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.LinkMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.LinkMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    summary: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imagePath: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.LinkMetadata}
 */
proto.airchat.message.v2.LinkMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.LinkMetadata;
  return proto.airchat.message.v2.LinkMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.LinkMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.LinkMetadata}
 */
proto.airchat.message.v2.LinkMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.LinkMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.LinkMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.LinkMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.LinkMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImagePath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.airchat.message.v2.LinkMetadata.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.LinkMetadata} returns this
 */
proto.airchat.message.v2.LinkMetadata.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.airchat.message.v2.LinkMetadata.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.LinkMetadata} returns this
 */
proto.airchat.message.v2.LinkMetadata.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string summary = 3;
 * @return {string}
 */
proto.airchat.message.v2.LinkMetadata.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.LinkMetadata} returns this
 */
proto.airchat.message.v2.LinkMetadata.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string image_path = 4;
 * @return {string}
 */
proto.airchat.message.v2.LinkMetadata.prototype.getImagePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.LinkMetadata} returns this
 */
proto.airchat.message.v2.LinkMetadata.prototype.setImagePath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.LinkMetadataUpload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.LinkMetadataUpload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.LinkMetadataUpload.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkMetadata: (f = msg.getLinkMetadata()) && proto.airchat.message.v2.LinkMetadata.toObject(includeInstance, f),
    imageData: msg.getImageData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.LinkMetadataUpload}
 */
proto.airchat.message.v2.LinkMetadataUpload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.LinkMetadataUpload;
  return proto.airchat.message.v2.LinkMetadataUpload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.LinkMetadataUpload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.LinkMetadataUpload}
 */
proto.airchat.message.v2.LinkMetadataUpload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airchat.message.v2.LinkMetadata;
      reader.readMessage(value,proto.airchat.message.v2.LinkMetadata.deserializeBinaryFromReader);
      msg.setLinkMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.LinkMetadataUpload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.LinkMetadataUpload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.LinkMetadataUpload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.message.v2.LinkMetadata.serializeBinaryToWriter
    );
  }
  f = message.getImageData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional LinkMetadata link_metadata = 1;
 * @return {?proto.airchat.message.v2.LinkMetadata}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.getLinkMetadata = function() {
  return /** @type{?proto.airchat.message.v2.LinkMetadata} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.LinkMetadata, 1));
};


/**
 * @param {?proto.airchat.message.v2.LinkMetadata|undefined} value
 * @return {!proto.airchat.message.v2.LinkMetadataUpload} returns this
*/
proto.airchat.message.v2.LinkMetadataUpload.prototype.setLinkMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.LinkMetadataUpload} returns this
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.clearLinkMetadata = function() {
  return this.setLinkMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.hasLinkMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes image_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.getImageData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image_data = 2;
 * This is a type-conversion wrapper around `getImageData()`
 * @return {string}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.getImageData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageData()));
};


/**
 * optional bytes image_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageData()`
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.getImageData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.airchat.message.v2.LinkMetadataUpload} returns this
 */
proto.airchat.message.v2.LinkMetadataUpload.prototype.setImageData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MessageFeedItemAttribution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MessageFeedItemAttribution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageFeedItemAttribution.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    user: (f = msg.getUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MessageFeedItemAttribution}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MessageFeedItemAttribution;
  return proto.airchat.message.v2.MessageFeedItemAttribution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MessageFeedItemAttribution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MessageFeedItemAttribution}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.airchat.message.v2.MessageFeedItemAttributionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MessageFeedItemAttribution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MessageFeedItemAttribution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MessageFeedItemAttribution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageFeedItemAttributionType type = 1;
 * @return {!proto.airchat.message.v2.MessageFeedItemAttributionType}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.getType = function() {
  return /** @type {!proto.airchat.message.v2.MessageFeedItemAttributionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.airchat.message.v2.MessageFeedItemAttributionType} value
 * @return {!proto.airchat.message.v2.MessageFeedItemAttribution} returns this
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional airchat.user.v2.User user = 2;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 2));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.message.v2.MessageFeedItemAttribution} returns this
*/
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MessageFeedItemAttribution} returns this
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MessageFeedItemAttribution.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.ImageReference.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.ImageReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.ImageReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.ImageReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageReferenceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resolution: (f = msg.getResolution()) && proto.airchat.message.v2.Resolution.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.ImageReference}
 */
proto.airchat.message.v2.ImageReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.ImageReference;
  return proto.airchat.message.v2.ImageReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.ImageReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.ImageReference}
 */
proto.airchat.message.v2.ImageReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageReferenceId(value);
      break;
    case 2:
      var value = new proto.airchat.message.v2.Resolution;
      reader.readMessage(value,proto.airchat.message.v2.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.ImageReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.ImageReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.ImageReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.ImageReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageReferenceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airchat.message.v2.Resolution.serializeBinaryToWriter
    );
  }
};


/**
 * optional string image_reference_id = 1;
 * @return {string}
 */
proto.airchat.message.v2.ImageReference.prototype.getImageReferenceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.message.v2.ImageReference} returns this
 */
proto.airchat.message.v2.ImageReference.prototype.setImageReferenceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Resolution resolution = 2;
 * @return {?proto.airchat.message.v2.Resolution}
 */
proto.airchat.message.v2.ImageReference.prototype.getResolution = function() {
  return /** @type{?proto.airchat.message.v2.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.airchat.message.v2.Resolution, 2));
};


/**
 * @param {?proto.airchat.message.v2.Resolution|undefined} value
 * @return {!proto.airchat.message.v2.ImageReference} returns this
*/
proto.airchat.message.v2.ImageReference.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.ImageReference} returns this
 */
proto.airchat.message.v2.ImageReference.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.ImageReference.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.message.v2.MentionCandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.message.v2.MentionCandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.message.v2.MentionCandidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MentionCandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f),
    strength: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.message.v2.MentionCandidate}
 */
proto.airchat.message.v2.MentionCandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.message.v2.MentionCandidate;
  return proto.airchat.message.v2.MentionCandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.message.v2.MentionCandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.message.v2.MentionCandidate}
 */
proto.airchat.message.v2.MentionCandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.message.v2.MentionCandidateMatchStrength} */ (reader.readEnum());
      msg.setStrength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.message.v2.MentionCandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.message.v2.MentionCandidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.message.v2.MentionCandidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.message.v2.MentionCandidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getStrength();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional airchat.user.v2.User user = 1;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.message.v2.MentionCandidate.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.message.v2.MentionCandidate} returns this
*/
proto.airchat.message.v2.MentionCandidate.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.message.v2.MentionCandidate} returns this
 */
proto.airchat.message.v2.MentionCandidate.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.message.v2.MentionCandidate.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MentionCandidateMatchStrength strength = 2;
 * @return {!proto.airchat.message.v2.MentionCandidateMatchStrength}
 */
proto.airchat.message.v2.MentionCandidate.prototype.getStrength = function() {
  return /** @type {!proto.airchat.message.v2.MentionCandidateMatchStrength} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.message.v2.MentionCandidateMatchStrength} value
 * @return {!proto.airchat.message.v2.MentionCandidate} returns this
 */
proto.airchat.message.v2.MentionCandidate.prototype.setStrength = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.airchat.message.v2.MentionCandidateMatchStrength = {
  MENTION_CANDIDATE_MATCH_STRENGTH_INVALID: 0,
  MENTION_CANDIDATE_MATCH_STRENGTH_KEEP_TRAY_CLOSED: 1,
  MENTION_CANDIDATE_MATCH_STRENGTH_OPEN_TRAY: 2,
  MENTION_CANDIDATE_MATCH_STRENGTH_AUTOSELECT: 3
};

/**
 * @enum {number}
 */
proto.airchat.message.v2.MessageMediaType = {
  MESSAGE_MEDIA_TYPE_INVALID: 0,
  MESSAGE_MEDIA_TYPE_AUDIO: 1,
  MESSAGE_MEDIA_TYPE_VIDEO: 2
};

/**
 * @enum {number}
 */
proto.airchat.message.v2.MessageEventType = {
  MESSAGE_EVENT_TYPE_INVALID: 0,
  MESSAGE_EVENT_TYPE_LISTEN: 1,
  MESSAGE_EVENT_TYPE_LIKE: 2,
  MESSAGE_EVENT_TYPE_UNLIKE: 3,
  MESSAGE_EVENT_TYPE_REPOST: 4,
  MESSAGE_EVENT_TYPE_UN_REPOST: 5,
  MESSAGE_EVENT_TYPE_VIEW: 6
};

/**
 * @enum {number}
 */
proto.airchat.message.v2.TranscriptionClient = {
  TRANSCRIPTION_CLIENT_INVALID: 0,
  TRANSCRIPTION_CLIENT_WHISPER: 1,
  TRANSCRIPTION_CLIENT_WHISPER_API: 2,
  TRANSCRIPTION_CLIENT_DEEPGRAM: 3,
  TRANSCRIPTION_CLIENT_ON_DEVICE: 4,
  TRANSCRIPTION_CLIENT_WHISPER_REPLICATE: 5
};

/**
 * @enum {number}
 */
proto.airchat.message.v2.TranscriptionStatus = {
  TRANSCRIPTION_STATUS_INVALID: 0,
  TRANSCRIPTION_STATUS_PENDING: 1,
  TRANSCRIPTION_STATUS_COMPLETED: 2,
  TRANSCRIPTION_STATUS_PARTIALLY_COMPLETED: 3
};

/**
 * @enum {number}
 */
proto.airchat.message.v2.MessageFeedItemType = {
  MESSAGE_FEED_ITEM_TYPE_INVALID: 0,
  MESSAGE_FEED_ITEM_TYPE_POST: 1,
  MESSAGE_FEED_ITEM_TYPE_THREAD: 2,
  MESSAGE_FEED_ITEM_TYPE_REPOST: 3
};

/**
 * @enum {number}
 */
proto.airchat.message.v2.MessageFeedItemAttributionType = {
  MESSAGE_FEED_ITEM_ATTRIBUTION_TYPE_INVALID: 0,
  MESSAGE_FEED_ITEM_ATTRIBUTION_TYPE_INVITED_BY: 1
};

goog.object.extend(exports, proto.airchat.message.v2);
