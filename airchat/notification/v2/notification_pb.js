// source: airchat/notification/v2/notification.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.airchat.notification.v2.ApnToken', null, global);
goog.exportSymbol('proto.airchat.notification.v2.FcmToken', null, global);
goog.exportSymbol(
  'proto.airchat.notification.v2.NewMessageNotificationLevel',
  null,
  global
);
goog.exportSymbol('proto.airchat.notification.v2.PushTokenState', null, global);
goog.exportSymbol(
  'proto.airchat.notification.v2.PushTokenStatus',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.ApnToken = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.ApnToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.ApnToken.displayName =
    'proto.airchat.notification.v2.ApnToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.FcmToken = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.FcmToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.FcmToken.displayName =
    'proto.airchat.notification.v2.FcmToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.PushTokenState = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.PushTokenState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.PushTokenState.displayName =
    'proto.airchat.notification.v2.PushTokenState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.notification.v2.ApnToken.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.notification.v2.ApnToken.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.notification.v2.ApnToken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.notification.v2.ApnToken.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
        bundleId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        locale: jspb.Message.getFieldWithDefault(msg, 3, ''),
        sandbox: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.ApnToken}
 */
proto.airchat.notification.v2.ApnToken.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.ApnToken();
  return proto.airchat.notification.v2.ApnToken.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.ApnToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.ApnToken}
 */
proto.airchat.notification.v2.ApnToken.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setBundleId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setLocale(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSandbox(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.ApnToken.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.ApnToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.ApnToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.ApnToken.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getBundleId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getSandbox();
  if (f) {
    writer.writeBool(4, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.airchat.notification.v2.ApnToken.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.ApnToken} returns this
 */
proto.airchat.notification.v2.ApnToken.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string bundle_id = 2;
 * @return {string}
 */
proto.airchat.notification.v2.ApnToken.prototype.getBundleId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.ApnToken} returns this
 */
proto.airchat.notification.v2.ApnToken.prototype.setBundleId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string locale = 3;
 * @return {string}
 */
proto.airchat.notification.v2.ApnToken.prototype.getLocale = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.ApnToken} returns this
 */
proto.airchat.notification.v2.ApnToken.prototype.setLocale = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool sandbox = 4;
 * @return {boolean}
 */
proto.airchat.notification.v2.ApnToken.prototype.getSandbox = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 4, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.airchat.notification.v2.ApnToken} returns this
 */
proto.airchat.notification.v2.ApnToken.prototype.setSandbox = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.notification.v2.FcmToken.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.notification.v2.FcmToken.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.notification.v2.FcmToken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.notification.v2.FcmToken.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
        packageName: jspb.Message.getFieldWithDefault(msg, 2, ''),
        locale: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.FcmToken}
 */
proto.airchat.notification.v2.FcmToken.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.FcmToken();
  return proto.airchat.notification.v2.FcmToken.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.FcmToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.FcmToken}
 */
proto.airchat.notification.v2.FcmToken.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPackageName(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setLocale(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.FcmToken.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.FcmToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.FcmToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.FcmToken.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPackageName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.airchat.notification.v2.FcmToken.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.FcmToken} returns this
 */
proto.airchat.notification.v2.FcmToken.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string package_name = 2;
 * @return {string}
 */
proto.airchat.notification.v2.FcmToken.prototype.getPackageName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.FcmToken} returns this
 */
proto.airchat.notification.v2.FcmToken.prototype.setPackageName = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string locale = 3;
 * @return {string}
 */
proto.airchat.notification.v2.FcmToken.prototype.getLocale = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.FcmToken} returns this
 */
proto.airchat.notification.v2.FcmToken.prototype.setLocale = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.notification.v2.PushTokenState.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.notification.v2.PushTokenState.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.notification.v2.PushTokenState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.notification.v2.PushTokenState.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        status: jspb.Message.getFieldWithDefault(msg, 2, 0),
        updatedTime:
          (f = msg.getUpdatedTime()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.PushTokenState}
 */
proto.airchat.notification.v2.PushTokenState.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.PushTokenState();
  return proto.airchat.notification.v2.PushTokenState.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.PushTokenState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.PushTokenState}
 */
proto.airchat.notification.v2.PushTokenState.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value =
            /** @type {!proto.airchat.notification.v2.PushTokenStatus} */ (
              reader.readEnum()
            );
          msg.setStatus(value);
          break;
        case 11:
          var value = new google_protobuf_timestamp_pb.Timestamp();
          reader.readMessage(
            value,
            google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
          );
          msg.setUpdatedTime(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.PushTokenState.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.notification.v2.PushTokenState.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.PushTokenState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.PushTokenState.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getStatus();
    if (f !== 0.0) {
      writer.writeEnum(2, f);
    }
    f = message.getUpdatedTime();
    if (f != null) {
      writer.writeMessage(
        11,
        f,
        google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
      );
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.notification.v2.PushTokenState.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.notification.v2.PushTokenState} returns this
 */
proto.airchat.notification.v2.PushTokenState.prototype.setUserId = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional PushTokenStatus status = 2;
 * @return {!proto.airchat.notification.v2.PushTokenStatus}
 */
proto.airchat.notification.v2.PushTokenState.prototype.getStatus = function () {
  return /** @type {!proto.airchat.notification.v2.PushTokenStatus} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};

/**
 * @param {!proto.airchat.notification.v2.PushTokenStatus} value
 * @return {!proto.airchat.notification.v2.PushTokenState} returns this
 */
proto.airchat.notification.v2.PushTokenState.prototype.setStatus = function (
  value
) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp updated_time = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.notification.v2.PushTokenState.prototype.getUpdatedTime =
  function () {
    return /** @type{?proto.google.protobuf.Timestamp} */ (
      jspb.Message.getWrapperField(
        this,
        google_protobuf_timestamp_pb.Timestamp,
        11
      )
    );
  };

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.notification.v2.PushTokenState} returns this
 */
proto.airchat.notification.v2.PushTokenState.prototype.setUpdatedTime =
  function (value) {
    return jspb.Message.setWrapperField(this, 11, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.notification.v2.PushTokenState} returns this
 */
proto.airchat.notification.v2.PushTokenState.prototype.clearUpdatedTime =
  function () {
    return this.setUpdatedTime(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.notification.v2.PushTokenState.prototype.hasUpdatedTime =
  function () {
    return jspb.Message.getField(this, 11) != null;
  };

/**
 * @enum {number}
 */
proto.airchat.notification.v2.PushTokenStatus = {
  PUSH_TOKEN_STATUS_INVALID: 0,
  PUSH_TOKEN_STATUS_OK: 1,
  PUSH_TOKEN_STATUS_BAD_TOKEN: 2
};

/**
 * @enum {number}
 */
proto.airchat.notification.v2.NewMessageNotificationLevel = {
  NEW_MESSAGE_NOTIFICATION_LEVEL_INVALID: 0,
  NEW_MESSAGE_NOTIFICATION_LEVEL_NONE: 1,
  NEW_MESSAGE_NOTIFICATION_LEVEL_REPLY_ONLY: 2,
  NEW_MESSAGE_NOTIFICATION_LEVEL_ALL: 3
};

goog.object.extend(exports, proto.airchat.notification.v2);
