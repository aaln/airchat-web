// source: airchat/notification/v2/notification_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_notification_v2_notification_pb = require('../../../airchat/notification/v2/notification_pb.js');
goog.object.extend(proto, airchat_notification_v2_notification_pb);
goog.exportSymbol('proto.airchat.notification.v2.ClearPushTokenRequest', null, global);
goog.exportSymbol('proto.airchat.notification.v2.ClearPushTokenResponse', null, global);
goog.exportSymbol('proto.airchat.notification.v2.GetPushTokenStateRequest', null, global);
goog.exportSymbol('proto.airchat.notification.v2.GetPushTokenStateResponse', null, global);
goog.exportSymbol('proto.airchat.notification.v2.SetPushTokenRequest', null, global);
goog.exportSymbol('proto.airchat.notification.v2.SetPushTokenRequest.TokenCase', null, global);
goog.exportSymbol('proto.airchat.notification.v2.SetPushTokenResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.SetPushTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.notification.v2.SetPushTokenRequest.oneofGroups_);
};
goog.inherits(proto.airchat.notification.v2.SetPushTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.SetPushTokenRequest.displayName = 'proto.airchat.notification.v2.SetPushTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.SetPushTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.SetPushTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.SetPushTokenResponse.displayName = 'proto.airchat.notification.v2.SetPushTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.ClearPushTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.ClearPushTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.ClearPushTokenRequest.displayName = 'proto.airchat.notification.v2.ClearPushTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.ClearPushTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.ClearPushTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.ClearPushTokenResponse.displayName = 'proto.airchat.notification.v2.ClearPushTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.GetPushTokenStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.GetPushTokenStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.GetPushTokenStateRequest.displayName = 'proto.airchat.notification.v2.GetPushTokenStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.notification.v2.GetPushTokenStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.notification.v2.GetPushTokenStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.notification.v2.GetPushTokenStateResponse.displayName = 'proto.airchat.notification.v2.GetPushTokenStateResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.notification.v2.SetPushTokenRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.airchat.notification.v2.SetPushTokenRequest.TokenCase = {
  TOKEN_NOT_SET: 0,
  APN_TOKEN: 1,
  FCM_TOKEN: 2
};

/**
 * @return {proto.airchat.notification.v2.SetPushTokenRequest.TokenCase}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.getTokenCase = function() {
  return /** @type {proto.airchat.notification.v2.SetPushTokenRequest.TokenCase} */(jspb.Message.computeOneofCase(this, proto.airchat.notification.v2.SetPushTokenRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.notification.v2.SetPushTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.notification.v2.SetPushTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.SetPushTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apnToken: (f = msg.getApnToken()) && airchat_notification_v2_notification_pb.ApnToken.toObject(includeInstance, f),
    fcmToken: (f = msg.getFcmToken()) && airchat_notification_v2_notification_pb.FcmToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.SetPushTokenRequest}
 */
proto.airchat.notification.v2.SetPushTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.SetPushTokenRequest;
  return proto.airchat.notification.v2.SetPushTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.SetPushTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.SetPushTokenRequest}
 */
proto.airchat.notification.v2.SetPushTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_notification_v2_notification_pb.ApnToken;
      reader.readMessage(value,airchat_notification_v2_notification_pb.ApnToken.deserializeBinaryFromReader);
      msg.setApnToken(value);
      break;
    case 2:
      var value = new airchat_notification_v2_notification_pb.FcmToken;
      reader.readMessage(value,airchat_notification_v2_notification_pb.FcmToken.deserializeBinaryFromReader);
      msg.setFcmToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.SetPushTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.SetPushTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.SetPushTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApnToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_notification_v2_notification_pb.ApnToken.serializeBinaryToWriter
    );
  }
  f = message.getFcmToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      airchat_notification_v2_notification_pb.FcmToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApnToken apn_token = 1;
 * @return {?proto.airchat.notification.v2.ApnToken}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.getApnToken = function() {
  return /** @type{?proto.airchat.notification.v2.ApnToken} */ (
    jspb.Message.getWrapperField(this, airchat_notification_v2_notification_pb.ApnToken, 1));
};


/**
 * @param {?proto.airchat.notification.v2.ApnToken|undefined} value
 * @return {!proto.airchat.notification.v2.SetPushTokenRequest} returns this
*/
proto.airchat.notification.v2.SetPushTokenRequest.prototype.setApnToken = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.airchat.notification.v2.SetPushTokenRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.notification.v2.SetPushTokenRequest} returns this
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.clearApnToken = function() {
  return this.setApnToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.hasApnToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FcmToken fcm_token = 2;
 * @return {?proto.airchat.notification.v2.FcmToken}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.getFcmToken = function() {
  return /** @type{?proto.airchat.notification.v2.FcmToken} */ (
    jspb.Message.getWrapperField(this, airchat_notification_v2_notification_pb.FcmToken, 2));
};


/**
 * @param {?proto.airchat.notification.v2.FcmToken|undefined} value
 * @return {!proto.airchat.notification.v2.SetPushTokenRequest} returns this
*/
proto.airchat.notification.v2.SetPushTokenRequest.prototype.setFcmToken = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.airchat.notification.v2.SetPushTokenRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.notification.v2.SetPushTokenRequest} returns this
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.clearFcmToken = function() {
  return this.setFcmToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.notification.v2.SetPushTokenRequest.prototype.hasFcmToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.notification.v2.SetPushTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.notification.v2.SetPushTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.notification.v2.SetPushTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.SetPushTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.SetPushTokenResponse}
 */
proto.airchat.notification.v2.SetPushTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.SetPushTokenResponse;
  return proto.airchat.notification.v2.SetPushTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.SetPushTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.SetPushTokenResponse}
 */
proto.airchat.notification.v2.SetPushTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.SetPushTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.SetPushTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.SetPushTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.SetPushTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.notification.v2.ClearPushTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.notification.v2.ClearPushTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.notification.v2.ClearPushTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.ClearPushTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.ClearPushTokenRequest}
 */
proto.airchat.notification.v2.ClearPushTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.ClearPushTokenRequest;
  return proto.airchat.notification.v2.ClearPushTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.ClearPushTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.ClearPushTokenRequest}
 */
proto.airchat.notification.v2.ClearPushTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.ClearPushTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.ClearPushTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.ClearPushTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.ClearPushTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.notification.v2.ClearPushTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.notification.v2.ClearPushTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.notification.v2.ClearPushTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.ClearPushTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.ClearPushTokenResponse}
 */
proto.airchat.notification.v2.ClearPushTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.ClearPushTokenResponse;
  return proto.airchat.notification.v2.ClearPushTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.ClearPushTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.ClearPushTokenResponse}
 */
proto.airchat.notification.v2.ClearPushTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.ClearPushTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.ClearPushTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.ClearPushTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.ClearPushTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.notification.v2.GetPushTokenStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.notification.v2.GetPushTokenStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.notification.v2.GetPushTokenStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.GetPushTokenStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.GetPushTokenStateRequest}
 */
proto.airchat.notification.v2.GetPushTokenStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.GetPushTokenStateRequest;
  return proto.airchat.notification.v2.GetPushTokenStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.GetPushTokenStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.GetPushTokenStateRequest}
 */
proto.airchat.notification.v2.GetPushTokenStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.GetPushTokenStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.GetPushTokenStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.GetPushTokenStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.GetPushTokenStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.notification.v2.GetPushTokenStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.notification.v2.GetPushTokenStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && airchat_notification_v2_notification_pb.PushTokenState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.notification.v2.GetPushTokenStateResponse}
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.notification.v2.GetPushTokenStateResponse;
  return proto.airchat.notification.v2.GetPushTokenStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.notification.v2.GetPushTokenStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.notification.v2.GetPushTokenStateResponse}
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_notification_v2_notification_pb.PushTokenState;
      reader.readMessage(value,airchat_notification_v2_notification_pb.PushTokenState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.notification.v2.GetPushTokenStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.notification.v2.GetPushTokenStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_notification_v2_notification_pb.PushTokenState.serializeBinaryToWriter
    );
  }
};


/**
 * optional PushTokenState state = 1;
 * @return {?proto.airchat.notification.v2.PushTokenState}
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.prototype.getState = function() {
  return /** @type{?proto.airchat.notification.v2.PushTokenState} */ (
    jspb.Message.getWrapperField(this, airchat_notification_v2_notification_pb.PushTokenState, 1));
};


/**
 * @param {?proto.airchat.notification.v2.PushTokenState|undefined} value
 * @return {!proto.airchat.notification.v2.GetPushTokenStateResponse} returns this
*/
proto.airchat.notification.v2.GetPushTokenStateResponse.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.notification.v2.GetPushTokenStateResponse} returns this
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.notification.v2.GetPushTokenStateResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.airchat.notification.v2);
