// source: airchat/activity/v2/activity_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_activity_v2_activity_pb = require('../../../airchat/activity/v2/activity_pb.js');
goog.object.extend(proto, airchat_activity_v2_activity_pb);
var airchat_message_v2_message_pb = require('../../../airchat/message/v2/message_pb.js');
goog.object.extend(proto, airchat_message_v2_message_pb);
var airchat_user_v2_user_pb = require('../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
goog.exportSymbol('proto.airchat.activity.v2.ClearNewActivityCounterRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ClearNewActivityCounterResponse', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetActivityItemUsersRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetActivityItemUsersResponse', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetActivityLogRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetActivityLogResponse', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetNewActivityCounterRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetNewActivityCounterResponse', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetNormalizedActivityLogRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.GetNormalizedActivityLogResponse', null, global);
goog.exportSymbol('proto.airchat.activity.v2.MarkActivityItemsSeenRequest', null, global);
goog.exportSymbol('proto.airchat.activity.v2.MarkActivityItemsSeenResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetActivityLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.GetActivityLogRequest.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.GetActivityLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetActivityLogRequest.displayName = 'proto.airchat.activity.v2.GetActivityLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetActivityLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.GetActivityLogResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.GetActivityLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetActivityLogResponse.displayName = 'proto.airchat.activity.v2.GetActivityLogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.GetNormalizedActivityLogRequest.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.GetNormalizedActivityLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetNormalizedActivityLogRequest.displayName = 'proto.airchat.activity.v2.GetNormalizedActivityLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.GetNormalizedActivityLogResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.GetNormalizedActivityLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetNormalizedActivityLogResponse.displayName = 'proto.airchat.activity.v2.GetNormalizedActivityLogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.GetActivityItemUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetActivityItemUsersRequest.displayName = 'proto.airchat.activity.v2.GetActivityItemUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.GetActivityItemUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetActivityItemUsersResponse.displayName = 'proto.airchat.activity.v2.GetActivityItemUsersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.GetNewActivityCounterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetNewActivityCounterRequest.displayName = 'proto.airchat.activity.v2.GetNewActivityCounterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.GetNewActivityCounterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetNewActivityCounterResponse.displayName = 'proto.airchat.activity.v2.GetNewActivityCounterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.ClearNewActivityCounterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ClearNewActivityCounterRequest.displayName = 'proto.airchat.activity.v2.ClearNewActivityCounterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.ClearNewActivityCounterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ClearNewActivityCounterResponse.displayName = 'proto.airchat.activity.v2.ClearNewActivityCounterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.MarkActivityItemsSeenRequest.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.MarkActivityItemsSeenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.MarkActivityItemsSeenRequest.displayName = 'proto.airchat.activity.v2.MarkActivityItemsSeenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.MarkActivityItemsSeenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.MarkActivityItemsSeenResponse.displayName = 'proto.airchat.activity.v2.MarkActivityItemsSeenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.displayName = 'proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.displayName = 'proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.GetActivityLogRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetActivityLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetActivityLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activityTypesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetActivityLogRequest}
 */
proto.airchat.activity.v2.GetActivityLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetActivityLogRequest;
  return proto.airchat.activity.v2.GetActivityLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetActivityLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetActivityLogRequest}
 */
proto.airchat.activity.v2.GetActivityLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageKey(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.airchat.activity.v2.ActivityType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActivityTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetActivityLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetActivityLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActivityTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string page_key = 1;
 * @return {string}
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.getPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.GetActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.setPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ActivityType activity_types = 2;
 * @return {!Array<!proto.airchat.activity.v2.ActivityType>}
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.getActivityTypesList = function() {
  return /** @type {!Array<!proto.airchat.activity.v2.ActivityType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.ActivityType>} value
 * @return {!proto.airchat.activity.v2.GetActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.setActivityTypesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.airchat.activity.v2.ActivityType} value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.GetActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.addActivityTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.GetActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetActivityLogRequest.prototype.clearActivityTypesList = function() {
  return this.setActivityTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.GetActivityLogResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetActivityLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetActivityLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    logItemList: jspb.Message.toObjectList(msg.getLogItemList(),
    airchat_activity_v2_activity_pb.ActivityLogItem.toObject, includeInstance),
    nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetActivityLogResponse}
 */
proto.airchat.activity.v2.GetActivityLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetActivityLogResponse;
  return proto.airchat.activity.v2.GetActivityLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetActivityLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetActivityLogResponse}
 */
proto.airchat.activity.v2.GetActivityLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_activity_v2_activity_pb.ActivityLogItem;
      reader.readMessage(value,airchat_activity_v2_activity_pb.ActivityLogItem.deserializeBinaryFromReader);
      msg.addLogItem(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetActivityLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetActivityLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_activity_v2_activity_pb.ActivityLogItem.serializeBinaryToWriter
    );
  }
  f = message.getNextPageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated ActivityLogItem log_item = 1;
 * @return {!Array<!proto.airchat.activity.v2.ActivityLogItem>}
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.getLogItemList = function() {
  return /** @type{!Array<!proto.airchat.activity.v2.ActivityLogItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_activity_v2_activity_pb.ActivityLogItem, 1));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.ActivityLogItem>} value
 * @return {!proto.airchat.activity.v2.GetActivityLogResponse} returns this
*/
proto.airchat.activity.v2.GetActivityLogResponse.prototype.setLogItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.activity.v2.ActivityLogItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.ActivityLogItem}
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.addLogItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.activity.v2.ActivityLogItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.GetActivityLogResponse} returns this
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.clearLogItemList = function() {
  return this.setLogItemList([]);
};


/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.getNextPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.GetActivityLogResponse} returns this
 */
proto.airchat.activity.v2.GetActivityLogResponse.prototype.setNextPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetNormalizedActivityLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activityTypesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetNormalizedActivityLogRequest;
  return proto.airchat.activity.v2.GetNormalizedActivityLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageKey(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.airchat.activity.v2.ActivityType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActivityTypes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetNormalizedActivityLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActivityTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string page_key = 1;
 * @return {string}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.getPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.setPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ActivityType activity_types = 2;
 * @return {!Array<!proto.airchat.activity.v2.ActivityType>}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.getActivityTypesList = function() {
  return /** @type {!Array<!proto.airchat.activity.v2.ActivityType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.ActivityType>} value
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.setActivityTypesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.airchat.activity.v2.ActivityType} value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.addActivityTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogRequest} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogRequest.prototype.clearActivityTypesList = function() {
  return this.setActivityTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetNormalizedActivityLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    logItemList: jspb.Message.toObjectList(msg.getLogItemList(),
    airchat_activity_v2_activity_pb.NormalizedActivityLogItem.toObject, includeInstance),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    messageList: jspb.Message.toObjectList(msg.getMessageList(),
    airchat_message_v2_message_pb.Message.toObject, includeInstance),
    nextPageKey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetNormalizedActivityLogResponse;
  return proto.airchat.activity.v2.GetNormalizedActivityLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_activity_v2_activity_pb.NormalizedActivityLogItem;
      reader.readMessage(value,airchat_activity_v2_activity_pb.NormalizedActivityLogItem.deserializeBinaryFromReader);
      msg.addLogItem(value);
      break;
    case 2:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 3:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.addMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetNormalizedActivityLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_activity_v2_activity_pb.NormalizedActivityLogItem.serializeBinaryToWriter
    );
  }
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getNextPageKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated NormalizedActivityLogItem log_item = 1;
 * @return {!Array<!proto.airchat.activity.v2.NormalizedActivityLogItem>}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.getLogItemList = function() {
  return /** @type{!Array<!proto.airchat.activity.v2.NormalizedActivityLogItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_activity_v2_activity_pb.NormalizedActivityLogItem, 1));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.NormalizedActivityLogItem>} value
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
*/
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.setLogItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.addLogItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.activity.v2.NormalizedActivityLogItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.clearLogItemList = function() {
  return this.setLogItemList([]);
};


/**
 * repeated airchat.user.v2.User user = 2;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.getUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 2));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
*/
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.clearUserList = function() {
  return this.setUserList([]);
};


/**
 * repeated airchat.message.v2.Message message = 3;
 * @return {!Array<!proto.airchat.message.v2.Message>}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.getMessageList = function() {
  return /** @type{!Array<!proto.airchat.message.v2.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_message_v2_message_pb.Message, 3));
};


/**
 * @param {!Array<!proto.airchat.message.v2.Message>} value
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
*/
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.setMessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.airchat.message.v2.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.Message}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.addMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.airchat.message.v2.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.clearMessageList = function() {
  return this.setMessageList([]);
};


/**
 * optional string next_page_key = 4;
 * @return {string}
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.getNextPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.GetNormalizedActivityLogResponse} returns this
 */
proto.airchat.activity.v2.GetNormalizedActivityLogResponse.prototype.setNextPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetActivityItemUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetActivityItemUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersRequest}
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetActivityItemUsersRequest;
  return proto.airchat.activity.v2.GetActivityItemUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetActivityItemUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersRequest}
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetActivityItemUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetActivityItemUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string activity_id = 1;
 * @return {string}
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.prototype.getActivityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersRequest} returns this
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.prototype.setActivityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string page_key = 2;
 * @return {string}
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.prototype.getPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersRequest} returns this
 */
proto.airchat.activity.v2.GetActivityItemUsersRequest.prototype.setPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetActivityItemUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetActivityItemUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityItemUsers: (f = msg.getActivityItemUsers()) && airchat_activity_v2_activity_pb.ActivityLogItemUsers.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersResponse}
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetActivityItemUsersResponse;
  return proto.airchat.activity.v2.GetActivityItemUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetActivityItemUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersResponse}
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_activity_v2_activity_pb.ActivityLogItemUsers;
      reader.readMessage(value,airchat_activity_v2_activity_pb.ActivityLogItemUsers.deserializeBinaryFromReader);
      msg.setActivityItemUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetActivityItemUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetActivityItemUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityItemUsers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_activity_v2_activity_pb.ActivityLogItemUsers.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActivityLogItemUsers activity_item_users = 1;
 * @return {?proto.airchat.activity.v2.ActivityLogItemUsers}
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.prototype.getActivityItemUsers = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityLogItemUsers} */ (
    jspb.Message.getWrapperField(this, airchat_activity_v2_activity_pb.ActivityLogItemUsers, 1));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityLogItemUsers|undefined} value
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersResponse} returns this
*/
proto.airchat.activity.v2.GetActivityItemUsersResponse.prototype.setActivityItemUsers = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.GetActivityItemUsersResponse} returns this
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.prototype.clearActivityItemUsers = function() {
  return this.setActivityItemUsers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.GetActivityItemUsersResponse.prototype.hasActivityItemUsers = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetNewActivityCounterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetNewActivityCounterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetNewActivityCounterRequest}
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetNewActivityCounterRequest;
  return proto.airchat.activity.v2.GetNewActivityCounterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetNewActivityCounterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetNewActivityCounterRequest}
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetNewActivityCounterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetNewActivityCounterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNewActivityCounterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetNewActivityCounterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetNewActivityCounterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newActivityItems: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetNewActivityCounterResponse}
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetNewActivityCounterResponse;
  return proto.airchat.activity.v2.GetNewActivityCounterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetNewActivityCounterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetNewActivityCounterResponse}
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNewActivityItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetNewActivityCounterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetNewActivityCounterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewActivityItems();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 new_activity_items = 1;
 * @return {number}
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.prototype.getNewActivityItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.activity.v2.GetNewActivityCounterResponse} returns this
 */
proto.airchat.activity.v2.GetNewActivityCounterResponse.prototype.setNewActivityItems = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ClearNewActivityCounterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ClearNewActivityCounterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ClearNewActivityCounterRequest}
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ClearNewActivityCounterRequest;
  return proto.airchat.activity.v2.ClearNewActivityCounterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ClearNewActivityCounterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ClearNewActivityCounterRequest}
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ClearNewActivityCounterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ClearNewActivityCounterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ClearNewActivityCounterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ClearNewActivityCounterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ClearNewActivityCounterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ClearNewActivityCounterResponse}
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ClearNewActivityCounterResponse;
  return proto.airchat.activity.v2.ClearNewActivityCounterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ClearNewActivityCounterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ClearNewActivityCounterResponse}
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ClearNewActivityCounterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ClearNewActivityCounterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ClearNewActivityCounterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.MarkActivityItemsSeenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifierList: jspb.Message.toObjectList(msg.getIdentifierList(),
    airchat_activity_v2_activity_pb.ActivityItemIdentifier.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.MarkActivityItemsSeenRequest;
  return proto.airchat.activity.v2.MarkActivityItemsSeenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_activity_v2_activity_pb.ActivityItemIdentifier;
      reader.readMessage(value,airchat_activity_v2_activity_pb.ActivityItemIdentifier.deserializeBinaryFromReader);
      msg.addIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.MarkActivityItemsSeenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifierList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_activity_v2_activity_pb.ActivityItemIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActivityItemIdentifier identifier = 1;
 * @return {!Array<!proto.airchat.activity.v2.ActivityItemIdentifier>}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.prototype.getIdentifierList = function() {
  return /** @type{!Array<!proto.airchat.activity.v2.ActivityItemIdentifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_activity_v2_activity_pb.ActivityItemIdentifier, 1));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.ActivityItemIdentifier>} value
 * @return {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest} returns this
*/
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.prototype.setIdentifierList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.activity.v2.ActivityItemIdentifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.ActivityItemIdentifier}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.prototype.addIdentifier = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.activity.v2.ActivityItemIdentifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.MarkActivityItemsSeenRequest} returns this
 */
proto.airchat.activity.v2.MarkActivityItemsSeenRequest.prototype.clearIdentifierList = function() {
  return this.setIdentifierList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.MarkActivityItemsSeenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.MarkActivityItemsSeenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.MarkActivityItemsSeenResponse}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.MarkActivityItemsSeenResponse;
  return proto.airchat.activity.v2.MarkActivityItemsSeenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.MarkActivityItemsSeenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.MarkActivityItemsSeenResponse}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.MarkActivityItemsSeenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.MarkActivityItemsSeenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.MarkActivityItemsSeenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinate: (f = msg.getCoordinate()) && airchat_activity_v2_activity_pb.ActivityCoordinate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest;
  return proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_activity_v2_activity_pb.ActivityCoordinate;
      reader.readMessage(value,airchat_activity_v2_activity_pb.ActivityCoordinate.deserializeBinaryFromReader);
      msg.setCoordinate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoordinate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_activity_v2_activity_pb.ActivityCoordinate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActivityCoordinate coordinate = 1;
 * @return {?proto.airchat.activity.v2.ActivityCoordinate}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.prototype.getCoordinate = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityCoordinate} */ (
    jspb.Message.getWrapperField(this, airchat_activity_v2_activity_pb.ActivityCoordinate, 1));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityCoordinate|undefined} value
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest} returns this
*/
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.prototype.setCoordinate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest} returns this
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.prototype.clearCoordinate = function() {
  return this.setCoordinate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateRequest.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && airchat_activity_v2_activity_pb.ActivityLogItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse;
  return proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_activity_v2_activity_pb.ActivityLogItem;
      reader.readMessage(value,airchat_activity_v2_activity_pb.ActivityLogItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_activity_v2_activity_pb.ActivityLogItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActivityLogItem item = 1;
 * @return {?proto.airchat.activity.v2.ActivityLogItem}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.prototype.getItem = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityLogItem} */ (
    jspb.Message.getWrapperField(this, airchat_activity_v2_activity_pb.ActivityLogItem, 1));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityLogItem|undefined} value
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse} returns this
*/
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse} returns this
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.GetLatestActivityItemByCoordinateResponse.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.airchat.activity.v2);
