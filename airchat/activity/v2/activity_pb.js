// source: airchat/activity/v2/activity.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var airchat_message_v2_message_pb = require('../../../airchat/message/v2/message_pb.js');
goog.object.extend(proto, airchat_message_v2_message_pb);
var airchat_user_v2_user_pb = require('../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
goog.exportSymbol('proto.airchat.activity.v2.ActivityCoordinate', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityItem', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityItemIdentifier', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityLogItem', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityLogItemReference', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityLogItemReference.ReferenceCase', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityLogItemUsers', null, global);
goog.exportSymbol('proto.airchat.activity.v2.ActivityType', null, global);
goog.exportSymbol('proto.airchat.activity.v2.NormalizedActivityLogItem', null, global);
goog.exportSymbol('proto.airchat.activity.v2.NormalizedActivityLogItemReference', null, global);
goog.exportSymbol('proto.airchat.activity.v2.NormalizedActivityLogItemReference.ReferenceCase', null, global);
goog.exportSymbol('proto.airchat.activity.v2.NormalizedActivityLogItemUsers', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ActivityItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.ActivityItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ActivityItem.displayName = 'proto.airchat.activity.v2.ActivityItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.NormalizedActivityLogItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.NormalizedActivityLogItem.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.NormalizedActivityLogItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.NormalizedActivityLogItem.displayName = 'proto.airchat.activity.v2.NormalizedActivityLogItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.NormalizedActivityLogItemUsers.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.NormalizedActivityLogItemUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.NormalizedActivityLogItemUsers.displayName = 'proto.airchat.activity.v2.NormalizedActivityLogItemUsers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.activity.v2.NormalizedActivityLogItemReference.oneofGroups_);
};
goog.inherits(proto.airchat.activity.v2.NormalizedActivityLogItemReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.NormalizedActivityLogItemReference.displayName = 'proto.airchat.activity.v2.NormalizedActivityLogItemReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ActivityLogItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.ActivityLogItem.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.ActivityLogItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ActivityLogItem.displayName = 'proto.airchat.activity.v2.ActivityLogItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ActivityItemIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.ActivityItemIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ActivityItemIdentifier.displayName = 'proto.airchat.activity.v2.ActivityItemIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ActivityLogItemReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.activity.v2.ActivityLogItemReference.oneofGroups_);
};
goog.inherits(proto.airchat.activity.v2.ActivityLogItemReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ActivityLogItemReference.displayName = 'proto.airchat.activity.v2.ActivityLogItemReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ActivityCoordinate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.activity.v2.ActivityCoordinate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ActivityCoordinate.displayName = 'proto.airchat.activity.v2.ActivityCoordinate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.activity.v2.ActivityLogItemUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.activity.v2.ActivityLogItemUsers.repeatedFields_, null);
};
goog.inherits(proto.airchat.activity.v2.ActivityLogItemUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.activity.v2.ActivityLogItemUsers.displayName = 'proto.airchat.activity.v2.ActivityLogItemUsers';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ActivityItem.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ActivityItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ActivityItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventTime: (f = msg.getEventTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    recordingId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    user: (f = msg.getUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f),
    activityId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    referenceRecordingId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    replyRecordingId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    participantMessageGap: jspb.Message.getFieldWithDefault(msg, 9, 0),
    seen: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    identifier: (f = msg.getIdentifier()) && proto.airchat.activity.v2.ActivityItemIdentifier.toObject(includeInstance, f),
    privateRoomId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ActivityItem}
 */
proto.airchat.activity.v2.ActivityItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ActivityItem;
  return proto.airchat.activity.v2.ActivityItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ActivityItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ActivityItem}
 */
proto.airchat.activity.v2.ActivityItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEventTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordingId(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.activity.v2.ActivityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceRecordingId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplyRecordingId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParticipantMessageGap(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSeen(value);
      break;
    case 11:
      var value = new proto.airchat.activity.v2.ActivityItemIdentifier;
      reader.readMessage(value,proto.airchat.activity.v2.ActivityItemIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRoomId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ActivityItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ActivityItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ActivityItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRecordingId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getActivityId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReferenceRecordingId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReplyRecordingId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getParticipantMessageGap();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSeen();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.airchat.activity.v2.ActivityItemIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPrivateRoomId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp event_time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getEventTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
*/
proto.airchat.activity.v2.ActivityItem.prototype.setEventTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.clearEventTime = function() {
  return this.setEventTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityItem.prototype.hasEventTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string recording_id = 2;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ActivityType type = 3;
 * @return {!proto.airchat.activity.v2.ActivityType}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getType = function() {
  return /** @type {!proto.airchat.activity.v2.ActivityType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.activity.v2.ActivityType} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional airchat.user.v2.User user = 4;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 4));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
*/
proto.airchat.activity.v2.ActivityItem.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityItem.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string activity_id = 5;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getActivityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setActivityId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string reference_recording_id = 6;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getReferenceRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setReferenceRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string message_thread_id = 7;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string reply_recording_id = 8;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getReplyRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setReplyRecordingId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 participant_message_gap = 9;
 * @return {number}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getParticipantMessageGap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setParticipantMessageGap = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool seen = 10;
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getSeen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setSeen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional ActivityItemIdentifier identifier = 11;
 * @return {?proto.airchat.activity.v2.ActivityItemIdentifier}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getIdentifier = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityItemIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.airchat.activity.v2.ActivityItemIdentifier, 11));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityItemIdentifier|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
*/
proto.airchat.activity.v2.ActivityItem.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityItem.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string private_room_id = 12;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getPrivateRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setPrivateRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string channel_id = 13;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItem.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItem} returns this
 */
proto.airchat.activity.v2.ActivityItem.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.NormalizedActivityLogItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventTime: (f = msg.getEventTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    totalUsers: jspb.Message.getFieldWithDefault(msg, 4, 0),
    users: (f = msg.getUsers()) && proto.airchat.activity.v2.NormalizedActivityLogItemUsers.toObject(includeInstance, f),
    referenceIdsList: jspb.Message.toObjectList(msg.getReferenceIdsList(),
    proto.airchat.activity.v2.NormalizedActivityLogItemReference.toObject, includeInstance),
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    participantMessageGap: jspb.Message.getFieldWithDefault(msg, 8, 0),
    seen: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    identifier: (f = msg.getIdentifier()) && proto.airchat.activity.v2.ActivityItemIdentifier.toObject(includeInstance, f),
    privateRoomId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.NormalizedActivityLogItem;
  return proto.airchat.activity.v2.NormalizedActivityLogItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityId(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.activity.v2.ActivityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEventTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalUsers(value);
      break;
    case 5:
      var value = new proto.airchat.activity.v2.NormalizedActivityLogItemUsers;
      reader.readMessage(value,proto.airchat.activity.v2.NormalizedActivityLogItemUsers.deserializeBinaryFromReader);
      msg.setUsers(value);
      break;
    case 6:
      var value = new proto.airchat.activity.v2.NormalizedActivityLogItemReference;
      reader.readMessage(value,proto.airchat.activity.v2.NormalizedActivityLogItemReference.deserializeBinaryFromReader);
      msg.addReferenceIds(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParticipantMessageGap(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSeen(value);
      break;
    case 10:
      var value = new proto.airchat.activity.v2.ActivityItemIdentifier;
      reader.readMessage(value,proto.airchat.activity.v2.ActivityItemIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.NormalizedActivityLogItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEventTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTotalUsers();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUsers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.airchat.activity.v2.NormalizedActivityLogItemUsers.serializeBinaryToWriter
    );
  }
  f = message.getReferenceIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.airchat.activity.v2.NormalizedActivityLogItemReference.serializeBinaryToWriter
    );
  }
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getParticipantMessageGap();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSeen();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.airchat.activity.v2.ActivityItemIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPrivateRoomId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string activity_id = 1;
 * @return {string}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getActivityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setActivityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActivityType type = 2;
 * @return {!proto.airchat.activity.v2.ActivityType}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getType = function() {
  return /** @type {!proto.airchat.activity.v2.ActivityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.activity.v2.ActivityType} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp event_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getEventTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
*/
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setEventTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.clearEventTime = function() {
  return this.setEventTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.hasEventTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 total_users = 4;
 * @return {number}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getTotalUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setTotalUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional NormalizedActivityLogItemUsers users = 5;
 * @return {?proto.airchat.activity.v2.NormalizedActivityLogItemUsers}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getUsers = function() {
  return /** @type{?proto.airchat.activity.v2.NormalizedActivityLogItemUsers} */ (
    jspb.Message.getWrapperField(this, proto.airchat.activity.v2.NormalizedActivityLogItemUsers, 5));
};


/**
 * @param {?proto.airchat.activity.v2.NormalizedActivityLogItemUsers|undefined} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
*/
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setUsers = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.clearUsers = function() {
  return this.setUsers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.hasUsers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated NormalizedActivityLogItemReference reference_ids = 6;
 * @return {!Array<!proto.airchat.activity.v2.NormalizedActivityLogItemReference>}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getReferenceIdsList = function() {
  return /** @type{!Array<!proto.airchat.activity.v2.NormalizedActivityLogItemReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.activity.v2.NormalizedActivityLogItemReference, 6));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.NormalizedActivityLogItemReference>} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
*/
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setReferenceIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemReference}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.addReferenceIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.airchat.activity.v2.NormalizedActivityLogItemReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.clearReferenceIdsList = function() {
  return this.setReferenceIdsList([]);
};


/**
 * optional string message_thread_id = 7;
 * @return {string}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 participant_message_gap = 8;
 * @return {number}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getParticipantMessageGap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setParticipantMessageGap = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool seen = 9;
 * @return {boolean}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getSeen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setSeen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional ActivityItemIdentifier identifier = 10;
 * @return {?proto.airchat.activity.v2.ActivityItemIdentifier}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getIdentifier = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityItemIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.airchat.activity.v2.ActivityItemIdentifier, 10));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityItemIdentifier|undefined} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
*/
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string private_room_id = 11;
 * @return {string}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getPrivateRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setPrivateRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string channel_id = 12;
 * @return {string}
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItem} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItem.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.NormalizedActivityLogItemUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.NormalizedActivityLogItemUsers;
  return proto.airchat.activity.v2.NormalizedActivityLogItemUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.NormalizedActivityLogItemUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getNextPageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string user_id = 1;
 * @return {!Array<string>}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.getUserIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.setUserIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.addUserId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.clearUserIdList = function() {
  return this.setUserIdList([]);
};


/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.getNextPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemUsers} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItemUsers.prototype.setNextPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.ReferenceCase = {
  REFERENCE_NOT_SET: 0,
  MESSAGE_RECORDING_ID: 1
};

/**
 * @return {proto.airchat.activity.v2.NormalizedActivityLogItemReference.ReferenceCase}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.getReferenceCase = function() {
  return /** @type {proto.airchat.activity.v2.NormalizedActivityLogItemReference.ReferenceCase} */(jspb.Message.computeOneofCase(this, proto.airchat.activity.v2.NormalizedActivityLogItemReference.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.NormalizedActivityLogItemReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageRecordingId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemReference}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.NormalizedActivityLogItemReference;
  return proto.airchat.activity.v2.NormalizedActivityLogItemReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemReference}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.NormalizedActivityLogItemReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.NormalizedActivityLogItemReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message_recording_id = 1;
 * @return {string}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.getMessageRecordingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemReference} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.setMessageRecordingId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.airchat.activity.v2.NormalizedActivityLogItemReference.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.activity.v2.NormalizedActivityLogItemReference} returns this
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.clearMessageRecordingId = function() {
  return jspb.Message.setOneofField(this, 1, proto.airchat.activity.v2.NormalizedActivityLogItemReference.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.NormalizedActivityLogItemReference.prototype.hasMessageRecordingId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.ActivityLogItem.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ActivityLogItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ActivityLogItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityLogItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventTime: (f = msg.getEventTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    totalUsers: jspb.Message.getFieldWithDefault(msg, 4, 0),
    users: (f = msg.getUsers()) && proto.airchat.activity.v2.ActivityLogItemUsers.toObject(includeInstance, f),
    referencesList: jspb.Message.toObjectList(msg.getReferencesList(),
    proto.airchat.activity.v2.ActivityLogItemReference.toObject, includeInstance),
    messageThreadId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    participantMessageGap: jspb.Message.getFieldWithDefault(msg, 8, 0),
    seen: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    identifier: (f = msg.getIdentifier()) && proto.airchat.activity.v2.ActivityItemIdentifier.toObject(includeInstance, f),
    privateRoomId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ActivityLogItem}
 */
proto.airchat.activity.v2.ActivityLogItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ActivityLogItem;
  return proto.airchat.activity.v2.ActivityLogItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ActivityLogItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ActivityLogItem}
 */
proto.airchat.activity.v2.ActivityLogItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityId(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.activity.v2.ActivityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEventTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalUsers(value);
      break;
    case 5:
      var value = new proto.airchat.activity.v2.ActivityLogItemUsers;
      reader.readMessage(value,proto.airchat.activity.v2.ActivityLogItemUsers.deserializeBinaryFromReader);
      msg.setUsers(value);
      break;
    case 6:
      var value = new proto.airchat.activity.v2.ActivityLogItemReference;
      reader.readMessage(value,proto.airchat.activity.v2.ActivityLogItemReference.deserializeBinaryFromReader);
      msg.addReferences(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageThreadId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParticipantMessageGap(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSeen(value);
      break;
    case 10:
      var value = new proto.airchat.activity.v2.ActivityItemIdentifier;
      reader.readMessage(value,proto.airchat.activity.v2.ActivityItemIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ActivityLogItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ActivityLogItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityLogItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEventTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTotalUsers();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUsers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.airchat.activity.v2.ActivityLogItemUsers.serializeBinaryToWriter
    );
  }
  f = message.getReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.airchat.activity.v2.ActivityLogItemReference.serializeBinaryToWriter
    );
  }
  f = message.getMessageThreadId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getParticipantMessageGap();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSeen();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.airchat.activity.v2.ActivityItemIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPrivateRoomId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string activity_id = 1;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getActivityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setActivityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActivityType type = 2;
 * @return {!proto.airchat.activity.v2.ActivityType}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getType = function() {
  return /** @type {!proto.airchat.activity.v2.ActivityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.activity.v2.ActivityType} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp event_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getEventTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
*/
proto.airchat.activity.v2.ActivityLogItem.prototype.setEventTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.clearEventTime = function() {
  return this.setEventTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.hasEventTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 total_users = 4;
 * @return {number}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getTotalUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setTotalUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ActivityLogItemUsers users = 5;
 * @return {?proto.airchat.activity.v2.ActivityLogItemUsers}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getUsers = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityLogItemUsers} */ (
    jspb.Message.getWrapperField(this, proto.airchat.activity.v2.ActivityLogItemUsers, 5));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityLogItemUsers|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
*/
proto.airchat.activity.v2.ActivityLogItem.prototype.setUsers = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.clearUsers = function() {
  return this.setUsers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.hasUsers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated ActivityLogItemReference references = 6;
 * @return {!Array<!proto.airchat.activity.v2.ActivityLogItemReference>}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getReferencesList = function() {
  return /** @type{!Array<!proto.airchat.activity.v2.ActivityLogItemReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.airchat.activity.v2.ActivityLogItemReference, 6));
};


/**
 * @param {!Array<!proto.airchat.activity.v2.ActivityLogItemReference>} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
*/
proto.airchat.activity.v2.ActivityLogItem.prototype.setReferencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.airchat.activity.v2.ActivityLogItemReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.activity.v2.ActivityLogItemReference}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.addReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.airchat.activity.v2.ActivityLogItemReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.clearReferencesList = function() {
  return this.setReferencesList([]);
};


/**
 * optional string message_thread_id = 7;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getMessageThreadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 participant_message_gap = 8;
 * @return {number}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getParticipantMessageGap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setParticipantMessageGap = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool seen = 9;
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getSeen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setSeen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional ActivityItemIdentifier identifier = 10;
 * @return {?proto.airchat.activity.v2.ActivityItemIdentifier}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getIdentifier = function() {
  return /** @type{?proto.airchat.activity.v2.ActivityItemIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.airchat.activity.v2.ActivityItemIdentifier, 10));
};


/**
 * @param {?proto.airchat.activity.v2.ActivityItemIdentifier|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
*/
proto.airchat.activity.v2.ActivityLogItem.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string private_room_id = 11;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getPrivateRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setPrivateRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string channel_id = 12;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityLogItem} returns this
 */
proto.airchat.activity.v2.ActivityLogItem.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ActivityItemIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ActivityItemIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityItemIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    originalEventTime: (f = msg.getOriginalEventTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ActivityItemIdentifier}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ActivityItemIdentifier;
  return proto.airchat.activity.v2.ActivityItemIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ActivityItemIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ActivityItemIdentifier}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoordinate(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setOriginalEventTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ActivityItemIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ActivityItemIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityItemIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoordinate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOriginalEventTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string coordinate = 1;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.getCoordinate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityItemIdentifier} returns this
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.setCoordinate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp original_event_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.getOriginalEventTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityItemIdentifier} returns this
*/
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.setOriginalEventTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityItemIdentifier} returns this
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.clearOriginalEventTime = function() {
  return this.setOriginalEventTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityItemIdentifier.prototype.hasOriginalEventTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.activity.v2.ActivityLogItemReference.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.airchat.activity.v2.ActivityLogItemReference.ReferenceCase = {
  REFERENCE_NOT_SET: 0,
  MESSAGE: 1
};

/**
 * @return {proto.airchat.activity.v2.ActivityLogItemReference.ReferenceCase}
 */
proto.airchat.activity.v2.ActivityLogItemReference.prototype.getReferenceCase = function() {
  return /** @type {proto.airchat.activity.v2.ActivityLogItemReference.ReferenceCase} */(jspb.Message.computeOneofCase(this, proto.airchat.activity.v2.ActivityLogItemReference.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ActivityLogItemReference.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ActivityLogItemReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ActivityLogItemReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityLogItemReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && airchat_message_v2_message_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ActivityLogItemReference}
 */
proto.airchat.activity.v2.ActivityLogItemReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ActivityLogItemReference;
  return proto.airchat.activity.v2.ActivityLogItemReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ActivityLogItemReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ActivityLogItemReference}
 */
proto.airchat.activity.v2.ActivityLogItemReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_message_v2_message_pb.Message;
      reader.readMessage(value,airchat_message_v2_message_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ActivityLogItemReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ActivityLogItemReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ActivityLogItemReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityLogItemReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_message_v2_message_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.message.v2.Message message = 1;
 * @return {?proto.airchat.message.v2.Message}
 */
proto.airchat.activity.v2.ActivityLogItemReference.prototype.getMessage = function() {
  return /** @type{?proto.airchat.message.v2.Message} */ (
    jspb.Message.getWrapperField(this, airchat_message_v2_message_pb.Message, 1));
};


/**
 * @param {?proto.airchat.message.v2.Message|undefined} value
 * @return {!proto.airchat.activity.v2.ActivityLogItemReference} returns this
*/
proto.airchat.activity.v2.ActivityLogItemReference.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.airchat.activity.v2.ActivityLogItemReference.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.activity.v2.ActivityLogItemReference} returns this
 */
proto.airchat.activity.v2.ActivityLogItemReference.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.activity.v2.ActivityLogItemReference.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ActivityCoordinate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ActivityCoordinate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityCoordinate.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    referenceId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ActivityCoordinate}
 */
proto.airchat.activity.v2.ActivityCoordinate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ActivityCoordinate;
  return proto.airchat.activity.v2.ActivityCoordinate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ActivityCoordinate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ActivityCoordinate}
 */
proto.airchat.activity.v2.ActivityCoordinate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.activity.v2.ActivityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ActivityCoordinate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ActivityCoordinate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityCoordinate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReferenceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string recipient_user_id = 1;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.getRecipientUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityCoordinate} returns this
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.setRecipientUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActivityType type = 2;
 * @return {!proto.airchat.activity.v2.ActivityType}
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.getType = function() {
  return /** @type {!proto.airchat.activity.v2.ActivityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.activity.v2.ActivityType} value
 * @return {!proto.airchat.activity.v2.ActivityCoordinate} returns this
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string reference_id = 3;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.getReferenceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityCoordinate} returns this
 */
proto.airchat.activity.v2.ActivityCoordinate.prototype.setReferenceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.activity.v2.ActivityLogItemUsers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.activity.v2.ActivityLogItemUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.activity.v2.ActivityLogItemUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityLogItemUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.activity.v2.ActivityLogItemUsers}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.activity.v2.ActivityLogItemUsers;
  return proto.airchat.activity.v2.ActivityLogItemUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.activity.v2.ActivityLogItemUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.activity.v2.ActivityLogItemUsers}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.activity.v2.ActivityLogItemUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.activity.v2.ActivityLogItemUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.activity.v2.ActivityLogItemUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getNextPageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated airchat.user.v2.User user = 1;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.getUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.activity.v2.ActivityLogItemUsers} returns this
*/
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.activity.v2.ActivityLogItemUsers} returns this
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.clearUserList = function() {
  return this.setUserList([]);
};


/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.getNextPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.activity.v2.ActivityLogItemUsers} returns this
 */
proto.airchat.activity.v2.ActivityLogItemUsers.prototype.setNextPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.airchat.activity.v2.ActivityType = {
  ACTIVITY_TYPE_INVALID: 0,
  ACTIVITY_TYPE_CONTACT_JOINED: 1,
  ACTIVITY_TYPE_FOLLOW_YOU: 2,
  ACTIVITY_TYPE_MESSAGE_MENTIONED_YOU: 3,
  ACTIVITY_TYPE_MESSAGE_LIKE: 4,
  ACTIVITY_TYPE_MESSAGE_UNLIKE: 5,
  ACTIVITY_TYPE_MESSAGE_REPOST: 6,
  ACTIVITY_TYPE_MESSAGE_UN_REPOST: 7,
  ACTIVITY_TYPE_MESSAGE_REPLY: 8,
  ACTIVITY_TYPE_MESSAGE_PRIVATE: 9,
  ACTIVITY_TYPE_PRIVATE_MESSAGE_LIKE: 10,
  ACTIVITY_TYPE_PRIVATE_MESSAGE_UNLIKE: 11,
  ACTIVITY_TYPE_CHANNEL_PARTICIPANT_INVITE: 12,
  ACTIVITY_TYPE_CHANNEL_PARTICIPANT_INVITE_CLEARED: 13
};

goog.object.extend(exports, proto.airchat.activity.v2);
