// source: airchat/user/event/v2/user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var airchat_user_v2_user_pb = require('../../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
goog.exportSymbol('proto.airchat.user.event.v2.BlockAction', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.MuteAction', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserBlocked', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserCreated', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserDelete', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserFollow', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserFollowType', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserLogout', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserMuted', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserOnlineLog', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserPhoneHashInvited', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserProfileUpdate', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserProfileUpdate.ProfileItemCase', null, global);
goog.exportSymbol('proto.airchat.user.event.v2.UserStatusUpdated', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserOnlineLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserOnlineLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserOnlineLog.displayName = 'proto.airchat.user.event.v2.UserOnlineLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserProfileUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_);
};
goog.inherits(proto.airchat.user.event.v2.UserProfileUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserProfileUpdate.displayName = 'proto.airchat.user.event.v2.UserProfileUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserFollow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserFollow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserFollow.displayName = 'proto.airchat.user.event.v2.UserFollow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserBlocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserBlocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserBlocked.displayName = 'proto.airchat.user.event.v2.UserBlocked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserMuted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserMuted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserMuted.displayName = 'proto.airchat.user.event.v2.UserMuted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserDelete.displayName = 'proto.airchat.user.event.v2.UserDelete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserCreated.displayName = 'proto.airchat.user.event.v2.UserCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserLogout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserLogout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserLogout.displayName = 'proto.airchat.user.event.v2.UserLogout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserStatusUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserStatusUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserStatusUpdated.displayName = 'proto.airchat.user.event.v2.UserStatusUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.UserPhoneHashInvited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.UserPhoneHashInvited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.UserPhoneHashInvited.displayName = 'proto.airchat.user.event.v2.UserPhoneHashInvited';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserOnlineLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserOnlineLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserOnlineLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastOnlineTime: (f = msg.getLastOnlineTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    expirationTime: (f = msg.getExpirationTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserOnlineLog}
 */
proto.airchat.user.event.v2.UserOnlineLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserOnlineLog;
  return proto.airchat.user.event.v2.UserOnlineLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserOnlineLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserOnlineLog}
 */
proto.airchat.user.event.v2.UserOnlineLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastOnlineTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpirationTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserOnlineLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserOnlineLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserOnlineLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastOnlineTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExpirationTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserOnlineLog} returns this
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp last_online_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.getLastOnlineTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.user.event.v2.UserOnlineLog} returns this
*/
proto.airchat.user.event.v2.UserOnlineLog.prototype.setLastOnlineTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserOnlineLog} returns this
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.clearLastOnlineTime = function() {
  return this.setLastOnlineTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.hasLastOnlineTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp expiration_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.getExpirationTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.user.event.v2.UserOnlineLog} returns this
*/
proto.airchat.user.event.v2.UserOnlineLog.prototype.setExpirationTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserOnlineLog} returns this
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.clearExpirationTime = function() {
  return this.setExpirationTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserOnlineLog.prototype.hasExpirationTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.airchat.user.event.v2.UserProfileUpdate.ProfileItemCase = {
  PROFILE_ITEM_NOT_SET: 0,
  NAME: 2,
  USERNAME: 3,
  AVATAR_URL: 4,
  BIO: 5,
  TWITTER_HANDLE: 6,
  INSTAGRAM_HANDLE: 7
};

/**
 * @return {proto.airchat.user.event.v2.UserProfileUpdate.ProfileItemCase}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getProfileItemCase = function() {
  return /** @type {proto.airchat.user.event.v2.UserProfileUpdate.ProfileItemCase} */(jspb.Message.computeOneofCase(this, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserProfileUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserProfileUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserProfileUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 5, ""),
    twitterHandle: jspb.Message.getFieldWithDefault(msg, 6, ""),
    instagramHandle: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate}
 */
proto.airchat.user.event.v2.UserProfileUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserProfileUpdate;
  return proto.airchat.user.event.v2.UserProfileUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserProfileUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate}
 */
proto.airchat.user.event.v2.UserProfileUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwitterHandle(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstagramHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserProfileUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserProfileUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserProfileUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 2, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setUsername = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.clearUsername = function() {
  return jspb.Message.setOneofField(this, 3, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string avatar_url = 4;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setAvatarUrl = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.clearAvatarUrl = function() {
  return jspb.Message.setOneofField(this, 4, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string bio = 5;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setBio = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.clearBio = function() {
  return jspb.Message.setOneofField(this, 5, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.hasBio = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string twitter_handle = 6;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getTwitterHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setTwitterHandle = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.clearTwitterHandle = function() {
  return jspb.Message.setOneofField(this, 6, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.hasTwitterHandle = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string instagram_handle = 7;
 * @return {string}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.getInstagramHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.setInstagramHandle = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserProfileUpdate} returns this
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.clearInstagramHandle = function() {
  return jspb.Message.setOneofField(this, 7, proto.airchat.user.event.v2.UserProfileUpdate.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserProfileUpdate.prototype.hasInstagramHandle = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserFollow.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserFollow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserFollow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserFollow.toObject = function(includeInstance, msg) {
  var f, obj = {
    followerUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    followedUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserFollow}
 */
proto.airchat.user.event.v2.UserFollow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserFollow;
  return proto.airchat.user.event.v2.UserFollow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserFollow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserFollow}
 */
proto.airchat.user.event.v2.UserFollow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowerUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowedUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.user.event.v2.UserFollowType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserFollow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserFollow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserFollow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserFollow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFollowerUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFollowedUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string follower_user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserFollow.prototype.getFollowerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserFollow} returns this
 */
proto.airchat.user.event.v2.UserFollow.prototype.setFollowerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string followed_user_id = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.UserFollow.prototype.getFollowedUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserFollow} returns this
 */
proto.airchat.user.event.v2.UserFollow.prototype.setFollowedUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional UserFollowType type = 3;
 * @return {!proto.airchat.user.event.v2.UserFollowType}
 */
proto.airchat.user.event.v2.UserFollow.prototype.getType = function() {
  return /** @type {!proto.airchat.user.event.v2.UserFollowType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.user.event.v2.UserFollowType} value
 * @return {!proto.airchat.user.event.v2.UserFollow} returns this
 */
proto.airchat.user.event.v2.UserFollow.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserBlocked.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserBlocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserBlocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserBlocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockerUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockedUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserBlocked}
 */
proto.airchat.user.event.v2.UserBlocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserBlocked;
  return proto.airchat.user.event.v2.UserBlocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserBlocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserBlocked}
 */
proto.airchat.user.event.v2.UserBlocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockerUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockedUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.user.event.v2.BlockAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserBlocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserBlocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserBlocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserBlocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockerUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockedUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string blocker_user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserBlocked.prototype.getBlockerUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserBlocked} returns this
 */
proto.airchat.user.event.v2.UserBlocked.prototype.setBlockerUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blocked_user_id = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.UserBlocked.prototype.getBlockedUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserBlocked} returns this
 */
proto.airchat.user.event.v2.UserBlocked.prototype.setBlockedUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BlockAction action = 3;
 * @return {!proto.airchat.user.event.v2.BlockAction}
 */
proto.airchat.user.event.v2.UserBlocked.prototype.getAction = function() {
  return /** @type {!proto.airchat.user.event.v2.BlockAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.user.event.v2.BlockAction} value
 * @return {!proto.airchat.user.event.v2.UserBlocked} returns this
 */
proto.airchat.user.event.v2.UserBlocked.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserMuted.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserMuted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserMuted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserMuted.toObject = function(includeInstance, msg) {
  var f, obj = {
    muterUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mutedUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserMuted}
 */
proto.airchat.user.event.v2.UserMuted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserMuted;
  return proto.airchat.user.event.v2.UserMuted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserMuted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserMuted}
 */
proto.airchat.user.event.v2.UserMuted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMuterUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMutedUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.user.event.v2.MuteAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserMuted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserMuted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserMuted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserMuted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMuterUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMutedUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string muter_user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserMuted.prototype.getMuterUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserMuted} returns this
 */
proto.airchat.user.event.v2.UserMuted.prototype.setMuterUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string muted_user_id = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.UserMuted.prototype.getMutedUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserMuted} returns this
 */
proto.airchat.user.event.v2.UserMuted.prototype.setMutedUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MuteAction action = 3;
 * @return {!proto.airchat.user.event.v2.MuteAction}
 */
proto.airchat.user.event.v2.UserMuted.prototype.getAction = function() {
  return /** @type {!proto.airchat.user.event.v2.MuteAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.user.event.v2.MuteAction} value
 * @return {!proto.airchat.user.event.v2.UserMuted} returns this
 */
proto.airchat.user.event.v2.UserMuted.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserDelete}
 */
proto.airchat.user.event.v2.UserDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserDelete;
  return proto.airchat.user.event.v2.UserDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserDelete}
 */
proto.airchat.user.event.v2.UserDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.user.v2.User user = 1;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.user.event.v2.UserDelete.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.user.event.v2.UserDelete} returns this
*/
proto.airchat.user.event.v2.UserDelete.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserDelete} returns this
 */
proto.airchat.user.event.v2.UserDelete.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserDelete.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && airchat_user_v2_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserCreated}
 */
proto.airchat.user.event.v2.UserCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserCreated;
  return proto.airchat.user.event.v2.UserCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserCreated}
 */
proto.airchat.user.event.v2.UserCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional airchat.user.v2.User user = 1;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.user.event.v2.UserCreated.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.user.event.v2.UserCreated} returns this
*/
proto.airchat.user.event.v2.UserCreated.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.event.v2.UserCreated} returns this
 */
proto.airchat.user.event.v2.UserCreated.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.UserCreated.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserLogout.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserLogout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserLogout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserLogout.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserLogout}
 */
proto.airchat.user.event.v2.UserLogout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserLogout;
  return proto.airchat.user.event.v2.UserLogout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserLogout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserLogout}
 */
proto.airchat.user.event.v2.UserLogout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserLogout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserLogout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserLogout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserLogout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserLogout.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserLogout} returns this
 */
proto.airchat.user.event.v2.UserLogout.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserStatusUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserStatusUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserStatusUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    previousStatus: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserStatusUpdated}
 */
proto.airchat.user.event.v2.UserStatusUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserStatusUpdated;
  return proto.airchat.user.event.v2.UserStatusUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserStatusUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserStatusUpdated}
 */
proto.airchat.user.event.v2.UserStatusUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.airchat.user.v2.UserAccountStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!proto.airchat.user.v2.UserAccountStatus} */ (reader.readEnum());
      msg.setPreviousStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserStatusUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserStatusUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserStatusUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPreviousStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserStatusUpdated} returns this
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional airchat.user.v2.UserAccountStatus status = 2;
 * @return {!proto.airchat.user.v2.UserAccountStatus}
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.getStatus = function() {
  return /** @type {!proto.airchat.user.v2.UserAccountStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.airchat.user.v2.UserAccountStatus} value
 * @return {!proto.airchat.user.event.v2.UserStatusUpdated} returns this
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional airchat.user.v2.UserAccountStatus previous_status = 3;
 * @return {!proto.airchat.user.v2.UserAccountStatus}
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.getPreviousStatus = function() {
  return /** @type {!proto.airchat.user.v2.UserAccountStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.airchat.user.v2.UserAccountStatus} value
 * @return {!proto.airchat.user.event.v2.UserStatusUpdated} returns this
 */
proto.airchat.user.event.v2.UserStatusUpdated.prototype.setPreviousStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.event.v2.UserPhoneHashInvited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.event.v2.UserPhoneHashInvited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    invitedBy: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.UserPhoneHashInvited}
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.UserPhoneHashInvited;
  return proto.airchat.user.event.v2.UserPhoneHashInvited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.UserPhoneHashInvited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.UserPhoneHashInvited}
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitedBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.event.v2.UserPhoneHashInvited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.UserPhoneHashInvited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInvitedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string phone_hash = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.prototype.getPhoneHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserPhoneHashInvited} returns this
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.prototype.setPhoneHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string invited_by = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.prototype.getInvitedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.UserPhoneHashInvited} returns this
 */
proto.airchat.user.event.v2.UserPhoneHashInvited.prototype.setInvitedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.airchat.user.event.v2.UserFollowType = {
  USER_FOLLOW_TYPE_INVALID: 0,
  USER_FOLLOW_TYPE_FOLLOW: 1,
  USER_FOLLOW_TYPE_UNFOLLOW: 2
};

/**
 * @enum {number}
 */
proto.airchat.user.event.v2.BlockAction = {
  BLOCK_ACTION_INVALID: 0,
  BLOCK_ACTION_BLOCK: 1,
  BLOCK_ACTION_UNBLOCK: 2
};

/**
 * @enum {number}
 */
proto.airchat.user.event.v2.MuteAction = {
  MUTE_ACTION_INVALID: 0,
  MUTE_ACTION_MUTE: 1,
  MUTE_ACTION_UNMUTE: 2
};

goog.object.extend(exports, proto.airchat.user.event.v2);
