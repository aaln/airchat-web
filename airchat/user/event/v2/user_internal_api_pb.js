// source: airchat/user/event/v2/user_internal_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

var airchat_user_v2_user_pb = require('../../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
var airchat_message_v2_message_pb = require('../../../../airchat/message/v2/message_pb.js');
goog.object.extend(proto, airchat_message_v2_message_pb);
goog.exportSymbol(
  'proto.airchat.user.event.v2.CalculateMentionCandidatesRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.CalculateMentionCandidatesResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.GetRecommendedUsersRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.GetRecommendedUsersResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.GetUserAnalyticsRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.GetUserAnalyticsResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.GetUserRestrictionsRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.GetUserRestrictionsResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.IsFollowedRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.IsFollowedResponse',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.IsInContactsRequest',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.user.event.v2.IsInContactsResponse',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.IsFollowedRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.IsFollowedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.IsFollowedRequest.displayName =
    'proto.airchat.user.event.v2.IsFollowedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.IsFollowedResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.IsFollowedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.IsFollowedResponse.displayName =
    'proto.airchat.user.event.v2.IsFollowedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.IsInContactsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.IsInContactsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.IsInContactsRequest.displayName =
    'proto.airchat.user.event.v2.IsInContactsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.IsInContactsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.event.v2.IsInContactsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.IsInContactsResponse.displayName =
    'proto.airchat.user.event.v2.IsInContactsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.user.event.v2.GetUserRestrictionsRequest.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.user.event.v2.GetUserRestrictionsRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.GetUserRestrictionsRequest.displayName =
    'proto.airchat.user.event.v2.GetUserRestrictionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.user.event.v2.GetUserRestrictionsResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.user.event.v2.GetUserRestrictionsResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.GetUserRestrictionsResponse.displayName =
    'proto.airchat.user.event.v2.GetUserRestrictionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.user.event.v2.CalculateMentionCandidatesRequest
      .repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.user.event.v2.CalculateMentionCandidatesRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.displayName =
    'proto.airchat.user.event.v2.CalculateMentionCandidatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse = function (
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.user.event.v2.CalculateMentionCandidatesResponse
      .repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.user.event.v2.CalculateMentionCandidatesResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.displayName =
    'proto.airchat.user.event.v2.CalculateMentionCandidatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.airchat.user.event.v2.GetUserAnalyticsRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.GetUserAnalyticsRequest.displayName =
    'proto.airchat.user.event.v2.GetUserAnalyticsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.airchat.user.event.v2.GetUserAnalyticsResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.GetUserAnalyticsResponse.displayName =
    'proto.airchat.user.event.v2.GetUserAnalyticsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.airchat.user.event.v2.GetRecommendedUsersRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.GetRecommendedUsersRequest.displayName =
    'proto.airchat.user.event.v2.GetRecommendedUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.user.event.v2.GetRecommendedUsersResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.airchat.user.event.v2.GetRecommendedUsersResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.event.v2.GetRecommendedUsersResponse.displayName =
    'proto.airchat.user.event.v2.GetRecommendedUsersResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.IsFollowedRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.user.event.v2.IsFollowedRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.IsFollowedRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.IsFollowedRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        followerUserId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        followedUserId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.IsFollowedRequest}
 */
proto.airchat.user.event.v2.IsFollowedRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.IsFollowedRequest();
  return proto.airchat.user.event.v2.IsFollowedRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.IsFollowedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.IsFollowedRequest}
 */
proto.airchat.user.event.v2.IsFollowedRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setFollowerUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setFollowedUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.IsFollowedRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.IsFollowedRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.IsFollowedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.IsFollowedRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getFollowerUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getFollowedUserId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string follower_user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.IsFollowedRequest.prototype.getFollowerUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.IsFollowedRequest} returns this
 */
proto.airchat.user.event.v2.IsFollowedRequest.prototype.setFollowerUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string followed_user_id = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.IsFollowedRequest.prototype.getFollowedUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.IsFollowedRequest} returns this
 */
proto.airchat.user.event.v2.IsFollowedRequest.prototype.setFollowedUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.IsFollowedResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.user.event.v2.IsFollowedResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.IsFollowedResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.IsFollowedResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        isFollowed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.IsFollowedResponse}
 */
proto.airchat.user.event.v2.IsFollowedResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.IsFollowedResponse();
  return proto.airchat.user.event.v2.IsFollowedResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.IsFollowedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.IsFollowedResponse}
 */
proto.airchat.user.event.v2.IsFollowedResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setIsFollowed(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.IsFollowedResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.IsFollowedResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.IsFollowedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.IsFollowedResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getIsFollowed();
    if (f) {
      writer.writeBool(1, f);
    }
  };

/**
 * optional bool is_followed = 1;
 * @return {boolean}
 */
proto.airchat.user.event.v2.IsFollowedResponse.prototype.getIsFollowed =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 1, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.airchat.user.event.v2.IsFollowedResponse} returns this
 */
proto.airchat.user.event.v2.IsFollowedResponse.prototype.setIsFollowed =
  function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.IsInContactsRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.IsInContactsRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.IsInContactsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.IsInContactsRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        fromUserId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        targetUserId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.IsInContactsRequest}
 */
proto.airchat.user.event.v2.IsInContactsRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.IsInContactsRequest();
  return proto.airchat.user.event.v2.IsInContactsRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.IsInContactsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.IsInContactsRequest}
 */
proto.airchat.user.event.v2.IsInContactsRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setFromUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setTargetUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.IsInContactsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.IsInContactsRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.IsInContactsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.IsInContactsRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getFromUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getTargetUserId();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string from_user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.IsInContactsRequest.prototype.getFromUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.IsInContactsRequest} returns this
 */
proto.airchat.user.event.v2.IsInContactsRequest.prototype.setFromUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string target_user_id = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.IsInContactsRequest.prototype.getTargetUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.IsInContactsRequest} returns this
 */
proto.airchat.user.event.v2.IsInContactsRequest.prototype.setTargetUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.IsInContactsResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.IsInContactsResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.IsInContactsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.IsInContactsResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        inContacts: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.IsInContactsResponse}
 */
proto.airchat.user.event.v2.IsInContactsResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.event.v2.IsInContactsResponse();
  return proto.airchat.user.event.v2.IsInContactsResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.IsInContactsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.IsInContactsResponse}
 */
proto.airchat.user.event.v2.IsInContactsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setInContacts(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.IsInContactsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.IsInContactsResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.IsInContactsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.IsInContactsResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getInContacts();
    if (f) {
      writer.writeBool(1, f);
    }
  };

/**
 * optional bool in_contacts = 1;
 * @return {boolean}
 */
proto.airchat.user.event.v2.IsInContactsResponse.prototype.getInContacts =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 1, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.airchat.user.event.v2.IsInContactsResponse} returns this
 */
proto.airchat.user.event.v2.IsInContactsResponse.prototype.setInContacts =
  function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.GetUserRestrictionsRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.GetUserRestrictionsRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.GetUserRestrictionsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.GetUserRestrictionsRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        restrictionQueryList: jspb.Message.toObjectList(
          msg.getRestrictionQueryList(),
          airchat_user_v2_user_pb.UserRestrictionQuery.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsRequest}
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.user.event.v2.GetUserRestrictionsRequest();
    return proto.airchat.user.event.v2.GetUserRestrictionsRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.GetUserRestrictionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsRequest}
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_user_v2_user_pb.UserRestrictionQuery();
          reader.readMessage(
            value,
            airchat_user_v2_user_pb.UserRestrictionQuery
              .deserializeBinaryFromReader
          );
          msg.addRestrictionQuery(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.GetUserRestrictionsRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.GetUserRestrictionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getRestrictionQueryList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        airchat_user_v2_user_pb.UserRestrictionQuery.serializeBinaryToWriter
      );
    }
  };

/**
 * repeated airchat.user.v2.UserRestrictionQuery restriction_query = 1;
 * @return {!Array<!proto.airchat.user.v2.UserRestrictionQuery>}
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.prototype.getRestrictionQueryList =
  function () {
    return /** @type{!Array<!proto.airchat.user.v2.UserRestrictionQuery>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_user_v2_user_pb.UserRestrictionQuery,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.user.v2.UserRestrictionQuery>} value
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsRequest} returns this
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.prototype.setRestrictionQueryList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.airchat.user.v2.UserRestrictionQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.UserRestrictionQuery}
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.prototype.addRestrictionQuery =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.airchat.user.v2.UserRestrictionQuery,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsRequest} returns this
 */
proto.airchat.user.event.v2.GetUserRestrictionsRequest.prototype.clearRestrictionQueryList =
  function () {
    return this.setRestrictionQueryList([]);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.GetUserRestrictionsResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.GetUserRestrictionsResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.GetUserRestrictionsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.GetUserRestrictionsResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userRestrictionsList: jspb.Message.toObjectList(
          msg.getUserRestrictionsList(),
          airchat_user_v2_user_pb.UserRestriction.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsResponse}
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.user.event.v2.GetUserRestrictionsResponse();
    return proto.airchat.user.event.v2.GetUserRestrictionsResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.GetUserRestrictionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsResponse}
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_user_v2_user_pb.UserRestriction();
          reader.readMessage(
            value,
            airchat_user_v2_user_pb.UserRestriction.deserializeBinaryFromReader
          );
          msg.addUserRestrictions(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.GetUserRestrictionsResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.GetUserRestrictionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserRestrictionsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        airchat_user_v2_user_pb.UserRestriction.serializeBinaryToWriter
      );
    }
  };

/**
 * repeated airchat.user.v2.UserRestriction user_restrictions = 1;
 * @return {!Array<!proto.airchat.user.v2.UserRestriction>}
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.prototype.getUserRestrictionsList =
  function () {
    return /** @type{!Array<!proto.airchat.user.v2.UserRestriction>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_user_v2_user_pb.UserRestriction,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.user.v2.UserRestriction>} value
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsResponse} returns this
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.prototype.setUserRestrictionsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.airchat.user.v2.UserRestriction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.UserRestriction}
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.prototype.addUserRestrictions =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.airchat.user.v2.UserRestriction,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.GetUserRestrictionsResponse} returns this
 */
proto.airchat.user.event.v2.GetUserRestrictionsResponse.prototype.clearUserRestrictionsList =
  function () {
    return this.setUserRestrictionsList([]);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.repeatedFields_ =
  [3, 4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          forUserId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          transcription: jspb.Message.getFieldWithDefault(msg, 2, ''),
          userIdsAroundConversationList:
            (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
          lowPriorityUserIdsAroundConversationList:
            (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.user.event.v2.CalculateMentionCandidatesRequest();
    return proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setForUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setTranscription(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.addUserIdsAroundConversation(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.addLowPriorityUserIdsAroundConversation(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getForUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getTranscription();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getUserIdsAroundConversationList();
    if (f.length > 0) {
      writer.writeRepeatedString(3, f);
    }
    f = message.getLowPriorityUserIdsAroundConversationList();
    if (f.length > 0) {
      writer.writeRepeatedString(4, f);
    }
  };

/**
 * optional string for_user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.getForUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.setForUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string transcription = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.getTranscription =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.setTranscription =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * repeated string user_ids_around_conversation = 3;
 * @return {!Array<string>}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.getUserIdsAroundConversationList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 3)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.setUserIdsAroundConversationList =
  function (value) {
    return jspb.Message.setField(this, 3, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.addUserIdsAroundConversation =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.clearUserIdsAroundConversationList =
  function () {
    return this.setUserIdsAroundConversationList([]);
  };

/**
 * repeated string low_priority_user_ids_around_conversation = 4;
 * @return {!Array<string>}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.getLowPriorityUserIdsAroundConversationList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 4)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.setLowPriorityUserIdsAroundConversationList =
  function (value) {
    return jspb.Message.setField(this, 4, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.addLowPriorityUserIdsAroundConversation =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesRequest} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesRequest.prototype.clearLowPriorityUserIdsAroundConversationList =
  function () {
    return this.setLowPriorityUserIdsAroundConversationList([]);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.repeatedFields_ =
  [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          candidatesList: jspb.Message.toObjectList(
            msg.getCandidatesList(),
            airchat_user_v2_user_pb.User.toObject,
            includeInstance
          ),
          mentionCandidatesList: jspb.Message.toObjectList(
            msg.getMentionCandidatesList(),
            airchat_message_v2_message_pb.MentionCandidate.toObject,
            includeInstance
          )
        };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg =
      new proto.airchat.user.event.v2.CalculateMentionCandidatesResponse();
    return proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_user_v2_user_pb.User();
          reader.readMessage(
            value,
            airchat_user_v2_user_pb.User.deserializeBinaryFromReader
          );
          msg.addCandidates(value);
          break;
        case 2:
          var value = new airchat_message_v2_message_pb.MentionCandidate();
          reader.readMessage(
            value,
            airchat_message_v2_message_pb.MentionCandidate
              .deserializeBinaryFromReader
          );
          msg.addMentionCandidates(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getCandidatesList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        airchat_user_v2_user_pb.User.serializeBinaryToWriter
      );
    }
    f = message.getMentionCandidatesList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        2,
        f,
        airchat_message_v2_message_pb.MentionCandidate.serializeBinaryToWriter
      );
    }
  };

/**
 * repeated airchat.user.v2.User candidates = 1;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.getCandidatesList =
  function () {
    return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_user_v2_user_pb.User,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.setCandidatesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.addCandidates =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.airchat.user.v2.User,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.clearCandidatesList =
  function () {
    return this.setCandidatesList([]);
  };

/**
 * repeated airchat.message.v2.MentionCandidate mention_candidates = 2;
 * @return {!Array<!proto.airchat.message.v2.MentionCandidate>}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.getMentionCandidatesList =
  function () {
    return /** @type{!Array<!proto.airchat.message.v2.MentionCandidate>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_message_v2_message_pb.MentionCandidate,
        2
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.message.v2.MentionCandidate>} value
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.setMentionCandidatesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
  };

/**
 * @param {!proto.airchat.message.v2.MentionCandidate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.message.v2.MentionCandidate}
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.addMentionCandidates =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      2,
      opt_value,
      proto.airchat.message.v2.MentionCandidate,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.CalculateMentionCandidatesResponse} returns this
 */
proto.airchat.user.event.v2.CalculateMentionCandidatesResponse.prototype.clearMentionCandidatesList =
  function () {
    return this.setMentionCandidatesList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.GetUserAnalyticsRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.GetUserAnalyticsRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.GetUserAnalyticsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.GetUserAnalyticsRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsRequest}
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.user.event.v2.GetUserAnalyticsRequest();
    return proto.airchat.user.event.v2.GetUserAnalyticsRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.GetUserAnalyticsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsRequest}
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.GetUserAnalyticsRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.GetUserAnalyticsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsRequest} returns this
 */
proto.airchat.user.event.v2.GetUserAnalyticsRequest.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.GetUserAnalyticsResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.GetUserAnalyticsResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.GetUserAnalyticsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.GetUserAnalyticsResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userAnalytics:
          (f = msg.getUserAnalytics()) &&
          airchat_user_v2_user_pb.UserAnalytics.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsResponse}
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.user.event.v2.GetUserAnalyticsResponse();
    return proto.airchat.user.event.v2.GetUserAnalyticsResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.GetUserAnalyticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsResponse}
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_user_v2_user_pb.UserAnalytics();
          reader.readMessage(
            value,
            airchat_user_v2_user_pb.UserAnalytics.deserializeBinaryFromReader
          );
          msg.setUserAnalytics(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.GetUserAnalyticsResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.GetUserAnalyticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserAnalytics();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        airchat_user_v2_user_pb.UserAnalytics.serializeBinaryToWriter
      );
    }
  };

/**
 * optional airchat.user.v2.UserAnalytics user_analytics = 1;
 * @return {?proto.airchat.user.v2.UserAnalytics}
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.prototype.getUserAnalytics =
  function () {
    return /** @type{?proto.airchat.user.v2.UserAnalytics} */ (
      jspb.Message.getWrapperField(
        this,
        airchat_user_v2_user_pb.UserAnalytics,
        1
      )
    );
  };

/**
 * @param {?proto.airchat.user.v2.UserAnalytics|undefined} value
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsResponse} returns this
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.prototype.setUserAnalytics =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.event.v2.GetUserAnalyticsResponse} returns this
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.prototype.clearUserAnalytics =
  function () {
    return this.setUserAnalytics(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.event.v2.GetUserAnalyticsResponse.prototype.hasUserAnalytics =
  function () {
    return jspb.Message.getField(this, 1) != null;
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.GetRecommendedUsersRequest.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.GetRecommendedUsersRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.GetRecommendedUsersRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        pageKey: jspb.Message.getFieldWithDefault(msg, 2, ''),
        phoneHash: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersRequest}
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.user.event.v2.GetRecommendedUsersRequest();
    return proto.airchat.user.event.v2.GetRecommendedUsersRequest.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.GetRecommendedUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersRequest}
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setUserId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setPageKey(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setPhoneHash(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.GetRecommendedUsersRequest.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.GetRecommendedUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getPageKey();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getPhoneHash();
    if (f.length > 0) {
      writer.writeString(3, f);
    }
  };

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.getUserId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersRequest} returns this
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.setUserId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string page_key = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.getPageKey =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersRequest} returns this
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.setPageKey =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional string phone_hash = 3;
 * @return {string}
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.getPhoneHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersRequest} returns this
 */
proto.airchat.user.event.v2.GetRecommendedUsersRequest.prototype.setPhoneHash =
  function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.user.event.v2.GetRecommendedUsersResponse.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.user.event.v2.GetRecommendedUsersResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.user.event.v2.GetRecommendedUsersResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        userList: jspb.Message.toObjectList(
          msg.getUserList(),
          airchat_user_v2_user_pb.User.toObject,
          includeInstance
        ),
        nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersResponse}
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.airchat.user.event.v2.GetRecommendedUsersResponse();
    return proto.airchat.user.event.v2.GetRecommendedUsersResponse.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.event.v2.GetRecommendedUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersResponse}
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new airchat_user_v2_user_pb.User();
          reader.readMessage(
            value,
            airchat_user_v2_user_pb.User.deserializeBinaryFromReader
          );
          msg.addUser(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setNextPageKey(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.user.event.v2.GetRecommendedUsersResponse.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.event.v2.GetRecommendedUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getUserList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        airchat_user_v2_user_pb.User.serializeBinaryToWriter
      );
    }
    f = message.getNextPageKey();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * repeated airchat.user.v2.User user = 1;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.getUserList =
  function () {
    return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        airchat_user_v2_user_pb.User,
        1
      )
    );
  };

/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersResponse} returns this
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.setUserList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.addUser =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.airchat.user.v2.User,
      opt_index
    );
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersResponse} returns this
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.clearUserList =
  function () {
    return this.setUserList([]);
  };

/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.getNextPageKey =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.user.event.v2.GetRecommendedUsersResponse} returns this
 */
proto.airchat.user.event.v2.GetRecommendedUsersResponse.prototype.setNextPageKey =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

goog.object.extend(exports, proto.airchat.user.event.v2);
