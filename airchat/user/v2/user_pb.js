// source: airchat/user/v2/user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.airchat.user.v2.FeaturedUser', null, global);
goog.exportSymbol('proto.airchat.user.v2.UpdateUserItem', null, global);
goog.exportSymbol('proto.airchat.user.v2.UpdateUserItem.ItemCase', null, global);
goog.exportSymbol('proto.airchat.user.v2.User', null, global);
goog.exportSymbol('proto.airchat.user.v2.User.PerspectiveCase', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserAccountBackgroundColor', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserAccountStatus', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserAnalytics', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserInterest', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserPerspective', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserRestriction', null, global);
goog.exportSymbol('proto.airchat.user.v2.UserRestrictionQuery', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.user.v2.User.oneofGroups_);
};
goog.inherits(proto.airchat.user.v2.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.User.displayName = 'proto.airchat.user.v2.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.UserPerspective = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.v2.UserPerspective, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.UserPerspective.displayName = 'proto.airchat.user.v2.UserPerspective';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.UserRestriction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.v2.UserRestriction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.UserRestriction.displayName = 'proto.airchat.user.v2.UserRestriction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.UserRestrictionQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.user.v2.UserRestrictionQuery.repeatedFields_, null);
};
goog.inherits(proto.airchat.user.v2.UserRestrictionQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.UserRestrictionQuery.displayName = 'proto.airchat.user.v2.UserRestrictionQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.UpdateUserItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.airchat.user.v2.UpdateUserItem.oneofGroups_);
};
goog.inherits(proto.airchat.user.v2.UpdateUserItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.UpdateUserItem.displayName = 'proto.airchat.user.v2.UpdateUserItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.UserAnalytics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.v2.UserAnalytics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.UserAnalytics.displayName = 'proto.airchat.user.v2.UserAnalytics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.UserInterest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.v2.UserInterest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.UserInterest.displayName = 'proto.airchat.user.v2.UserInterest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.user.v2.FeaturedUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.user.v2.FeaturedUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.user.v2.FeaturedUser.displayName = 'proto.airchat.user.v2.FeaturedUser';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.user.v2.User.oneofGroups_ = [[12]];

/**
 * @enum {number}
 */
proto.airchat.user.v2.User.PerspectiveCase = {
  PERSPECTIVE_NOT_SET: 0,
  USER_PERSPECTIVE: 12
};

/**
 * @return {proto.airchat.user.v2.User.PerspectiveCase}
 */
proto.airchat.user.v2.User.prototype.getPerspectiveCase = function() {
  return /** @type {proto.airchat.user.v2.User.PerspectiveCase} */(jspb.Message.computeOneofCase(this, proto.airchat.user.v2.User.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.User.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    createdTime: (f = msg.getCreatedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    bio: jspb.Message.getFieldWithDefault(msg, 7, ""),
    webUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    twitterHandle: jspb.Message.getFieldWithDefault(msg, 9, ""),
    instagramHandle: jspb.Message.getFieldWithDefault(msg, 10, ""),
    backgroundColor: jspb.Message.getFieldWithDefault(msg, 11, 0),
    userPerspective: (f = msg.getUserPerspective()) && proto.airchat.user.v2.UserPerspective.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.user.v2.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.User;
  return proto.airchat.user.v2.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.user.v2.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 5:
      var value = /** @type {!proto.airchat.user.v2.UserAccountStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedTime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwitterHandle(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstagramHandle(value);
      break;
    case 11:
      var value = /** @type {!proto.airchat.user.v2.UserAccountBackgroundColor} */ (reader.readEnum());
      msg.setBackgroundColor(value);
      break;
    case 12:
      var value = new proto.airchat.user.v2.UserPerspective;
      reader.readMessage(value,proto.airchat.user.v2.UserPerspective.deserializeBinaryFromReader);
      msg.setUserPerspective(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getCreatedTime();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBio();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWebUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTwitterHandle();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInstagramHandle();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBackgroundColor();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getUserPerspective();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.airchat.user.v2.UserPerspective.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string avatar = 4;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional UserAccountStatus status = 5;
 * @return {!proto.airchat.user.v2.UserAccountStatus}
 */
proto.airchat.user.v2.User.prototype.getStatus = function() {
  return /** @type {!proto.airchat.user.v2.UserAccountStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.airchat.user.v2.UserAccountStatus} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp created_time = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.user.v2.User.prototype.getCreatedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.user.v2.User} returns this
*/
proto.airchat.user.v2.User.prototype.setCreatedTime = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.clearCreatedTime = function() {
  return this.setCreatedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.User.prototype.hasCreatedTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string bio = 7;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setBio = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string web_url = 8;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setWebUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string twitter_handle = 9;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getTwitterHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setTwitterHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string instagram_handle = 10;
 * @return {string}
 */
proto.airchat.user.v2.User.prototype.getInstagramHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setInstagramHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional UserAccountBackgroundColor background_color = 11;
 * @return {!proto.airchat.user.v2.UserAccountBackgroundColor}
 */
proto.airchat.user.v2.User.prototype.getBackgroundColor = function() {
  return /** @type {!proto.airchat.user.v2.UserAccountBackgroundColor} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.airchat.user.v2.UserAccountBackgroundColor} value
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.setBackgroundColor = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional UserPerspective user_perspective = 12;
 * @return {?proto.airchat.user.v2.UserPerspective}
 */
proto.airchat.user.v2.User.prototype.getUserPerspective = function() {
  return /** @type{?proto.airchat.user.v2.UserPerspective} */ (
    jspb.Message.getWrapperField(this, proto.airchat.user.v2.UserPerspective, 12));
};


/**
 * @param {?proto.airchat.user.v2.UserPerspective|undefined} value
 * @return {!proto.airchat.user.v2.User} returns this
*/
proto.airchat.user.v2.User.prototype.setUserPerspective = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.airchat.user.v2.User.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.User} returns this
 */
proto.airchat.user.v2.User.prototype.clearUserPerspective = function() {
  return this.setUserPerspective(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.User.prototype.hasUserPerspective = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.UserPerspective.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.UserPerspective.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.UserPerspective} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserPerspective.toObject = function(includeInstance, msg) {
  var f, obj = {
    follows: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    followsSinceTime: (f = msg.getFollowsSinceTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    following: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    followingSinceTime: (f = msg.getFollowingSinceTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastUpdatedTime: (f = msg.getLastUpdatedTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.UserPerspective}
 */
proto.airchat.user.v2.UserPerspective.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.UserPerspective;
  return proto.airchat.user.v2.UserPerspective.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.UserPerspective} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.UserPerspective}
 */
proto.airchat.user.v2.UserPerspective.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollows(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFollowsSinceTime(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFollowing(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFollowingSinceTime(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdatedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UserPerspective.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.UserPerspective.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.UserPerspective} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserPerspective.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFollows();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFollowsSinceTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFollowing();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFollowingSinceTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool follows = 1;
 * @return {boolean}
 */
proto.airchat.user.v2.UserPerspective.prototype.getFollows = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
 */
proto.airchat.user.v2.UserPerspective.prototype.setFollows = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp follows_since_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.user.v2.UserPerspective.prototype.getFollowsSinceTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
*/
proto.airchat.user.v2.UserPerspective.prototype.setFollowsSinceTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
 */
proto.airchat.user.v2.UserPerspective.prototype.clearFollowsSinceTime = function() {
  return this.setFollowsSinceTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UserPerspective.prototype.hasFollowsSinceTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool following = 3;
 * @return {boolean}
 */
proto.airchat.user.v2.UserPerspective.prototype.getFollowing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
 */
proto.airchat.user.v2.UserPerspective.prototype.setFollowing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp following_since_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.user.v2.UserPerspective.prototype.getFollowingSinceTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
*/
proto.airchat.user.v2.UserPerspective.prototype.setFollowingSinceTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
 */
proto.airchat.user.v2.UserPerspective.prototype.clearFollowingSinceTime = function() {
  return this.setFollowingSinceTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UserPerspective.prototype.hasFollowingSinceTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.airchat.user.v2.UserPerspective.prototype.getLastUpdatedTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
*/
proto.airchat.user.v2.UserPerspective.prototype.setLastUpdatedTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.UserPerspective} returns this
 */
proto.airchat.user.v2.UserPerspective.prototype.clearLastUpdatedTime = function() {
  return this.setLastUpdatedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UserPerspective.prototype.hasLastUpdatedTime = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.UserRestriction.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.UserRestriction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.UserRestriction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserRestriction.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toUserId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blocked: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    muted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    suspended: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.UserRestriction}
 */
proto.airchat.user.v2.UserRestriction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.UserRestriction;
  return proto.airchat.user.v2.UserRestriction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.UserRestriction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.UserRestriction}
 */
proto.airchat.user.v2.UserRestriction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUserId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocked(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuspended(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UserRestriction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.UserRestriction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.UserRestriction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserRestriction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlocked();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSuspended();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string from_user_id = 1;
 * @return {string}
 */
proto.airchat.user.v2.UserRestriction.prototype.getFromUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UserRestriction} returns this
 */
proto.airchat.user.v2.UserRestriction.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_user_id = 2;
 * @return {string}
 */
proto.airchat.user.v2.UserRestriction.prototype.getToUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UserRestriction} returns this
 */
proto.airchat.user.v2.UserRestriction.prototype.setToUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool blocked = 3;
 * @return {boolean}
 */
proto.airchat.user.v2.UserRestriction.prototype.getBlocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.user.v2.UserRestriction} returns this
 */
proto.airchat.user.v2.UserRestriction.prototype.setBlocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool muted = 4;
 * @return {boolean}
 */
proto.airchat.user.v2.UserRestriction.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.user.v2.UserRestriction} returns this
 */
proto.airchat.user.v2.UserRestriction.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool suspended = 5;
 * @return {boolean}
 */
proto.airchat.user.v2.UserRestriction.prototype.getSuspended = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.airchat.user.v2.UserRestriction} returns this
 */
proto.airchat.user.v2.UserRestriction.prototype.setSuspended = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.user.v2.UserRestrictionQuery.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.UserRestrictionQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.UserRestrictionQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserRestrictionQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toUserIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.UserRestrictionQuery}
 */
proto.airchat.user.v2.UserRestrictionQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.UserRestrictionQuery;
  return proto.airchat.user.v2.UserRestrictionQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.UserRestrictionQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.UserRestrictionQuery}
 */
proto.airchat.user.v2.UserRestrictionQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addToUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.UserRestrictionQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.UserRestrictionQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserRestrictionQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToUserIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string from_user_id = 1;
 * @return {string}
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.getFromUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UserRestrictionQuery} returns this
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.setFromUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string to_user_id = 2;
 * @return {!Array<string>}
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.getToUserIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.user.v2.UserRestrictionQuery} returns this
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.setToUserIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.UserRestrictionQuery} returns this
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.addToUserId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.user.v2.UserRestrictionQuery} returns this
 */
proto.airchat.user.v2.UserRestrictionQuery.prototype.clearToUserIdList = function() {
  return this.setToUserIdList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.user.v2.UpdateUserItem.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.airchat.user.v2.UpdateUserItem.ItemCase = {
  ITEM_NOT_SET: 0,
  NAME: 1,
  BIO: 2,
  USERNAME: 3,
  AVATAR: 4,
  WEB_URL: 5,
  TWITTER_ACCESS_TOKEN: 6,
  BACKGROUND_COLOR: 7,
  TWITTER_HANDLE: 8,
  INSTAGRAM_HANDLE: 9
};

/**
 * @return {proto.airchat.user.v2.UpdateUserItem.ItemCase}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getItemCase = function() {
  return /** @type {proto.airchat.user.v2.UpdateUserItem.ItemCase} */(jspb.Message.computeOneofCase(this, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.UpdateUserItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.UpdateUserItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UpdateUserItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    avatar: msg.getAvatar_asB64(),
    webUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    twitterAccessToken: jspb.Message.getFieldWithDefault(msg, 6, ""),
    backgroundColor: jspb.Message.getFieldWithDefault(msg, 7, 0),
    twitterHandle: jspb.Message.getFieldWithDefault(msg, 8, ""),
    instagramHandle: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.UpdateUserItem}
 */
proto.airchat.user.v2.UpdateUserItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.UpdateUserItem;
  return proto.airchat.user.v2.UpdateUserItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.UpdateUserItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.UpdateUserItem}
 */
proto.airchat.user.v2.UpdateUserItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAvatar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwitterAccessToken(value);
      break;
    case 7:
      var value = /** @type {!proto.airchat.user.v2.UserAccountBackgroundColor} */ (reader.readEnum());
      msg.setBackgroundColor(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwitterHandle(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstagramHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.UpdateUserItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.UpdateUserItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UpdateUserItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!proto.airchat.user.v2.UserAccountBackgroundColor} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 1, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string bio = 2;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setBio = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearBio = function() {
  return jspb.Message.setOneofField(this, 2, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasBio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setUsername = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearUsername = function() {
  return jspb.Message.setOneofField(this, 3, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes avatar = 4;
 * @return {!(string|Uint8Array)}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getAvatar = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes avatar = 4;
 * This is a type-conversion wrapper around `getAvatar()`
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getAvatar_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAvatar()));
};


/**
 * optional bytes avatar = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAvatar()`
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getAvatar_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAvatar()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setAvatar = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearAvatar = function() {
  return jspb.Message.setOneofField(this, 4, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasAvatar = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string web_url = 5;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getWebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setWebUrl = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearWebUrl = function() {
  return jspb.Message.setOneofField(this, 5, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasWebUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string twitter_access_token = 6;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getTwitterAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setTwitterAccessToken = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearTwitterAccessToken = function() {
  return jspb.Message.setOneofField(this, 6, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasTwitterAccessToken = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UserAccountBackgroundColor background_color = 7;
 * @return {!proto.airchat.user.v2.UserAccountBackgroundColor}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getBackgroundColor = function() {
  return /** @type {!proto.airchat.user.v2.UserAccountBackgroundColor} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.airchat.user.v2.UserAccountBackgroundColor} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setBackgroundColor = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearBackgroundColor = function() {
  return jspb.Message.setOneofField(this, 7, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasBackgroundColor = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string twitter_handle = 8;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getTwitterHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setTwitterHandle = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearTwitterHandle = function() {
  return jspb.Message.setOneofField(this, 8, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasTwitterHandle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string instagram_handle = 9;
 * @return {string}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.getInstagramHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.setInstagramHandle = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.user.v2.UpdateUserItem} returns this
 */
proto.airchat.user.v2.UpdateUserItem.prototype.clearInstagramHandle = function() {
  return jspb.Message.setOneofField(this, 9, proto.airchat.user.v2.UpdateUserItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UpdateUserItem.prototype.hasInstagramHandle = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.UserAnalytics.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.UserAnalytics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.UserAnalytics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserAnalytics.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    followerCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    followingCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userSignupAttribution: (f = msg.getUserSignupAttribution()) && proto.airchat.user.v2.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.UserAnalytics}
 */
proto.airchat.user.v2.UserAnalytics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.UserAnalytics;
  return proto.airchat.user.v2.UserAnalytics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.UserAnalytics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.UserAnalytics}
 */
proto.airchat.user.v2.UserAnalytics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowerCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFollowingCount(value);
      break;
    case 4:
      var value = new proto.airchat.user.v2.User;
      reader.readMessage(value,proto.airchat.user.v2.User.deserializeBinaryFromReader);
      msg.setUserSignupAttribution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UserAnalytics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.UserAnalytics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.UserAnalytics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserAnalytics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFollowerCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFollowingCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUserSignupAttribution();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.airchat.user.v2.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.airchat.user.v2.UserAnalytics.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UserAnalytics} returns this
 */
proto.airchat.user.v2.UserAnalytics.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 follower_count = 2;
 * @return {number}
 */
proto.airchat.user.v2.UserAnalytics.prototype.getFollowerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.user.v2.UserAnalytics} returns this
 */
proto.airchat.user.v2.UserAnalytics.prototype.setFollowerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 following_count = 3;
 * @return {number}
 */
proto.airchat.user.v2.UserAnalytics.prototype.getFollowingCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.airchat.user.v2.UserAnalytics} returns this
 */
proto.airchat.user.v2.UserAnalytics.prototype.setFollowingCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional User user_signup_attribution = 4;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.user.v2.UserAnalytics.prototype.getUserSignupAttribution = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, proto.airchat.user.v2.User, 4));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.user.v2.UserAnalytics} returns this
*/
proto.airchat.user.v2.UserAnalytics.prototype.setUserSignupAttribution = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.UserAnalytics} returns this
 */
proto.airchat.user.v2.UserAnalytics.prototype.clearUserSignupAttribution = function() {
  return this.setUserSignupAttribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.UserAnalytics.prototype.hasUserSignupAttribution = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.UserInterest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.UserInterest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.UserInterest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserInterest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.UserInterest}
 */
proto.airchat.user.v2.UserInterest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.UserInterest;
  return proto.airchat.user.v2.UserInterest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.UserInterest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.UserInterest}
 */
proto.airchat.user.v2.UserInterest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.UserInterest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.UserInterest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.UserInterest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.UserInterest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.airchat.user.v2.UserInterest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UserInterest} returns this
 */
proto.airchat.user.v2.UserInterest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.airchat.user.v2.UserInterest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.user.v2.UserInterest} returns this
 */
proto.airchat.user.v2.UserInterest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.user.v2.FeaturedUser.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.user.v2.FeaturedUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.user.v2.FeaturedUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.FeaturedUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.airchat.user.v2.User.toObject(includeInstance, f),
    interest: (f = msg.getInterest()) && proto.airchat.user.v2.UserInterest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.user.v2.FeaturedUser}
 */
proto.airchat.user.v2.FeaturedUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.user.v2.FeaturedUser;
  return proto.airchat.user.v2.FeaturedUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.user.v2.FeaturedUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.user.v2.FeaturedUser}
 */
proto.airchat.user.v2.FeaturedUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airchat.user.v2.User;
      reader.readMessage(value,proto.airchat.user.v2.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.airchat.user.v2.UserInterest;
      reader.readMessage(value,proto.airchat.user.v2.UserInterest.deserializeBinaryFromReader);
      msg.setInterest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.user.v2.FeaturedUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.user.v2.FeaturedUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.user.v2.FeaturedUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.user.v2.FeaturedUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airchat.user.v2.User.serializeBinaryToWriter
    );
  }
  f = message.getInterest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airchat.user.v2.UserInterest.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.airchat.user.v2.User}
 */
proto.airchat.user.v2.FeaturedUser.prototype.getUser = function() {
  return /** @type{?proto.airchat.user.v2.User} */ (
    jspb.Message.getWrapperField(this, proto.airchat.user.v2.User, 1));
};


/**
 * @param {?proto.airchat.user.v2.User|undefined} value
 * @return {!proto.airchat.user.v2.FeaturedUser} returns this
*/
proto.airchat.user.v2.FeaturedUser.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.FeaturedUser} returns this
 */
proto.airchat.user.v2.FeaturedUser.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.FeaturedUser.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserInterest interest = 2;
 * @return {?proto.airchat.user.v2.UserInterest}
 */
proto.airchat.user.v2.FeaturedUser.prototype.getInterest = function() {
  return /** @type{?proto.airchat.user.v2.UserInterest} */ (
    jspb.Message.getWrapperField(this, proto.airchat.user.v2.UserInterest, 2));
};


/**
 * @param {?proto.airchat.user.v2.UserInterest|undefined} value
 * @return {!proto.airchat.user.v2.FeaturedUser} returns this
*/
proto.airchat.user.v2.FeaturedUser.prototype.setInterest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.user.v2.FeaturedUser} returns this
 */
proto.airchat.user.v2.FeaturedUser.prototype.clearInterest = function() {
  return this.setInterest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.user.v2.FeaturedUser.prototype.hasInterest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.airchat.user.v2.UserAccountStatus = {
  USER_ACCOUNT_STATUS_INVALID: 0,
  USER_ACCOUNT_STATUS_ACTIVE: 1,
  USER_ACCOUNT_STATUS_NEW: 2,
  USER_ACCOUNT_STATUS_LOCKED_OUT: 3,
  USER_ACCOUNT_STATUS_SUSPENDED: 4
};

/**
 * @enum {number}
 */
proto.airchat.user.v2.UserAccountBackgroundColor = {
  USER_ACCOUNT_BACKGROUND_COLOR_INVALID: 0,
  USER_ACCOUNT_BACKGROUND_COLOR_POWDER_BLUE: 1,
  USER_ACCOUNT_BACKGROUND_COLOR_RED: 2,
  USER_ACCOUNT_BACKGROUND_COLOR_GREEN: 3,
  USER_ACCOUNT_BACKGROUND_COLOR_BLUE: 4,
  USER_ACCOUNT_BACKGROUND_COLOR_PURPLE: 5,
  USER_ACCOUNT_BACKGROUND_COLOR_DARK_GREY: 6
};

goog.object.extend(exports, proto.airchat.user.v2);
