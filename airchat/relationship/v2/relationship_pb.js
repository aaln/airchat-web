// source: airchat/relationship/v2/relationship.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = function () {
  if (this) {
    return this;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  if (typeof self !== 'undefined') {
    return self;
  }
  return Function('return this')();
}.call(null);

goog.exportSymbol('proto.airchat.relationship.v2.Contact', null, global);
goog.exportSymbol(
  'proto.airchat.relationship.v2.Contact.PhoneNumberCase',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.relationship.v2.ContactsUploadError',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.relationship.v2.InviteContactData',
  null,
  global
);
goog.exportSymbol(
  'proto.airchat.relationship.v2.PhoneNumberList',
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.Contact = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.airchat.relationship.v2.Contact.oneofGroups_
  );
};
goog.inherits(proto.airchat.relationship.v2.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.Contact.displayName =
    'proto.airchat.relationship.v2.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.PhoneNumberList = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.airchat.relationship.v2.PhoneNumberList.repeatedFields_,
    null
  );
};
goog.inherits(proto.airchat.relationship.v2.PhoneNumberList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.PhoneNumberList.displayName =
    'proto.airchat.relationship.v2.PhoneNumberList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.InviteContactData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.relationship.v2.InviteContactData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.InviteContactData.displayName =
    'proto.airchat.relationship.v2.InviteContactData';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.airchat.relationship.v2.Contact.oneofGroups_ = [[2, 3]];

/**
 * @enum {number}
 */
proto.airchat.relationship.v2.Contact.PhoneNumberCase = {
  PHONE_NUMBER_NOT_SET: 0,
  PHONE_NUMBER_HASH: 2,
  PHONE_NUMBER_LIST: 3
};

/**
 * @return {proto.airchat.relationship.v2.Contact.PhoneNumberCase}
 */
proto.airchat.relationship.v2.Contact.prototype.getPhoneNumberCase =
  function () {
    return /** @type {proto.airchat.relationship.v2.Contact.PhoneNumberCase} */ (
      jspb.Message.computeOneofCase(
        this,
        proto.airchat.relationship.v2.Contact.oneofGroups_[0]
      )
    );
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.relationship.v2.Contact.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.relationship.v2.Contact.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.relationship.v2.Contact} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.relationship.v2.Contact.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        phoneNumberHash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        phoneNumberList:
          (f = msg.getPhoneNumberList()) &&
          proto.airchat.relationship.v2.PhoneNumberList.toObject(
            includeInstance,
            f
          )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.Contact}
 */
proto.airchat.relationship.v2.Contact.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.Contact();
  return proto.airchat.relationship.v2.Contact.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.Contact}
 */
proto.airchat.relationship.v2.Contact.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhoneNumberHash(value);
        break;
      case 3:
        var value = new proto.airchat.relationship.v2.PhoneNumberList();
        reader.readMessage(
          value,
          proto.airchat.relationship.v2.PhoneNumberList
            .deserializeBinaryFromReader
        );
        msg.setPhoneNumberList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.Contact.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.Contact.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(2, f);
  }
  f = message.getPhoneNumberList();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.airchat.relationship.v2.PhoneNumberList.serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.airchat.relationship.v2.Contact.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.Contact} returns this
 */
proto.airchat.relationship.v2.Contact.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string phone_number_hash = 2;
 * @return {string}
 */
proto.airchat.relationship.v2.Contact.prototype.getPhoneNumberHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.Contact} returns this
 */
proto.airchat.relationship.v2.Contact.prototype.setPhoneNumberHash = function (
  value
) {
  return jspb.Message.setOneofField(
    this,
    2,
    proto.airchat.relationship.v2.Contact.oneofGroups_[0],
    value
  );
};

/**
 * Clears the field making it undefined.
 * @return {!proto.airchat.relationship.v2.Contact} returns this
 */
proto.airchat.relationship.v2.Contact.prototype.clearPhoneNumberHash =
  function () {
    return jspb.Message.setOneofField(
      this,
      2,
      proto.airchat.relationship.v2.Contact.oneofGroups_[0],
      undefined
    );
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.relationship.v2.Contact.prototype.hasPhoneNumberHash =
  function () {
    return jspb.Message.getField(this, 2) != null;
  };

/**
 * optional PhoneNumberList phone_number_list = 3;
 * @return {?proto.airchat.relationship.v2.PhoneNumberList}
 */
proto.airchat.relationship.v2.Contact.prototype.getPhoneNumberList =
  function () {
    return /** @type{?proto.airchat.relationship.v2.PhoneNumberList} */ (
      jspb.Message.getWrapperField(
        this,
        proto.airchat.relationship.v2.PhoneNumberList,
        3
      )
    );
  };

/**
 * @param {?proto.airchat.relationship.v2.PhoneNumberList|undefined} value
 * @return {!proto.airchat.relationship.v2.Contact} returns this
 */
proto.airchat.relationship.v2.Contact.prototype.setPhoneNumberList = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    3,
    proto.airchat.relationship.v2.Contact.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.airchat.relationship.v2.Contact} returns this
 */
proto.airchat.relationship.v2.Contact.prototype.clearPhoneNumberList =
  function () {
    return this.setPhoneNumberList(undefined);
  };

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.airchat.relationship.v2.Contact.prototype.hasPhoneNumberList =
  function () {
    return jspb.Message.getField(this, 3) != null;
  };

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.PhoneNumberList.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.relationship.v2.PhoneNumberList.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.airchat.relationship.v2.PhoneNumberList.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.relationship.v2.PhoneNumberList} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.relationship.v2.PhoneNumberList.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumberHashList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.PhoneNumberList}
 */
proto.airchat.relationship.v2.PhoneNumberList.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.PhoneNumberList();
  return proto.airchat.relationship.v2.PhoneNumberList.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.PhoneNumberList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.PhoneNumberList}
 */
proto.airchat.relationship.v2.PhoneNumberList.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.addPhoneNumberHash(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.PhoneNumberList.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.relationship.v2.PhoneNumberList.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.PhoneNumberList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.PhoneNumberList.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getPhoneNumberHashList();
    if (f.length > 0) {
      writer.writeRepeatedString(1, f);
    }
  };

/**
 * repeated string phone_number_hash = 1;
 * @return {!Array<string>}
 */
proto.airchat.relationship.v2.PhoneNumberList.prototype.getPhoneNumberHashList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    );
  };

/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.relationship.v2.PhoneNumberList} returns this
 */
proto.airchat.relationship.v2.PhoneNumberList.prototype.setPhoneNumberHashList =
  function (value) {
    return jspb.Message.setField(this, 1, value || []);
  };

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.relationship.v2.PhoneNumberList} returns this
 */
proto.airchat.relationship.v2.PhoneNumberList.prototype.addPhoneNumberHash =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
  };

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.PhoneNumberList} returns this
 */
proto.airchat.relationship.v2.PhoneNumberList.prototype.clearPhoneNumberHashList =
  function () {
    return this.setPhoneNumberHashList([]);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.airchat.relationship.v2.InviteContactData.prototype.toObject =
    function (opt_includeInstance) {
      return proto.airchat.relationship.v2.InviteContactData.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.airchat.relationship.v2.InviteContactData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.airchat.relationship.v2.InviteContactData.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        phoneNumberHash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        username: jspb.Message.getFieldWithDefault(msg, 2, ''),
        friendCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.InviteContactData}
 */
proto.airchat.relationship.v2.InviteContactData.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.InviteContactData();
  return proto.airchat.relationship.v2.InviteContactData.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.InviteContactData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.InviteContactData}
 */
proto.airchat.relationship.v2.InviteContactData.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setPhoneNumberHash(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setUsername(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readInt64());
          msg.setFriendCount(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.InviteContactData.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.airchat.relationship.v2.InviteContactData.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.InviteContactData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.InviteContactData.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getPhoneNumberHash();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getUsername();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getFriendCount();
    if (f !== 0) {
      writer.writeInt64(3, f);
    }
  };

/**
 * optional string phone_number_hash = 1;
 * @return {string}
 */
proto.airchat.relationship.v2.InviteContactData.prototype.getPhoneNumberHash =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.InviteContactData} returns this
 */
proto.airchat.relationship.v2.InviteContactData.prototype.setPhoneNumberHash =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string username = 2;
 * @return {string}
 */
proto.airchat.relationship.v2.InviteContactData.prototype.getUsername =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.InviteContactData} returns this
 */
proto.airchat.relationship.v2.InviteContactData.prototype.setUsername =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

/**
 * optional int64 friend_count = 3;
 * @return {number}
 */
proto.airchat.relationship.v2.InviteContactData.prototype.getFriendCount =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/**
 * @param {number} value
 * @return {!proto.airchat.relationship.v2.InviteContactData} returns this
 */
proto.airchat.relationship.v2.InviteContactData.prototype.setFriendCount =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
  };

/**
 * @enum {number}
 */
proto.airchat.relationship.v2.ContactsUploadError = {
  CONTACTS_UPLOAD_ERROR_INVALID: 0,
  CONTACTS_UPLOAD_ERROR_INTERNAL: 1,
  CONTACTS_UPLOAD_ERROR_INVALID_NUMBER: 2,
  CONTACTS_UPLOAD_ERROR_BATCH_TOO_LARGE: 3
};

goog.object.extend(exports, proto.airchat.relationship.v2);
