// source: airchat/relationship/v2/relationship_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var airchat_relationship_v2_relationship_pb = require('../../../airchat/relationship/v2/relationship_pb.js');
goog.object.extend(proto, airchat_relationship_v2_relationship_pb);
var airchat_user_v2_user_pb = require('../../../airchat/user/v2/user_pb.js');
goog.object.extend(proto, airchat_user_v2_user_pb);
goog.exportSymbol('proto.airchat.relationship.v2.GetFeaturedUsersRequest', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetFeaturedUsersResponse', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetInviteContactDataRequest', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetInviteContactDataResponse', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetRecommendedUsersRequest', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetRecommendedUsersResponse', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetSuggestedUsersRequest', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.GetSuggestedUsersResponse', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.UploadContactsRequest', null, global);
goog.exportSymbol('proto.airchat.relationship.v2.UploadContactsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.UploadContactsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.UploadContactsRequest.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.UploadContactsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.UploadContactsRequest.displayName = 'proto.airchat.relationship.v2.UploadContactsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.UploadContactsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.UploadContactsResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.UploadContactsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.UploadContactsResponse.displayName = 'proto.airchat.relationship.v2.UploadContactsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.relationship.v2.GetFeaturedUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetFeaturedUsersRequest.displayName = 'proto.airchat.relationship.v2.GetFeaturedUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.GetFeaturedUsersResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.GetFeaturedUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetFeaturedUsersResponse.displayName = 'proto.airchat.relationship.v2.GetFeaturedUsersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.GetInviteContactDataRequest.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.GetInviteContactDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetInviteContactDataRequest.displayName = 'proto.airchat.relationship.v2.GetInviteContactDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.GetInviteContactDataResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.GetInviteContactDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetInviteContactDataResponse.displayName = 'proto.airchat.relationship.v2.GetInviteContactDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.relationship.v2.GetSuggestedUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetSuggestedUsersRequest.displayName = 'proto.airchat.relationship.v2.GetSuggestedUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.GetSuggestedUsersResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.GetSuggestedUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetSuggestedUsersResponse.displayName = 'proto.airchat.relationship.v2.GetSuggestedUsersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airchat.relationship.v2.GetRecommendedUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetRecommendedUsersRequest.displayName = 'proto.airchat.relationship.v2.GetRecommendedUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.airchat.relationship.v2.GetRecommendedUsersResponse.repeatedFields_, null);
};
goog.inherits(proto.airchat.relationship.v2.GetRecommendedUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.airchat.relationship.v2.GetRecommendedUsersResponse.displayName = 'proto.airchat.relationship.v2.GetRecommendedUsersResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.UploadContactsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.UploadContactsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.UploadContactsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.UploadContactsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.UploadContactsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactsList: jspb.Message.toObjectList(msg.getContactsList(),
    airchat_relationship_v2_relationship_pb.Contact.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.UploadContactsRequest}
 */
proto.airchat.relationship.v2.UploadContactsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.UploadContactsRequest;
  return proto.airchat.relationship.v2.UploadContactsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.UploadContactsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.UploadContactsRequest}
 */
proto.airchat.relationship.v2.UploadContactsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_relationship_v2_relationship_pb.Contact;
      reader.readMessage(value,airchat_relationship_v2_relationship_pb.Contact.deserializeBinaryFromReader);
      msg.addContacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.UploadContactsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.UploadContactsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.UploadContactsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.UploadContactsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_relationship_v2_relationship_pb.Contact.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Contact contacts = 1;
 * @return {!Array<!proto.airchat.relationship.v2.Contact>}
 */
proto.airchat.relationship.v2.UploadContactsRequest.prototype.getContactsList = function() {
  return /** @type{!Array<!proto.airchat.relationship.v2.Contact>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_relationship_v2_relationship_pb.Contact, 1));
};


/**
 * @param {!Array<!proto.airchat.relationship.v2.Contact>} value
 * @return {!proto.airchat.relationship.v2.UploadContactsRequest} returns this
*/
proto.airchat.relationship.v2.UploadContactsRequest.prototype.setContactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.relationship.v2.Contact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.relationship.v2.Contact}
 */
proto.airchat.relationship.v2.UploadContactsRequest.prototype.addContacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.relationship.v2.Contact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.UploadContactsRequest} returns this
 */
proto.airchat.relationship.v2.UploadContactsRequest.prototype.clearContactsList = function() {
  return this.setContactsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.UploadContactsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.UploadContactsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.UploadContactsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.UploadContactsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.UploadContactsResponse}
 */
proto.airchat.relationship.v2.UploadContactsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.UploadContactsResponse;
  return proto.airchat.relationship.v2.UploadContactsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.UploadContactsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.UploadContactsResponse}
 */
proto.airchat.relationship.v2.UploadContactsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.airchat.relationship.v2.ContactsUploadError} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.UploadContactsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.UploadContactsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.UploadContactsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContactsUploadError error = 1;
 * @return {!proto.airchat.relationship.v2.ContactsUploadError}
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.getError = function() {
  return /** @type {!proto.airchat.relationship.v2.ContactsUploadError} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.airchat.relationship.v2.ContactsUploadError} value
 * @return {!proto.airchat.relationship.v2.UploadContactsResponse} returns this
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated airchat.user.v2.User user = 2;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.getUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 2));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.relationship.v2.UploadContactsResponse} returns this
*/
proto.airchat.relationship.v2.UploadContactsResponse.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.UploadContactsResponse} returns this
 */
proto.airchat.relationship.v2.UploadContactsResponse.prototype.clearUserList = function() {
  return this.setUserList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetFeaturedUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetFeaturedUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetFeaturedUsersRequest}
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetFeaturedUsersRequest;
  return proto.airchat.relationship.v2.GetFeaturedUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetFeaturedUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetFeaturedUsersRequest}
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetFeaturedUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetFeaturedUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetFeaturedUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetFeaturedUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetFeaturedUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetFeaturedUsersResponse}
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetFeaturedUsersResponse;
  return proto.airchat.relationship.v2.GetFeaturedUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetFeaturedUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetFeaturedUsersResponse}
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetFeaturedUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetFeaturedUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated airchat.user.v2.User user = 1;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.prototype.getUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.relationship.v2.GetFeaturedUsersResponse} returns this
*/
proto.airchat.relationship.v2.GetFeaturedUsersResponse.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.GetFeaturedUsersResponse} returns this
 */
proto.airchat.relationship.v2.GetFeaturedUsersResponse.prototype.clearUserList = function() {
  return this.setUserList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetInviteContactDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetInviteContactDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumberHashList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataRequest}
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetInviteContactDataRequest;
  return proto.airchat.relationship.v2.GetInviteContactDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetInviteContactDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataRequest}
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPhoneNumberHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetInviteContactDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetInviteContactDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumberHashList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string phone_number_hash = 1;
 * @return {!Array<string>}
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.prototype.getPhoneNumberHashList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataRequest} returns this
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.prototype.setPhoneNumberHashList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataRequest} returns this
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.prototype.addPhoneNumberHash = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataRequest} returns this
 */
proto.airchat.relationship.v2.GetInviteContactDataRequest.prototype.clearPhoneNumberHashList = function() {
  return this.setPhoneNumberHashList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetInviteContactDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetInviteContactDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumberDataList: jspb.Message.toObjectList(msg.getPhoneNumberDataList(),
    airchat_relationship_v2_relationship_pb.InviteContactData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataResponse}
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetInviteContactDataResponse;
  return proto.airchat.relationship.v2.GetInviteContactDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetInviteContactDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataResponse}
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_relationship_v2_relationship_pb.InviteContactData;
      reader.readMessage(value,airchat_relationship_v2_relationship_pb.InviteContactData.deserializeBinaryFromReader);
      msg.addPhoneNumberData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetInviteContactDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetInviteContactDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumberDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_relationship_v2_relationship_pb.InviteContactData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InviteContactData phone_number_data = 1;
 * @return {!Array<!proto.airchat.relationship.v2.InviteContactData>}
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.prototype.getPhoneNumberDataList = function() {
  return /** @type{!Array<!proto.airchat.relationship.v2.InviteContactData>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_relationship_v2_relationship_pb.InviteContactData, 1));
};


/**
 * @param {!Array<!proto.airchat.relationship.v2.InviteContactData>} value
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataResponse} returns this
*/
proto.airchat.relationship.v2.GetInviteContactDataResponse.prototype.setPhoneNumberDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.relationship.v2.InviteContactData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.relationship.v2.InviteContactData}
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.prototype.addPhoneNumberData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.relationship.v2.InviteContactData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.GetInviteContactDataResponse} returns this
 */
proto.airchat.relationship.v2.GetInviteContactDataResponse.prototype.clearPhoneNumberDataList = function() {
  return this.setPhoneNumberDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetSuggestedUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetSuggestedUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersRequest}
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetSuggestedUsersRequest;
  return proto.airchat.relationship.v2.GetSuggestedUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetSuggestedUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersRequest}
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetSuggestedUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetSuggestedUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string page_key = 1;
 * @return {string}
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.prototype.getPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersRequest} returns this
 */
proto.airchat.relationship.v2.GetSuggestedUsersRequest.prototype.setPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetSuggestedUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetSuggestedUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersResponse}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetSuggestedUsersResponse;
  return proto.airchat.relationship.v2.GetSuggestedUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetSuggestedUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersResponse}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetSuggestedUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetSuggestedUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getNextPageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated airchat.user.v2.User user = 1;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.getUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersResponse} returns this
*/
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersResponse} returns this
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.clearUserList = function() {
  return this.setUserList([]);
};


/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.getNextPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.GetSuggestedUsersResponse} returns this
 */
proto.airchat.relationship.v2.GetSuggestedUsersResponse.prototype.setNextPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetRecommendedUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetRecommendedUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersRequest}
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetRecommendedUsersRequest;
  return proto.airchat.relationship.v2.GetRecommendedUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetRecommendedUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersRequest}
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetRecommendedUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetRecommendedUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string page_key = 1;
 * @return {string}
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.prototype.getPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersRequest} returns this
 */
proto.airchat.relationship.v2.GetRecommendedUsersRequest.prototype.setPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.airchat.relationship.v2.GetRecommendedUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airchat.relationship.v2.GetRecommendedUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    airchat_user_v2_user_pb.User.toObject, includeInstance),
    nextPageKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersResponse}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airchat.relationship.v2.GetRecommendedUsersResponse;
  return proto.airchat.relationship.v2.GetRecommendedUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airchat.relationship.v2.GetRecommendedUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersResponse}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new airchat_user_v2_user_pb.User;
      reader.readMessage(value,airchat_user_v2_user_pb.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airchat.relationship.v2.GetRecommendedUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airchat.relationship.v2.GetRecommendedUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      airchat_user_v2_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getNextPageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated airchat.user.v2.User user = 1;
 * @return {!Array<!proto.airchat.user.v2.User>}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.getUserList = function() {
  return /** @type{!Array<!proto.airchat.user.v2.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, airchat_user_v2_user_pb.User, 1));
};


/**
 * @param {!Array<!proto.airchat.user.v2.User>} value
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersResponse} returns this
*/
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.airchat.user.v2.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.airchat.user.v2.User}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.airchat.user.v2.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersResponse} returns this
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.clearUserList = function() {
  return this.setUserList([]);
};


/**
 * optional string next_page_key = 2;
 * @return {string}
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.getNextPageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.airchat.relationship.v2.GetRecommendedUsersResponse} returns this
 */
proto.airchat.relationship.v2.GetRecommendedUsersResponse.prototype.setNextPageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.airchat.relationship.v2);
